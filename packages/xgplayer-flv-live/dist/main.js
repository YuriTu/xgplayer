/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/events/events.js":
/*!*******************************************************************************************!*\
  !*** /Users/jiangyuqing/Desktop/Projects/devspace/xgplayer/node_modules/events/events.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "../../node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Track: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").default,
  Tracks: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").Tracks,
  AudioTrack: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").AudioTrack,
  VideoTrack: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").VideoTrack,

  XgBuffer: __webpack_require__(/*! ./src/buffer */ "../xgplayer-buffer/src/buffer.js").XgBuffer,
  RemuxBuffer: __webpack_require__(/*! ./src/buffer */ "../xgplayer-buffer/src/buffer.js").RemuxBuffer,

  PreSource: __webpack_require__(/*! ./src/presouce */ "../xgplayer-buffer/src/presouce.js").default
};


/***/ }),

/***/ "../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! exports provided: XgBuffer, RemuxBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XgBuffer", function() { return XgBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemuxBuffer", function() { return RemuxBuffer; });
class XgBuffer {
  /**
   * A buffer to store loaded data.
   *
   * @class LoaderBuffer
   * @param {number} length - Optional the buffer size
   */
  constructor (length) {
    this.length = length || 0
    this.historyLen = length || 0
    this.array = []
    this.offset = 0
  }

  /**
   * The function to push data.
   *
   * @param {number} data - The data to push into the buffer
   */
  push (data) {
    this.array.push(data)
    this.length += data.byteLength
    this.historyLen += data.byteLength
  }

  /**
   * The function to shift data.
   *
   * @param {number} length - The size of shift.
   */
  shift (length) {
    if (this.array.length < 1) {
      return new Uint8Array(0)
    }

    if (length === undefined) {
      return this._shiftBuffer()
    }
    if ((this.offset + length) === this.array[0].length) {
      let ret = this.array[0].slice(this.offset, this.offset + length)
      this.offset = 0
      this.array.shift()
      this.length -= length
      return ret
    }

    if ((this.offset + length) < this.array[0].length) {
      let ret = this.array[0].slice(this.offset, this.offset + length)
      this.offset += length
      this.length -= length
      return ret
    }

    let ret = new Uint8Array(length)
    let tmpoff = 0
    while (this.array.length > 0 && length > 0) {
      if ((this.offset + length) < this.array[0].length) {
        let tmp = this.array[0].slice(this.offset, this.offset + length)
        ret.set(tmp, tmpoff)
        this.offset += length
        this.length -= length
        length = 0
        break
      } else {
        let templength = this.array[0].length - this.offset
        ret.set(this.array[0].slice(this.offset, this.array[0].length), tmpoff)
        this.array.shift()
        this.offset = 0
        tmpoff += templength
        this.length -= templength
        length -= templength
      }
    }
    return ret
  }

  /**
   * Function to clear the buffer.
   */
  clear () {
    this.array = []
    this.length = 0
    this.offset = 0
  }

  destroy () {
    this.clear()
    this.historyLen = 0
  }

  /**
   * Function to shift one unit8Array.
   */
  _shiftBuffer () {
    this.length -= this.array[0].length
    this.offset = 0
    return this.array.shift()
  }

  /**
   * Convert uint8 data to number.
   *
   * @param {number} start - the start postion.
   * @param {number} length - the length of data.
   */
  toInt (start, length) {
    let retInt = 0
    let i = this.offset + start
    while (i < this.offset + length + start) {
      if (i < this.array[0].length) {
        retInt = retInt * 256 + this.array[0][i]
      } else if (this.array[1]) {
        retInt = retInt * 256 + this.array[1][i - this.array[0].length]
      }

      i++
    }
    return retInt
  }
}

class RemuxBuffer {
  constructor () {
    this.video = []
    this.audio = []
  }

  destroy () {
    this.video = []
    this.audio = []
  }
}


/***/ }),

/***/ "../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Source {
  constructor () {
    this.mimetype = '';
    this.init = null;
    this.data = [];
  }
}

class PreSource {
  constructor () {
    this.sources = {};
  }

  getSource (source) {
    return this.sources[source];
  }

  createSource (name) {
    this.sources[name] = new Source();
    return this.sources[name];
  }

  clear () {
    this.sources = {};
  }

  destroy () {
    this.sources = {};
  }
}

/* harmony default export */ __webpack_exports__["default"] = (PreSource);


/***/ }),

/***/ "../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! exports provided: default, AudioTrack, VideoTrack, Tracks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Track; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrack", function() { return AudioTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrack", function() { return VideoTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tracks", function() { return Tracks; });
class Track {
  /**
   * The constructor.
   */
  constructor () {
    this.id = -1
    this.sequenceNumber = 0
    this.samples = []
    this.droppedSamples = []
    this.length = 0
  }

  /**
   * Reset the track.
   */
  reset () {
    this.sequenceNumber = 0
    this.samples = []
    this.length = 0
  }
  /**
   * destroy the track.
   */
  distroy () {
    this.reset()
    this.id = -1
  }
}

class AudioTrack extends Track {
  /**
   * The constructor for audio track.
   */
  constructor () {
    super()
    this.TAG = 'AudioTrack'
    this.type = 'audio'
  }
}

class VideoTrack extends Track {
  /**
   * The constructor for video track.
   */
  constructor () {
    super()
    this.TAG = 'VideoTrack'
    this.type = 'video'
    this.dropped = 0
  }
  /**
   * reset the video track.
   */
  reset () {
    this.sequenceNumber = 0
    this.samples = []
    this.length = 0
    this.dropped = 0
  }
}

class Tracks {
  constructor () {
    this.audioTrack = null
    this.videoTrack = null
  }

  destroy () {
    this.audioTrack = null
    this.videoTrack = null
  }
}


/***/ }),

/***/ "../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Nalunit: __webpack_require__(/*! ./src/h264/nalunit */ "../xgplayer-codec/src/h264/nalunit/index.js").default,
  SpsParser: __webpack_require__(/*! ./src/h264/nalunit/sps */ "../xgplayer-codec/src/h264/nalunit/sps.js").default,

  Compatibility: __webpack_require__(/*! ./src/compatibility */ "../xgplayer-codec/src/compatibility.js").default
};


/***/ }),

/***/ "../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

class AAC {

  static getSilentFrame(codec, channelCount) {
    if (codec === 'mp4a.40.2') {
      // handle LC-AAC
      if (channelCount === 1) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
      } else if (channelCount === 2) {
        return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
      } else if (channelCount === 3) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
      } else if (channelCount === 4) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
      } else if (channelCount === 5) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
      } else if (channelCount === 6) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
      }
    } else {
      // handle HE-AAC (mp4a.40.5 / mp4a.40.29)
      if (channelCount === 1) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      } else if (channelCount === 2) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      } else if (channelCount === 3) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      }
    }
    return null;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (AAC);


/***/ }),

/***/ "../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aac_aac_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aac/aac-helper */ "../xgplayer-codec/src/aac/aac-helper.js");



const {REMUX_EVENTS, DEMUX_EVENTS} = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"]

class Compatibility {
  constructor () {
    this.nextAudioDts = 0 // 模拟下一段音频数据的dts
    this.nextVideoDts = 0 // 模拟下一段视频数据的dts

    this.lastAudioSamplesLen = 0 // 上一段音频数据的长度
    this.lastVideoSamplesLen = 0 // 上一段视频数据的长度

    this.lastVideoDts = undefined // 上一段音频数据的长度
    this.lastAudioDts = undefined // 上一段视频数据的长度

    this.allAudioSamplesCount = 0 // 音频总数据量(原始帧)
    this.allVideoSamplesCount = 0 // 视频总数据量(原始帧)

    this._firstAudioSample = null
    this._firstVideoSample = null

    this.filledAudioSamples = [] // 补充音频帧（）
    this.filledVideoSamples = [] // 补充视频帧（）

    this._videoLargeGap = 0
    this._audioLargeGap = 0
  }

  init () {
    this.before(REMUX_EVENTS.REMUX_MEDIA, this.doFix.bind(this))
  }

  reset () {
    this.nextAudioDts = null // 估算下一段音频数据的dts
    this.nextVideoDts = null // 估算下一段视频数据的dts

    this.lastAudioSamplesLen = 0 // 上一段音频数据的长度
    this.lastVideoSamplesLen = 0 // 上一段视频数据的长度

    this.lastVideoDts = undefined // 上一段音频数据的长度
    this.lastAudioDts = undefined // 上一段视频数据的长度

    // this.allAudioSamplesCount = 0 // 音频总数据量(原始帧)
    // this.allVideoSamplesCount = 0 // 视频总数据量(原始帧)

    // this._firstAudioSample = null
    // this._firstVideoSample = null

    this.filledAudioSamples = [] // 补充音频帧（）
    this.filledVideoSamples = [] // 补充视频帧（）
  }

  doFix () {
    const { isFirstAudioSamples, isFirstVideoSamples } = this.getFirstSample()

    // this.removeInvalidSamples()

    this.recordSamplesCount()

    if (this._firstVideoSample) {
      this.fixRefSampleDuration(this.videoTrack.meta, this.videoTrack.samples)
    }
    if (this._firstAudioSample) {
      this.fixRefSampleDuration(this.audioTrack.meta, this.audioTrack.samples)
    }

    const { changed: videoChanged, changedIdx: videoChangedIdx } = Compatibility.detactChangeStream(this.videoTrack.samples)
    if (videoChanged && !isFirstAudioSamples) {
      this.fixChangeStreamVideo(videoChangedIdx)
    } else {
      this.doFixVideo(isFirstVideoSamples)
    }

    const { changed: audioChanged, changedIdx: audioChangedIdx } = Compatibility.detactChangeStream(this.audioTrack.samples)
    if (audioChanged) {
      this.fixChangeStreamAudio(audioChangedIdx)
    } else {
      this.doFixAudio(isFirstAudioSamples)
    }

    // this.removeInvalidSamples()
  }

  doFixVideo (first, streamChangeStart) {
    let {samples: videoSamples, meta} = this.videoTrack

    if (meta.frameRate && meta.frameRate.fixed === false) {
      return;
    }

    if (!videoSamples || !videoSamples.length || !this._firstVideoSample) {
      return
    }

    // console.log(`video lastSample, ${videoSamples[videoSamples.length - 1].dts}`)

    const firstSample = videoSamples[0]

    const samplesLen = videoSamples.length;

    // step0.修复hls流出现巨大gap，需要强制重定位的问题
    if (this._videoLargeGap > 0) {
      Compatibility.doFixLargeGap(videoSamples, this._videoLargeGap)
    }

    if (firstSample.dts !== this._firstVideoSample.dts && (streamChangeStart || Compatibility.detectLargeGap(this.nextVideoDts, firstSample))) {
      if (streamChangeStart) {
        this.nextVideoDts = streamChangeStart // FIX: Hls中途切codec，在如果直接seek到后面的点会导致largeGap计算失败
      }

      this._videoLargeGap = this.nextVideoDts - firstSample.dts
      Compatibility.doFixLargeGap(videoSamples, this._videoLargeGap)
    }

    const firstDts = firstSample.dts

    // step1. 修复与audio首帧差距太大的问题
    if (first && this._firstAudioSample) {
      const videoFirstDts = this._firstVideoSample.dts
      const audioFirstDts = this._firstAudioSample.dts
      const gap = videoFirstDts - audioFirstDts
      if (gap > (2 * meta.refSampleDuration)) {
        const fillCount = Math.floor(gap / meta.refSampleDuration)

        for (let i = 0; i < fillCount; i++) {
          const clonedFirstSample = Object.assign({}, firstSample) // 视频头部帧缺失需要复制第一帧
          // 重新计算sample的dts和pts
          clonedFirstSample.dts = videoFirstDts - (i + 1) * meta.refSampleDuration
          clonedFirstSample.pts = clonedFirstSample.dts + clonedFirstSample.cts

          videoSamples.unshift(clonedFirstSample)

          this.filledVideoSamples.push({
            dts: clonedFirstSample.dts,
            size: clonedFirstSample.data.byteLength
          })
        }
      }
    }

    let gap
    // step2. 修复samples段之间的间距问题、
    if (this.nextVideoDts) {
      // step1. 处理samples段之间的丢帧情况
      // 当发现duration差距大于2帧时进行补帧
      gap = firstDts - this.nextVideoDts
      const absGap = Math.abs(gap)
      if (gap > (2 * meta.refSampleDuration)) {
        const fillFrameCount = Math.floor(gap / meta.refSampleDuration)

        for (let i = 0; i < fillFrameCount; i++) {
          const clonedSample = Object.assign({}, videoSamples[0])
          const computed = firstDts - (i + 1) * meta.refSampleDuration

          clonedSample.dts = computed > this.nextVideoDts ? computed : this.nextVideoDts // 补的第一帧一定要是nextVideoDts
          clonedSample.pts = clonedSample.dts + clonedSample.cts

          this.videoTrack.samples.unshift(clonedSample)

          this.filledVideoSamples.push({
            dts: clonedSample.dts,
            size: clonedSample.data.byteLength
          })
        }
      } else if (absGap <= meta.refSampleDuration && absGap > 0) {
        // 当差距在+-一帧之间时将第一帧的dts强行定位到期望位置
        // console.log('重定位视频帧dts', videoSamples[0].dts, this.nextVideoDts)
        videoSamples[0].dts = this.nextVideoDts
        videoSamples[0].originDts = videoSamples[0].dts
        videoSamples[0].cts = videoSamples[0].cts !== undefined ? videoSamples[0].cts : videoSamples[0].pts - videoSamples[0].dts
        videoSamples[0].pts = videoSamples[0].dts + videoSamples[0].cts
      } else if (gap < 0) {
        // 出现大的gap
        Compatibility.doFixLargeGap(videoSamples, (-1 * gap))
      }
    }
    const lastDts = videoSamples[videoSamples.length - 1].dts;

    const lastSampleDuration = videoSamples.length >= 2 ? lastDts - videoSamples[videoSamples.length - 2].dts : meta.refSampleDuration

    this.lastVideoSamplesLen = samplesLen
    this.nextVideoDts = lastDts + lastSampleDuration
    this.lastVideoDts = lastDts

    // step2. 修复sample段之内的间距问题
    // step3. 修复samples段内部的dts异常问题
    for (let i = 0, len = videoSamples.length; i < len; i++) {
      const current = videoSamples[i]
      const next = videoSamples[i + 1]

      if (!next) {
        break;
      }

      const duration = next.dts - current.dts;

      if (duration > (2 * meta.refSampleDuration)) {
        // 两帧之间间隔太大，需要补空白帧
        let fillFrameCount = Math.floor(duration / meta.refSampleDuration)

        let fillFrameIdx = 0
        while (fillFrameIdx < fillFrameCount) {
          const fillFrame = Object.assign({}, next)
          fillFrame.dts = current.dts + (fillFrameIdx + 1) * meta.refSampleDuration
          fillFrame.pts = fillFrame.dts + fillFrame.cts
          if (fillFrame < next.dts) {
            videoSamples.splice(i, 0, fillFrame)

            this.filledVideoSamples.push({
              dts: fillFrame.dts,
              size: fillFrame.data.byteLength
            })
          }

          fillFrameIdx++
          i++;
        }
      }
    }

    this.videoTrack.samples = videoSamples;
  }

  doFixAudio (first, streamChangeStart) {
    let {samples: audioSamples, meta} = this.audioTrack

    if (!audioSamples || !audioSamples.length) {
      return
    }
    // console.log(`audio lastSample, ${audioSamples[audioSamples.length - 1].dts}`)

    const samplesLen = audioSamples.length;
    const silentFrame = _aac_aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(meta.codec, meta.channelCount)

    const firstSample = this._firstAudioSample

    const _firstSample = audioSamples[0]
    // 对audioSamples按照dts做排序
    // audioSamples = Compatibility.sortAudioSamples(audioSamples)
    if (this._audioLargeGap > 0) {
      Compatibility.doFixLargeGap(audioSamples, this._audioLargeGap)
    }

    if (_firstSample.dts !== this._firstAudioSample.dts && (streamChangeStart || Compatibility.detectLargeGap(this.nextAudioDts, _firstSample))) {
      if (streamChangeStart) {
        this.nextAudioDts = streamChangeStart // FIX: Hls中途切codec，在如果直接seek到后面的点会导致largeGap计算失败
      }
      this._audioLargeGap = this.nextAudioDts - _firstSample.dts
      Compatibility.doFixLargeGap(audioSamples, this._audioLargeGap)
    }
    // step0. 首帧与video首帧间距大的问题
    if (this._firstVideoSample && first) {
      const videoFirstPts = this._firstVideoSample.pts ? this._firstVideoSample.pts : this._firstVideoSample.dts + this._firstVideoSample.cts

      if (firstSample.dts - videoFirstPts > meta.refSampleDuration) {
        const silentSampleCount = Math.floor((firstSample.dts - videoFirstPts) / meta.refSampleDuration)

        for (let i = 0; i < silentSampleCount; i++) {
          const silentSample = {
            data: silentFrame,
            datasize: silentFrame.byteLength,
            dts: firstSample.dts - (i + 1) * meta.refSampleDuration,
            filtered: 0
          }

          audioSamples.unshift(silentSample)

          this.filledAudioSamples.push({
            dts: silentSample.dts,
            size: silentSample.data.byteLength
          })
        }
      }
    }

    let gap
    const firstDts = audioSamples[0].dts

    if (this.nextAudioDts) {
      // step1. 处理samples段之间的丢帧情况
      // 当发现duration差距大于1帧时进行补帧
      gap = firstDts - this.nextAudioDts
      const absGap = Math.abs(gap)

      if (absGap > meta.refSampleDuration && samplesLen === 1 && this.lastAudioSamplesLen === 1) {
        meta.refSampleDurationFixed = undefined
      }

      if (gap > (2 * meta.refSampleDuration)) {
        if (samplesLen === 1 && this.lastAudioSamplesLen === 1) {
          // 如果sample的length一直是1，而且一直不符合refSampleDuration，需要动态修改refSampleDuration
          meta.refSampleDurationFixed = meta.refSampleDurationFixed !== undefined ? meta.refSampleDurationFixed + gap : meta.refSampleDuration + gap
        } else {
          const silentFrameCount = Math.floor(gap / meta.refSampleDuration)

          for (let i = 0; i < silentFrameCount; i++) {
            const computed = firstDts - (i + 1) * meta.refSampleDuration
            const silentSample = Object.assign({}, audioSamples[0], {
              dts: computed > this.nextAudioDts ? computed : this.nextAudioDts
            })

            this.filledAudioSamples.push({
              dts: silentSample.dts,
              size: silentSample.data.byteLength
            })
            this.audioTrack.samples.unshift(silentSample)
          }
        }
      } else if (absGap <= meta.refSampleDuration && absGap > 0) {
        // 当差距比较小的时候将音频帧重定位
        // console.log('重定位音频帧dts', audioSamples[0].dts, this.nextAudioDts)
        audioSamples[0].dts = this.nextAudioDts
        audioSamples[0].pts = this.nextAudioDts
      } else if (gap < 0) {
        Compatibility.doFixLargeGap(audioSamples, (-1 * gap))
      }
    }
    const lastDts = audioSamples[audioSamples.length - 1].dts;
    const lastSampleDuration = audioSamples.length >= 2 ? lastDts - audioSamples[audioSamples.length - 2].dts : meta.refSampleDuration

    this.lastAudioSamplesLen = samplesLen;
    this.nextAudioDts = meta.refSampleDurationFixed ? lastDts + meta.refSampleDurationFixed : lastDts + lastSampleDuration
    this.lastAudioDts = lastDts

    // step3. 修复samples段内部的dts异常问题
    for (let i = 0, len = audioSamples.length; i < len; i++) {
      const current = audioSamples[i]
      const next = audioSamples[i + 1]

      if (!next) {
        break;
      }

      const duration = next.dts - current.dts;
      audioSamples[i].duration = duration;
      /*
      if (duration > (2 * meta.refSampleDuration)) {
        // 两帧之间间隔太大，需要补空白帧
        /**
        let silentFrameCount = Math.floor(duration / meta.refSampleDuration)
        let frameIdx = 0

        while (frameIdx < silentFrameCount) {
          const silentSample = {
            data: silentFrame,
            datasize: silentFrame.byteLength,
            dts: current.dts + (frameIdx + 1) * meta.refSampleDuration,
            filtered: 0,
            isSilent: true
          }

          audioSamples.splice(i, 0, silentSample)

          this.filledAudioSamples.push({
            dts: silentSample.dts,
            size: silentSample.data.byteLength
          })

          frameIdx++
          i++ // 不对静音帧做比较
        }
      } */
    }

    this.audioTrack.samples = Compatibility.sortAudioSamples(audioSamples)
  }

  fixChangeStreamVideo (changeIdx) {
    const { samples, meta } = this.videoTrack;
    const prevDts = changeIdx === 0 ? this.getStreamChangeStart(samples[0]) : samples[changeIdx - 1].dts;
    const curDts = samples[changeIdx].dts;
    const isContinue = Math.abs(prevDts - curDts) <= 2 * meta.refSampleDuration;

    if (isContinue) {
      if (!samples[changeIdx].options) {
        samples[changeIdx].options = {
          isContinue: true
        }
      } else {
        samples[changeIdx].options.isContinue = true;
      }
      return this.doFixVideo(false)
    }

    const firstPartSamples = samples.slice(0, changeIdx);
    const secondPartSamples = samples.slice(changeIdx);
    const firstSample = samples[0]

    const changeSample = secondPartSamples[0]
    const firstPartDuration = changeSample.dts - firstSample.dts
    const streamChangeStart = firstSample.options && firstSample.options.start + firstPartDuration ? firstSample.options.start : null

    this.videoTrack.samples = samples.slice(0, changeIdx);

    this.doFixVideo(false);

    this.videoTrack.samples = samples.slice(changeIdx);

    this.doFixVideo(false, streamChangeStart);

    this.videoTrack.samples = firstPartSamples.concat(secondPartSamples)
  }

  fixChangeStreamAudio (changeIdx) {
    const { samples, meta } = this.audioTrack;

    const prevDts = changeIdx === 0 ? this.getStreamChangeStart(samples[0]) : samples[changeIdx - 1].dts;
    const curDts = samples[changeIdx].dts;
    const isContinue = Math.abs(prevDts - curDts) <= 2 * meta.refSampleDuration;

    if (isContinue) {
      if (!samples[changeIdx].options) {
        samples[changeIdx].options = {
          isContinue: true
        }
      } else {
        samples[changeIdx].options.isContinue = true;
      }
      return this.doFixAudio(false)
    }

    const firstPartSamples = samples.slice(0, changeIdx);
    const secondPartSamples = samples.slice(changeIdx);
    const firstSample = samples[0]

    const changeSample = secondPartSamples[0]
    const firstPartDuration = changeSample.dts - firstSample.dts
    const streamChangeStart = firstSample.options && firstSample.options.start + firstPartDuration ? firstSample.options.start : null

    this.audioTrack.samples = firstPartSamples;

    this.doFixAudio(false);

    this.audioTrack.samples = secondPartSamples;

    this.doFixAudio(false, streamChangeStart);

    this.audioTrack.samples = firstPartSamples.concat(secondPartSamples)
  }

  getFirstSample () {
    // 获取video和audio的首帧数据
    let {samples: videoSamples} = this.videoTrack
    let {samples: audioSamples} = this.audioTrack

    let isFirstVideoSamples = false;
    let isFirstAudioSamples = false;

    if (!this._firstVideoSample && videoSamples.length) {
      this._firstVideoSample = Compatibility.findFirstVideoSample(videoSamples)
      isFirstVideoSamples = true
    }

    if (!this._firstAudioSample && audioSamples.length) {
      this._firstAudioSample = Compatibility.findFirstAudioSample(audioSamples) // 寻找dts最小的帧作为首个音频帧
      isFirstAudioSamples = true
    }

    return {
      isFirstVideoSamples,
      isFirstAudioSamples
    }
  }

  /**
   * 在没有refSampleDuration的问题流中，
   */
  fixRefSampleDuration (meta, samples) {
    const isVideo = meta.type === 'video'
    const allSamplesCount = isVideo ? this.allVideoSamplesCount : this.allAudioSamplesCount
    const firstDts = isVideo ? this._firstVideoSample.dts : this._firstAudioSample.dts
    const filledSamplesCount = isVideo ? this.filledVideoSamples.length : this.filledAudioSamples.length

    if (!meta.refSampleDuration || meta.refSampleDuration <= 0 || Number.isNaN(meta.refSampleDuration)) {
      if (samples.length >= 1) {
        const lastDts = samples[samples.length - 1].dts

        meta.refSampleDuration = Math.floor((lastDts - firstDts) / ((allSamplesCount + filledSamplesCount) - 1)); // 将refSampleDuration重置为计算后的平均值
      }
    } else if (meta.refSampleDuration) {
      if (samples.length >= 5) {
        const lastDts = samples[samples.length - 1].dts
        const firstDts = samples[0].dts
        const durationAvg = (lastDts - firstDts) / (samples.length - 1)

        meta.refSampleDuration = Math.floor(Math.abs(meta.refSampleDuration - durationAvg) <= 5 ? meta.refSampleDuration : durationAvg); // 将refSampleDuration重置为计算后的平均值
      }
    }
  }

  /**
   * 记录截止目前一共播放了多少帧
   */
  recordSamplesCount () {
    const { audioTrack, videoTrack } = this

    this.allAudioSamplesCount += audioTrack.samples.length
    this.allVideoSamplesCount += videoTrack.samples.length
  }

  /**
   * 去除不合法的帧（倒退、重复帧）
   */
  removeInvalidSamples () {
    const { _firstVideoSample, _firstAudioSample } = this

    this.audioTrack.samples = this.audioTrack.samples.filter((sample) => {
      return sample.dts >= _firstAudioSample.dts && (this.lastAudioDts === undefined || sample.dts > this.lastAudioDts)
    })

    this.videoTrack.samples = this.videoTrack.samples.filter((sample) => {
      return sample.dts >= _firstVideoSample.dts && (this.lastVideoDts === undefined || sample.dts > this.lastVideoDts)
    })
  }

  getStreamChangeStart (sample) {
    if (sample.options && sample.options.start) {
      return sample.options.start - this.dtsBase;
    }
    return Infinity
  }

  static sortAudioSamples (samples) {
    if (samples.length === 1) {
      return samples
    }

    return samples.sort((a, b) => {
      return a.dts - b.dts
    })
  }

  /**
   * 寻找dts最小的sample
   * @param samples
   */
  static findFirstAudioSample (samples) {
    if (!samples || samples.length === 0) {
      return null
    }

    return Compatibility.sortAudioSamples(samples)[0]
  }

  static findFirstVideoSample (samples) {
    if (!samples.length) {
      return null
    }

    const sorted = samples.sort((a, b) => {
      return a.dts - b.dts;
    })

    for (let i = 0, len = sorted.length; i < len; i++) {
      if (sorted[i].isKeyframe) {
        return sorted[i]
      }
    }
  }

  static detectLargeGap (nextDts, firstSample) {
    if (nextDts === null) {
      return;
    }
    const curDts = firstSample.dts || 0
    const cond1 = nextDts - curDts >= 1000 || curDts - nextDts >= 1000 // fix hls流出现大量流dts间距问题
    const cond2 = firstSample.options && firstSample.options.discontinue

    return cond1 || cond2
  }

  static doFixLargeGap (samples, gap) {
    for (let i = 0, len = samples.length; i < len; i++) {
      const sample = samples[i];
      sample.dts += gap
      if (sample.pts) {
        sample.pts += gap
      }
    }
  }

  /**
   * 中途换流
   */
  static detactChangeStream (samples) {
    let changed = false;
    let changedIdx = -1;
    for (let i = 0, len = samples.length; i < len; i++) {
      if (samples[i].options && samples[i].options.meta) {
        changed = true
        changedIdx = i;
        break;
      }
    }

    return {
      changed,
      changedIdx
    }
  }

  get tracks () {
    return this._context.getInstance('TRACKS')
  }

  get audioTrack () {
    if (this.tracks) {
      return this.tracks.audioTrack
    }
    return null
  }

  get videoTrack () {
    if (this.tracks) {
      return this.tracks.videoTrack
    }
    return null
  }

  get dtsBase () {
    const remuxer = this._context.getInstance('MP4_REMUXER');
    if (remuxer) {
      return remuxer._dtsBase
    }
    return 0
  }
}
/* harmony default export */ __webpack_exports__["default"] = (Compatibility);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Golomb {
  constructor (uint8array) {
    this.TAG = 'Golomb'
    this._buffer = uint8array
    this._bufferIndex = 0
    this._totalBytes = uint8array.byteLength
    this._totalBits = uint8array.byteLength * 8
    this._currentWord = 0
    this._currentWordBitsLeft = 0
  }

  destroy () {
    this._buffer = null
  }

  _fillCurrentWord () {
    let bufferBytesLeft = this._totalBytes - this._bufferIndex
    if (bufferBytesLeft <= 0) {
      // TODO 异常处理
    }

    let bytesRead = Math.min(4, bufferBytesLeft)
    let word = new Uint8Array(4)
    word.set(this._buffer.subarray(this._bufferIndex, this._bufferIndex + bytesRead))
    this._currentWord = new DataView(word.buffer).getUint32(0)

    this._bufferIndex += bytesRead
    this._currentWordBitsLeft = bytesRead * 8
  }

  readBits (size) {
    let bits = Math.min(this._currentWordBitsLeft, size);// :uint
    let valu = this._currentWord >>> (32 - bits);
    if (size > 32) {
      throw new Error('Cannot read more than 32 bits at a time');
    }
    this._currentWordBitsLeft -= bits;
    if (this._currentWordBitsLeft > 0) {
      this._currentWord <<= bits;
    } else if (this._totalBytes - this._bufferIndex > 0) {
      this._fillCurrentWord();
    }

    bits = size - bits;
    if (bits > 0 && this._currentWordBitsLeft) {
      return valu << bits | this.readBits(bits);
    } else {
      return valu;
    }
  }

  readBool () {
    return this.readBits(1) === 1
  }

  readByte () {
    return this.readBits(8)
  }

  _skipLeadingZero () {
    let zeroCount
    for (zeroCount = 0; zeroCount < this._currentWordBitsLeft; zeroCount++) {
      if ((this._currentWord & (0x80000000 >>> zeroCount)) !== 0) {
        this._currentWord <<= zeroCount
        this._currentWordBitsLeft -= zeroCount
        return zeroCount
      }
    }
    this._fillCurrentWord()
    return zeroCount + this._skipLeadingZero()
  }

  readUEG () { // unsigned exponential golomb
    let leadingZeros = this._skipLeadingZero()
    return this.readBits(leadingZeros + 1) - 1
  }

  readSEG () { // signed exponential golomb
    let value = this.readUEG()
    if (value & 0x01) {
      return (value + 1) >>> 1
    } else {
      return -1 * (value >>> 1)
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Golomb);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sps */ "../xgplayer-codec/src/h264/nalunit/sps.js");

class Nalunit {
  static getNalunits (buffer) {
    if (buffer.length - buffer.position < 4) {
      return [];
    }

    let buf = buffer.dataview;
    let position = buffer.position;
    if (buf.getInt32(position) === 1 ||
    (buf.getInt16(position) === 0 && buf.getInt8(position + 2) === 1)) {
      return Nalunit.getAnnexbNals(buffer);
    } else {
      return Nalunit.getAvccNals(buffer);
    }
  }

  static getAnnexbNals (buffer) {
    let nals = [];
    let position = Nalunit.getHeaderPositionAnnexB(buffer);
    let start = position.pos;
    let end = start;
    while (start < buffer.length - 4) {
      let header = buffer.buffer.slice(start, start + position.headerLength);
      if (position.pos === buffer.position) {
        buffer.skip(position.headerLength);
      }
      position = Nalunit.getHeaderPositionAnnexB(buffer);
      end = position.pos;
      let body = new Uint8Array(buffer.buffer.slice(start + header.byteLength, end));
      let unit = {header, body};
      Nalunit.analyseNal(unit);
      nals.push(unit);
      buffer.skip(end - buffer.position);
      start = end;
    }
    return nals;
  }

  static getAvccNals (buffer) {
    let nals = [];
    while (buffer.position < buffer.length - 4) {
      let length = buffer.dataview.getInt32(buffer.position);
      if (buffer.length - buffer.position >= length) {
        let header = buffer.buffer.slice(buffer.position, buffer.position + 4);
        buffer.skip(4)
        let body = buffer.buffer.slice(buffer.position, buffer.position + length);
        buffer.skip(length);
        let unit = {header, body};
        Nalunit.analyseNal(unit);
        nals.push(unit);
      } else {
        break;
      }
    }
    return nals;
  }

  static analyseNal (unit) {
    let type = unit.body[0] & 0x1f;
    switch (type) {
      case 1:
        // NDR
        unit.ndr = true;
        break;
      case 5:
        // IDR
        unit.idr = true;
        break;
      case 6:
        // SEI
        break;
      case 7:
        // SPS
        unit.sps = _sps__WEBPACK_IMPORTED_MODULE_0__["default"].parseSPS(unit.body);
        break;
      case 8:
        // PPS
        unit.pps = true;
        break;
      case 9:
        // AUD
        break;
      default:
        break;
    }
  }

  static getHeaderPositionAnnexB (buffer) {
    // seperate
    let pos = buffer.position;
    let headerLength = 0;
    while (headerLength !== 3 && headerLength !== 4 && pos < buffer.length - 4) {
      if (buffer.dataview.getInt16(pos) === 0) {
        if (buffer.dataview.getInt16(pos + 2) === 1) {
          // 0x000001
          headerLength = 4;
        } else if (buffer.dataview.getInt8(pos + 2) === 1) {
          headerLength = 3;
        } else {
          pos++;
        }
      } else {
        pos++;
      }
    }

    if (pos === buffer.length - 4) {
      if (buffer.dataview.getInt16(pos) === 0) {
        if (buffer.dataview.getInt16(pos + 2) === 1) {
          // 0x000001
          headerLength = 4;
        }
      } else {
        pos++;
        if (buffer.dataview.getInt16(pos) === 0 && buffer.dataview.getInt8(pos) === 1) {
          // 0x0000001
          headerLength = 3;
        } else {
          pos = buffer.length;
        }
      }
    }
    return {pos, headerLength};
  }

  static getAvcc (sps, pps) {
    let ret = new Uint8Array(sps.byteLength + pps.byteLength + 11);
    ret[0] = 0x01;
    ret[1] = sps[1];
    ret[2] = sps[2];
    ret[3] = sps[3];
    ret[4] = 255;
    ret[5] = 225;

    let offset = 6;

    ret.set(new Uint8Array([(sps.byteLength >>> 8) & 0xff, sps.byteLength & 0xff]), offset);
    offset += 2;
    ret.set(sps, offset);
    offset += sps.byteLength;

    ret[offset] = 1;
    offset++;

    ret.set(new Uint8Array([(pps.byteLength >>> 8) & 0xff, pps.byteLength & 0xff]), offset);
    offset += 2;
    ret.set(pps, offset);
    return ret;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Nalunit);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _golomb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./golomb */ "../xgplayer-codec/src/h264/nalunit/golomb.js");
/* eslint-disable camelcase  */
/* eslint-disable one-var  */


class SPSParser {
  static _ebsp2rbsp (uint8array) {
    let src = uint8array
    let srcLength = src.byteLength
    let dst = new Uint8Array(srcLength)
    let dstIdx = 0

    for (let i = 0; i < srcLength; i++) {
      if (i >= 2) {
        if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {
          continue
        }
      }
      dst[dstIdx] = src[i]
      dstIdx++
    }

    return new Uint8Array(dst.buffer, 0, dstIdx)
  }

  static parseSPS (uint8array) {
    let rbsp = SPSParser._ebsp2rbsp(uint8array)
    let gb = new _golomb__WEBPACK_IMPORTED_MODULE_0__["default"](rbsp)

    gb.readByte()
    let profileIdc = gb.readByte()
    gb.readByte()
    let levelIdc = gb.readByte()
    gb.readUEG()

    let profile_string = SPSParser.getProfileString(profileIdc)
    let level_string = SPSParser.getLevelString(levelIdc)
    let chroma_format_idc = 1
    let chroma_format = 420
    let chroma_format_table = [0, 420, 422, 444]
    let bit_depth = 8

    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 ||
      profileIdc === 244 || profileIdc === 44 || profileIdc === 83 ||
      profileIdc === 86 || profileIdc === 118 || profileIdc === 128 ||
      profileIdc === 138 || profileIdc === 144) {
      chroma_format_idc = gb.readUEG()
      if (chroma_format_idc === 3) {
        gb.readBits(1)
      }
      if (chroma_format_idc <= 3) {
        chroma_format = chroma_format_table[chroma_format_idc]
      }

      bit_depth = gb.readUEG() + 8
      gb.readUEG()
      gb.readBits(1)
      if (gb.readBool()) {
        let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12
        for (let i = 0; i < scaling_list_count; i++) {
          if (gb.readBool()) {
            if (i < 6) {
              SPSParser._skipScalingList(gb, 16)
            } else {
              SPSParser._skipScalingList(gb, 64)
            }
          }
        }
      }
    }
    gb.readUEG()
    let pic_order_cnt_type = gb.readUEG()
    if (pic_order_cnt_type === 0) {
      gb.readUEG()
    } else if (pic_order_cnt_type === 1) {
      gb.readBits(1)
      gb.readSEG()
      gb.readSEG()
      let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG()
      for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {
        gb.readSEG()
      }
    }
    gb.readUEG()
    gb.readBits(1)

    let pic_width_in_mbs_minus1 = gb.readUEG()
    let pic_height_in_map_units_minus1 = gb.readUEG()

    let frame_mbs_only_flag = gb.readBits(1)
    if (frame_mbs_only_flag === 0) {
      gb.readBits(1)
    }
    gb.readBits(1)

    let frame_crop_left_offset = 0
    let frame_crop_right_offset = 0
    let frame_crop_top_offset = 0
    let frame_crop_bottom_offset = 0

    let frame_cropping_flag = gb.readBool()
    if (frame_cropping_flag) {
      frame_crop_left_offset = gb.readUEG()
      frame_crop_right_offset = gb.readUEG()
      frame_crop_top_offset = gb.readUEG()
      frame_crop_bottom_offset = gb.readUEG()
    }

    let par_width = 1, par_height = 1
    let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0

    let vui_parameters_present_flag = gb.readBool()
    if (vui_parameters_present_flag) {
      if (gb.readBool()) { // aspect_ratio_info_present_flag
        let aspect_ratio_idc = gb.readByte()
        let par_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2]
        let par_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1]

        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
          par_width = par_w_table[aspect_ratio_idc - 1]
          par_height = par_h_table[aspect_ratio_idc - 1]
        } else if (aspect_ratio_idc === 255) {
          par_width = gb.readByte() << 8 | gb.readByte()
          par_height = gb.readByte() << 8 | gb.readByte()
        }
      }

      if (gb.readBool()) {
        gb.readBool()
      }
      if (gb.readBool()) {
        gb.readBits(4)
        if (gb.readBool()) {
          gb.readBits(24)
        }
      }
      if (gb.readBool()) {
        gb.readUEG()
        gb.readUEG()
      }
      if (gb.readBool()) {
        let num_units_in_tick = gb.readBits(32)
        let time_scale = gb.readBits(32)
        fps_fixed = gb.readBool()

        fps_num = time_scale
        fps_den = num_units_in_tick * 2
        fps = fps_num / fps_den
      }
    }

    let parScale = 1
    if (par_width !== 1 || par_height !== 1) {
      parScale = par_width / par_height
    }

    let crop_unit_x = 0, crop_unit_y = 0
    if (chroma_format_idc === 0) {
      crop_unit_x = 1
      crop_unit_y = 2 - frame_mbs_only_flag
    } else {
      let sub_wc = (chroma_format_idc === 3) ? 1 : 2
      let sub_hc = (chroma_format_idc === 1) ? 2 : 1
      crop_unit_x = sub_wc
      crop_unit_y = sub_hc * (2 - frame_mbs_only_flag)
    }

    let codec_width = (pic_width_in_mbs_minus1 + 1) * 16
    let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16)

    codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x
    codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y

    let present_width = Math.ceil(codec_width * parScale)

    gb.destroy()
    gb = null

    return {
      profile_string: profile_string,
      level_string: level_string,
      bit_depth: bit_depth,
      chroma_format: chroma_format,
      chroma_format_string: SPSParser.getChromaFormatString(chroma_format),

      frame_rate: {
        fixed: fps_fixed,
        fps: fps,
        fps_den: fps_den,
        fps_num: fps_num
      },

      par_ratio: {
        width: par_width,
        height: par_height
      },

      codec_size: {
        width: codec_width,
        height: codec_height
      },

      present_size: {
        width: present_width,
        height: codec_height
      }
    }
  }

  static _skipScalingList (gb, count) {
    let last_scale = 8, next_scale = 8
    let delta_scale = 0
    for (let i = 0; i < count; i++) {
      if (next_scale !== 0) {
        delta_scale = gb.readSEG()
        next_scale = (last_scale + delta_scale + 256) % 256
      }
      last_scale = (next_scale === 0) ? last_scale : next_scale
    }
  }

  static getProfileString (profileIdc) {
    switch (profileIdc) {
      case 66:
        return 'Baseline'
      case 77:
        return 'Main'
      case 88:
        return 'Extended'
      case 100:
        return 'High'
      case 110:
        return 'High10'
      case 122:
        return 'High422'
      case 244:
        return 'High444'
      default:
        return 'Unknown'
    }
  }

  static getLevelString (levelIdc) {
    return (levelIdc / 10).toFixed(1)
  }

  static getChromaFormatString (chroma) {
    switch (chroma) {
      case 420:
        return '4:2:0'
      case 422:
        return '4:2:2'
      case 444:
        return '4:4:4'
      default:
        return 'Unknown'
    }
  }

  static toVideoMeta (spsConfig) {
    let meta = {}
    if (spsConfig && spsConfig.codec_size) {
      meta.codecWidth = spsConfig.codec_size.width
      meta.codecHeight = spsConfig.codec_size.height
      meta.presentWidth = spsConfig.present_size.width
      meta.presentHeight = spsConfig.present_size.height
    }

    meta.profile = spsConfig.profile_string
    meta.level = spsConfig.level_string
    meta.bitDepth = spsConfig.bit_depth
    meta.chromaFormat = spsConfig.chroma_format

    meta.parRatio = {
      width: spsConfig.par_ratio.width,
      height: spsConfig.par_ratio.height
    }

    meta.frameRate = spsConfig.frame_rate

    let fpsDen = meta.frameRate.fps_den
    let fpsNum = meta.frameRate.fps_num
    meta.refSampleDuration = Math.floor(meta.timescale * (fpsDen / fpsNum))
    return meta;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (SPSParser);


/***/ }),

/***/ "../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  // HLS
  M3U8Parser: __webpack_require__(/*! ./src/hls/demuxer/m3u8parser */ "../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,
  TsDemuxer: __webpack_require__(/*! ./src/hls/demuxer/ts */ "../xgplayer-demux/src/hls/demuxer/ts.js").default,
  Playlist: __webpack_require__(/*! ./src/hls/playlist */ "../xgplayer-demux/src/hls/playlist.js").default,
  FlvDemuxer: __webpack_require__(/*! ./src/flv/index */ "../xgplayer-demux/src/flv/index.js").default
};


/***/ }),

/***/ "../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AMFParser; });
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


const DATA_TYPES = {
  NUMBER: 0,
  BOOLEAN: 1,
  STRING: 2,
  OBJECT: 3,
  MIX_ARRAY: 8,
  OBJECT_END: 9,
  STRICT_ARRAY: 10,
  DATE: 11,
  LONE_STRING: 12
}

/**
 * meta信息解析
 */
class AMFParser {
  constructor () {
    this.offset = 0
    this.readOffset = this.offset
  }

  resolve (meta, size) {
    if (size < 3) {
      throw new Error('not enough data for metainfo')
    }
    const metaData = {}
    const name = this.parseValue(meta)
    const value = this.parseValue(meta, size - name.bodySize)
    metaData[name.data] = value.data

    this.resetStatus()
    return metaData
  }

  resetStatus () {
    this.offset = 0
    this.readOffset = this.offset
  }

  parseString (buffer) {
    const dv = new DataView(buffer, this.readOffset)
    const strLen = dv.getUint16(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    let str = ''
    if (strLen > 0) {
      str = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["UTF8"].decode(new Uint8Array(buffer, this.readOffset + 2, strLen))
    } else {
      str = ''
    }
    let size = strLen + 2
    this.readOffset += size
    return {
      data: str,
      bodySize: strLen + 2
    }
  }

  parseDate (buffer, size) {
    const dv = new DataView(buffer, this.readOffset, size)
    let ts = dv.getFloat64(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    const timeOffset = dv.getInt16(8, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    ts += timeOffset * 60 * 1000

    this.readOffset += 10
    return {
      data: new Date(ts),
      bodySize: 10
    }
  }

  parseObject (buffer, size) {
    const name = this.parseString(buffer, size)
    const value = this.parseValue(buffer, size - name.bodySize)
    return {
      data: {
        name: name.data,
        value: value.data
      },
      bodySize: name.bodySize + value.bodySize,
      isObjEnd: value.isObjEnd
    }
  }

  parseLongString (buffer) {
    const dv = new DataView(buffer, this.readOffset)
    const strLen = dv.getUint32(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    let str = ''
    if (strLen > 0) {
      str = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["UTF8"].decode(new Uint8Array(buffer, this.readOffset + 2, strLen))
    } else {
      str = ''
    }
    // const size = strLen + 4;
    this.readOffset += strLen + 4
    return {
      data: str,
      bodySize: strLen + 4
    }
  }

  /**
   * 解析meta中的变量
   */
  parseValue (data, size) {
    let buffer = new ArrayBuffer()
    if (data instanceof ArrayBuffer) {
      buffer = data
    } else {
      buffer = data.buffer
    }
    const {
      NUMBER,
      BOOLEAN,
      STRING,
      OBJECT,
      MIX_ARRAY,
      OBJECT_END,
      STRICT_ARRAY,
      DATE,
      LONE_STRING
    } = DATA_TYPES
    const dataView = new DataView(buffer, this.readOffset, size)
    let isObjEnd = false
    const type = dataView.getUint8(0)
    let offset = 1
    this.readOffset += 1
    let value = null

    switch (type) {
      case NUMBER: {
        value = dataView.getFloat64(1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
        this.readOffset += 8
        offset += 8
        break
      }
      case BOOLEAN: {
        const boolNum = dataView.getUint8(1)
        value = !!boolNum
        this.readOffset += 1
        offset += 1
        break
      }
      case STRING: {
        const str = this.parseString(buffer)
        value = str.data
        offset += str.bodySize
        break
      }
      case OBJECT: {
        value = {}
        let objEndSize = 0
        if (dataView.getUint32(size - 4, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF) {
          objEndSize = 3
        }
        // this.readOffset += offset - 1;
        while (offset < size - 4) {
          const amfObj = this.parseObject(buffer, size - offset - objEndSize)
          if (amfObj.isObjectEnd) { break }
          value[amfObj.data.name] = amfObj.data.value
          offset += amfObj.bodySize
        }
        if (offset <= size - 3) {
          const mark = dataView.getUint32(offset - 1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF
          if (mark === 9) {
            this.readOffset += 3
            offset += 3
          }
        }
        break
      }
      case MIX_ARRAY: {
        value = {}
        offset += 4
        this.readOffset += 4
        let objEndSize = 0
        if ((dataView.getUint32(size - 4, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF) === 9) {
          objEndSize = 3
        }

        while (offset < size - 8) {
          const amfVar = this.parseObject(buffer, size - offset - objEndSize)
          if (amfVar.isObjectEnd) { break }
          value[amfVar.data.name] = amfVar.data.value
          offset += amfVar.bodySize
        }
        if (offset <= size - 3) {
          const marker = dataView.getUint32(offset - 1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF
          if (marker === 9) {
            offset += 3
            this.readOffset += 3
          }
        }
        break
      }

      case OBJECT_END: {
        value = null
        isObjEnd = true
        break
      }

      case STRICT_ARRAY: {
        value = []
        const arrLength = dataView.getUint32(1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
        offset += 4
        this.readOffset += 4
        for (let i = 0; i < arrLength; i++) {
          const script = this.parseValue(buffer, size - offset)
          value.push(script.data)
          offset += script.bodySize
        }
        break
      }

      case DATE: {
        const date = this.parseDate(buffer, size - 1)
        value = date.data
        offset += date.bodySize
        break
      }

      case LONE_STRING: {
        const longStr = this.parseLongString(buffer, size - 1)
        value = longStr.data
        offset += longStr.bodySize
        break
      }

      default: {
        offset = size
      }
    }

    return {
      data: value,
      bodySize: offset,
      isObjEnd: isObjEnd
    }
  }
}


/***/ }),

/***/ "../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _amf_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./amf-parser */ "../xgplayer-demux/src/flv/amf-parser.js");





const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].DEMUX_EVENTS;

class FlvDemuxer {
  constructor () {
    this._firstFragmentLoaded = false
    this._trackNum = 0
    this._hasScript = false
  }

  init () {
    this.on(DEMUX_EVENTS.DEMUX_START, this.doParseFlv.bind(this))
  }

  /**
   * if the flv head is valid
   * @param data
   * @returns {boolean}
   */
  static isFlvFile (data) {
    return !(data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01)
  }

  /**
   * If the stream has audio or video.
   * @param {number} streamFlag - Data from the stream which is define whether the audio / video track is exist.
   */
  static getPlayType (streamFlag) {
    const result = {
      hasVideo: false,
      hasAudio: false
    }

    if (streamFlag & 0x01 > 0) {
      result.hasVideo = true
    }

    if (streamFlag & 0x04 > 0) {
      result.hasAudio = true
    }

    return result
  }

  doParseFlv () {
    if (!this._firstFragmentLoaded) {
      if (this.loaderBuffer.length < 13) {
        return
      }
      const header = this.loaderBuffer.shift(13)
      this.parseFlvHeader(header)
      this.doParseFlv() // 递归调用，继续解析flv流
    } else {
      if (this.loaderBuffer.length < 11) {
        return
      }
      let chunk;

      let loopMax = 100000 // 防止死循环产生
      do {
        chunk = this._parseFlvTag()
      } while (chunk && loopMax-- > 0)

      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
    }
  }

  parseFlvHeader (header) {
    if (!FlvDemuxer.isFlvFile(header)) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('invalid flv file'))
      this.doParseFlv()
    } else {
      this._firstFragmentLoaded = true
      const playType = FlvDemuxer.getPlayType(header[4])

      if (playType.hasVideo) {
        this.initVideoTrack()
      }

      if (playType.hasAudio) {
        this.initAudioTrack()
      }
    }
    this.doParseFlv()
  }

  /**
   * init default video track configs
   */
  initVideoTrack () {
    this._trackNum++
    let videoTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__["VideoTrack"]()
    videoTrack.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["VideoTrackMeta"]()
    videoTrack.id = videoTrack.meta.id = this._trackNum

    this.tracks.videoTrack = videoTrack
  }

  /**
   * init default audio track configs
   */
  initAudioTrack () {
    this._trackNum++
    let audioTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__["AudioTrack"]()
    audioTrack.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["AudioTrackMeta"]()
    audioTrack.id = audioTrack.meta.id = this._trackNum

    this.tracks.audioTrack = audioTrack
  }

  /**
   * Package the data as the following data structure
   * {
   *    data: Uint8Array. the Stream data.
   *    info: The first byte info of the Tag.
   *    tagType: 8、9、18
   *    timeStamp: the timestemp
   * }
   */
  _parseFlvTag () {
    if (this.loaderBuffer.length < 11) {
      return null
    }
    let chunk = this._parseFlvTagHeader()
    if (chunk) {
      this._processChunk(chunk)
    }
    return chunk
  }

  /**
   * Parse the 11 byte tag Header
   */
  _parseFlvTagHeader () {
    let offset = 0
    let chunk = {}

    let tagType = this.loaderBuffer.toInt(offset, 1)
    offset += 1

    // 2 bit FMS reserved, 1 bit filtered, 5 bit tag type
    chunk.filtered = (tagType & 32) >>> 5
    chunk.tagType = tagType & 31

    // 3 Byte datasize
    chunk.datasize = this.loaderBuffer.toInt(offset, 3)
    offset += 3

    if ((chunk.tagType !== 8 && chunk.tagType !== 9 && chunk.tagType !== 11 && chunk.tagType !== 18) ||
      this.loaderBuffer.toInt(8, 3) !== 0) {
      if (this.loaderBuffer && this.loaderBuffer.length > 0) {
        this.loaderBuffer.shift(1)
      }
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error('tagType ' + chunk.tagType), false)
      return null
    }

    if (this.loaderBuffer.length < chunk.datasize + 15) {
      return null
    }

    // read the data.
    this.loaderBuffer.shift(4)

    // 3 Byte timestamp
    let timestamp = this.loaderBuffer.toInt(0, 3)
    this.loaderBuffer.shift(3)

    // 1 Byte timestampExt
    let timestampExt = this.loaderBuffer.shift(1)[0]
    if (timestampExt > 0) {
      timestamp += timestampExt * 0x1000000
    }

    chunk.dts = timestamp

    // streamId
    this.loaderBuffer.shift(3)
    return chunk
  }

  _processChunk (chunk) {
    switch (chunk.tagType) {
      case 18:
        this._parseScriptData(chunk)
        break
      case 8:
        this._parseAACData(chunk)
        break
      case 9:
        this._parseHevcData(chunk)
        break
      case 11:
        // for some CDN that did not process the currect RTMP messages
        this.loaderBuffer.shift(3)
        break
      default:
        this.loaderBuffer.shift(1)
    }
  }

  /**
   * parse flv script data
   * @param chunk
   * @private
   */
  _parseScriptData (chunk) {
    let audioTrack = this.tracks.audioTrack
    let videoTrack = this.tracks.videoTrack

    let data = this.loaderBuffer.shift(chunk.datasize)

    const info = new _amf_parser__WEBPACK_IMPORTED_MODULE_3__["default"]().resolve(data, data.length)

    const onMetaData = this._context.onMetaData = info ? info.onMetaData : undefined

    // fill mediaInfo
    this._context.mediaInfo.duration = onMetaData.duration
    this._context.mediaInfo.hasVideo = onMetaData.hasVideo
    this._context.mediaInfo.hsaAudio = onMetaData.hasAudio

    let validate = this._datasizeValidator(chunk.datasize)
    if (validate) {
      this.emit(DEMUX_EVENTS.MEDIA_INFO)
      this._hasScript = true
    }

    // Edit default meta.
    if (audioTrack && !audioTrack.hasSpecificConfig) {
      let meta = audioTrack.meta
      if (onMetaData.audiosamplerate) {
        meta.sampleRate = onMetaData.audiosamplerate
      }

      if (onMetaData.audiochannels) {
        meta.channelCount = onMetaData.audiochannels
      }

      switch (onMetaData.audiosamplerate) {
        case 44100:
          meta.sampleRateIndex = 4
          break
        case 22050:
          meta.sampleRateIndex = 7
          break
        case 11025:
          meta.sampleRateIndex = 10
          break
      }
    }
    if (videoTrack && !videoTrack.hasSpecificConfig) {
      let meta = videoTrack.meta
      if (typeof onMetaData.framerate === 'number') {
        let fpsNum = Math.floor(onMetaData.framerate * 1000)
        if (fpsNum > 0) {
          let fps = fpsNum / 1000
          if (!meta.frameRate) {
            meta.frameRate = {}
          }
          meta.frameRate.fixed = true
          meta.frameRate.fps = fps
          meta.frameRate.fps_num = fpsNum
          meta.frameRate.fps_den = 1000
        }
      }
    }
  }

  _aacSequenceHeaderParser (data) {
    let ret = {}
    ret.hasSpecificConfig = true
    ret.objectType = data[1] >>> 3
    ret.originObjectType = ret.objectType
    ret.sampleRateIndex = ((data[1] & 7) << 1) | (data[2] >>> 7)
    ret.audiosamplerate = this._switchAudioSampleRate(ret.sampleRateIndex)
    ret.channelCount = (data[2] & 120) >>> 3
    ret.frameLength = (data[2] & 4) >>> 2
    ret.dependsOnCoreCoder = (data[2] & 2) >>> 1
    ret.extensionFlagIndex = data[2] & 1

    ret.codec = `mp4a.40.${ret.objectType}`
    let userAgent = window.navigator.userAgent.toLowerCase();
    let extensionSamplingIndex;

    let config;
    let samplingIndex = ret.sampleRateIndex;

    if (userAgent.indexOf('firefox') !== -1) {
      // firefox: use SBR (HE-AAC) if freq less than 24kHz
      if (ret.sampleRateIndex >= 6) {
        ret.objectType = 5;
        config = new Array(4);
        extensionSamplingIndex = samplingIndex - 3;
      } else { // use LC-AAC
        ret.objectType = 2;
        config = new Array(2);
        extensionSamplingIndex = samplingIndex;
      }
    } else if (userAgent.indexOf('android') !== -1 || xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["sniffer"].browser === 'safari') {
      // android: always use LC-AAC
      ret.objectType = 2;
      config = new Array(2);
      extensionSamplingIndex = samplingIndex;
    } else {
      // for other browsers, e.g. chrome...
      // Always use HE-AAC to make it easier to switch aac codec profile
      ret.objectType = 5;
      extensionSamplingIndex = ret.sampleRateIndex;
      config = new Array(4);

      if (ret.sampleRateIndex >= 6) {
        extensionSamplingIndex = ret.sampleRateIndex - 3;
      } else if (ret.channelCount === 1) { // Mono channel
        ret.objectType = 2;
        config = new Array(2);
        extensionSamplingIndex = ret.sampleRateIndex;
      }
    }

    config[0] = ret.objectType << 3;
    config[0] |= (ret.sampleRateIndex & 0x0F) >>> 1;
    config[1] = (ret.sampleRateIndex & 0x0F) << 7;
    config[1] |= (ret.channelCount & 0x0F) << 3;
    if (ret.objectType === 5) {
      config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);
      config[2] = (extensionSamplingIndex & 0x01) << 7;
      // extended audio object type: force to 2 (LC-AAC)
      config[2] |= (2 << 2);
      config[3] = 0;
    }
    ret.config = config
    return ret
  }

  _parseAACData (chunk) {
    let track = this.tracks.audioTrack
    if (!track) {
      return
    }

    let meta = track.meta

    if (!meta) {
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["AudioTrackMeta"]()
      meta = track.meta;
    }

    let info = this.loaderBuffer.shift(1)[0]

    chunk.data = this.loaderBuffer.shift(chunk.datasize - 1)

    let format = (info & 240) >>> 4

    track.format = format

    if (format !== 10) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error(`invalid audio format: ${format}`))
    }

    if (format === 10 && !this._hasAudioSequence) {
      meta.sampleRate = this._switchAudioSamplingFrequency(info)
      meta.sampleRateIndex = (info & 12) >>> 2
      meta.frameLenth = (info & 2) >>> 1
      meta.channelCount = info & 1
      meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale)
    }

    let audioSampleRate = meta.audioSampleRate
    let audioSampleRateIndex = meta.sampleRateIndex
    let refSampleDuration = meta.refSampleDuration

    delete chunk.tagType
    let validate = this._datasizeValidator(chunk.datasize)

    if (chunk.data[0] === 0) { // AAC Sequence Header
      let aacHeader = this._aacSequenceHeaderParser(chunk.data)
      audioSampleRate = aacHeader.audiosamplerate || meta.audioSampleRate
      audioSampleRateIndex = aacHeader.sampleRateIndex || meta.sampleRateIndex
      refSampleDuration = Math.floor(1024 / audioSampleRate * meta.timescale)

      meta.channelCount = aacHeader.channelCount
      meta.sampleRate = audioSampleRate
      meta.sampleRateIndex = audioSampleRateIndex
      meta.refSampleDuration = refSampleDuration
      meta.duration = this._context.mediaInfo.duration * meta.timescale
      meta.config = aacHeader.config
      meta.objectType = aacHeader.objectType;
      meta.originObjectType = aacHeader.originObjectType;

      const audioMedia = this._context.mediaInfo.audio

      // fill audio media info
      audioMedia.codec = aacHeader.codec
      audioMedia.channelCount = aacHeader.channelCount
      audioMedia.sampleRate = audioSampleRate
      audioMedia.sampleRateIndex = aacHeader.audioSampleRateIndex

      if (this._hasScript && !this._hasAudioSequence) {
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio')
      } else if (this._hasScript && this._hasAudioSequence) {
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio')
        this.emit(DEMUX_EVENTS.AUDIO_METADATA_CHANGE)
        // this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio')
      }
      this._hasAudioSequence = true

      this._metaChange = true
    } else {
      if (this._metaChange) {
        chunk.options = {
          meta: track.meta
        };
        this._metaChange = false
      }

      chunk.data = chunk.data.slice(1, chunk.data.length)
      track.samples.push(chunk)
    }
    if (!validate) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error('TAG length error at ' + chunk.datasize), false)
      // this.logger.warn(this.TAG, error.message)
    }
  }

  /**
   * parse hevc/avc video data
   * @param chunk
   * @private
   */
  _parseHevcData (chunk) {
    // header
    let info = this.loaderBuffer.shift(1)[0]
    chunk.frameType = (info & 0xf0) >>> 4
    chunk.isKeyframe = chunk.frameType === 1
    // let tempCodecID = this.tracks.videoTrack.codecID
    let codecID = info & 0x0f
    this.tracks.videoTrack.codecID = codecID

    // hevc和avc的header解析方式一样
    chunk.avcPacketType = this.loaderBuffer.shift(1)[0]
    chunk.cts = this.loaderBuffer.toInt(0, 3)
    this.loaderBuffer.shift(3)

    // 12 for hevc, 7 for avc
    if (codecID === 12) {
      const data = this.loaderBuffer.shift(chunk.datasize - 5)
      chunk.data = data

      if (Number.parseInt(chunk.avcPacketType) !== 0) {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error(`invalid video tag datasize: ${chunk.datasize}`), false)
        }
        let nalu = {}
        let r = 0
        nalu.cts = chunk.cts
        nalu.dts = chunk.dts
        while (chunk.data.length > r) {
          let sizes = chunk.data.slice(Number.parseInt(r), 4 + r)
          nalu.size = sizes[3]
          nalu.size += sizes[2] * 256
          nalu.size += sizes[1] * 256 * 256
          nalu.size += sizes[0] * 256 * 256 * 256
          r += 4
          nalu.data = chunk.data.slice(Number.parseInt(r), nalu.size + r)
          r += nalu.size
          this.tracks.videoTrack.samples.push(nalu)
          this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
        }
      } else if (Number.parseInt(chunk.avcPacketType) === 0) {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error(`invalid video tag datasize: ${chunk.datasize}`), false)
        } else {
          this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
        }
      }
    } else if (codecID === 7) {
      let data = this.loaderBuffer.shift(chunk.datasize - 5)
      if (data[4] === 0 && data[5] === 0 && data[6] === 0 && data[7] === 1) {
        let avcclength = 0
        for (let i = 0; i < 4; i++) {
          avcclength = avcclength * 256 + data[i]
        }
        avcclength -= 4
        data = data.slice(4, data.length)
        data[3] = avcclength % 256
        avcclength = (avcclength - data[3]) / 256
        data[2] = avcclength % 256
        avcclength = (avcclength - data[2]) / 256
        data[1] = avcclength % 256
        data[0] = (avcclength - data[1]) / 256
      }

      chunk.data = data
      // If it is AVC sequece Header.
      if (chunk.avcPacketType === 0) {
        this._avcSequenceHeaderParser(chunk.data)
        let validate = this._datasizeValidator(chunk.datasize)
        if (validate) {
          if (this._hasScript && !this._hasVideoSequence) {
            this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
          } else if (this._hasScript && this._hasVideoSequence) {
            this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio')
            this.emit(DEMUX_EVENTS.VIDEO_METADATA_CHANGE)
            // this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
          }
          this._hasVideoSequence = true
        }
        this._metaChange = true
      } else {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error(`invalid video tag datasize: ${chunk.datasize}`), false)
          return;
        }
        if (this._metaChange) {
          chunk.options = {
            meta: Object.assign({}, this.tracks.videoTrack.meta)
          }
          this._metaChange = false
        }
        this.tracks.videoTrack.samples.push(chunk)
        // this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
      }
    } else {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error(`video codeid is ${codecID}`), false)
      chunk.data = this.loaderBuffer.shift(chunk.datasize - 1)
      if (!this._datasizeValidator(chunk.datasize)) {
        this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error(`invalid video tag datasize: ${chunk.datasize}`), false)
      }
      this.tracks.videoTrack.samples.push(chunk)
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
    }
    delete chunk.tagType
  }

  /**
   * parse avc metadata
   * @param data
   * @private
   */
  _avcSequenceHeaderParser (data) {
    let track = this.tracks.videoTrack

    if (!track) {
      return
    }

    let offset = 0

    if (!track.meta) {
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["VideoTrackMeta"]()
    }
    let meta = track.meta

    meta.configurationVersion = data[0]
    meta.avcProfileIndication = data[1]
    meta.profileCompatibility = data[2]
    meta.avcLevelIndication = data[3] / 10
    meta.nalUnitLength = (data[4] & 0x03) + 1

    let numOfSps = data[5] & 0x1f
    offset = 6
    let config = {}

    // parse SPS
    for (let i = 0; i < numOfSps; i++) {
      let size = data[offset] * 255 + data[offset + 1]
      offset += 2

      let sps = new Uint8Array(size)
      for (let j = 0; j < size; j++) {
        sps[j] = data[offset + j]
      }

      // codec string
      let codecString = 'avc1.'
      for (let j = 1; j < 4; j++) {
        let h = sps[j].toString(16)
        if (h.length < 2) {
          h = '0' + h
        }
        codecString += h
      }

      meta.codec = codecString

      offset += size
      this.tracks.videoTrack.meta.sps = sps
      config = xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__["SpsParser"].parseSPS(sps)
    }

    let numOfPps = data[offset]

    offset++

    for (let i = 0; i < numOfPps; i++) {
      let size = data[offset] * 255 + data[offset + 1]
      offset += 2
      let pps = new Uint8Array(size)
      for (let j = 0; j < size; j++) {
        pps[j] = data[offset + j]
      }
      offset += size
      this.tracks.videoTrack.meta.pps = pps
    }

    Object.assign(meta, xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__["SpsParser"].toVideoMeta(config))

    // fill video media info
    const videoMedia = this._context.mediaInfo.video

    videoMedia.codec = meta.codec
    videoMedia.profile = meta.profile
    videoMedia.level = meta.level
    videoMedia.chromaFormat = meta.chromaFormat
    videoMedia.frameRate = meta.frameRate
    videoMedia.parRatio = meta.parRatio
    videoMedia.width = videoMedia.width === meta.presentWidth ? videoMedia.width : meta.presentWidth
    videoMedia.height = videoMedia.height === meta.presentHeight ? videoMedia.width : meta.presentHeight

    meta.duration = this._context.mediaInfo.duration * meta.timescale
    meta.avcc = new Uint8Array(data.length)
    meta.avcc.set(data)
    track.meta = meta
  }

  /**
   * choose audio sample rate
   * @param samplingFrequencyIndex
   * @returns {number}
   * @private
   */
  _switchAudioSampleRate (samplingFrequencyIndex) {
    let samplingFrequencyList = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]
    return samplingFrequencyList[samplingFrequencyIndex]
  }

  /**
   * choose audio sampling frequence
   * @param info
   * @returns {number}
   * @private
   */
  _switchAudioSamplingFrequency (info) {
    let samplingFrequencyIndex = (info & 12) >>> 2
    let samplingFrequencyList = [5500, 11025, 22050, 44100, 48000]
    return samplingFrequencyList[samplingFrequencyIndex]
  }

  /**
   * choose audio channel count
   * @param info
   * @returns {number}
   * @private
   */
  _switchAudioChannel (info) {
    let sampleTrackNumIndex = info & 1
    let sampleTrackNumList = [1, 2]
    return sampleTrackNumList[sampleTrackNumIndex]
  }

  /**
   * check datasize is valid use 4 Byte after current tag
   * @param datasize
   * @returns {boolean}
   * @private
   */
  _datasizeValidator (datasize) {
    let datasizeConfirm = this.loaderBuffer.toInt(0, 4)
    this.loaderBuffer.shift(4)
    return datasizeConfirm === datasize + 11
  }

  get loaderBuffer () {
    const buffer = this._context.getInstance('LOADER_BUFFER')
    if (buffer) {
      return buffer
    } else {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('找不到 loaderBuffer 实例'))
    }
  }

  get tracks () {
    return this._context.getInstance('TRACKS')
  }

  get logger () {
    return this._context.getInstance('LOGGER')
  }
}

/* harmony default export */ __webpack_exports__["default"] = (FlvDemuxer);


/***/ }),

/***/ "../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Reference: https://tools.ietf.org/html/rfc8216#section-4.3
 */
class M3U8Parser {
  static parse (text, baseurl = '') {
    let ret = {
      duration: 0
    };
    if (!text || !text.split) {
      return;
    }
    let refs = text.split(/\r|\n/);
    refs = refs.filter((ref) => {
      return ref;
    })
    let ref = refs.shift()
    if (!ref.match('#EXTM3U')) {
      throw new Error(`Invalid m3u8 file: not "#EXTM3U"`);
      return null;
    }
    ref = refs.shift()
    while (ref) {
      let refm = ref.match(/#(.[A-Z|-]*):(.*)/);
      let refd = ref.match(/#(.[A-Z|-]*)/);
      if (refd && refm && refm.length > 2) {
        switch (refm[1]) {
          case 'EXT-X-VERSION':
            ret.version = parseInt(refm[2]);
            break;
          case 'EXT-X-MEDIA-SEQUENCE':
            ret.sequence = parseInt(refm[2]);
            break;
          case 'EXT-X-TARGETDURATION':
            ret.targetduration = parseFloat(refm[2]);
            break;
          case 'EXTINF':
            M3U8Parser.parseFrag(refm, refs, ret, baseurl);
            break;
          case 'EXT-X-KEY':
            M3U8Parser.parseDecrypt(refm[2],ret);
            break;
          default:
            break;
        }
      } if(refd && refd.length > 1) {
        switch(refd[1]) {
          case 'EXT-X-DISCONTINUITY':
            ref = refs.shift();
            let refm = ref.match(/#(.[A-Z|-]*):(.*)/);
            if(refm.length >2 && refm[1] === 'EXTINF') {
              M3U8Parser.parseFrag(refm, refs, ret, baseurl, true);
            }
            break;
          default:
            break;
        }
      }
      ref = refs.shift()
    }
    return ret;
  }

  static parseFrag (refm, refs, ret, baseurl, discontinue) {
    if (!ret.frags) {
      ret.frags = []
    }

    let freg = {
      start: ret.duration,
      duration: parseFloat(refm[2]) * 1000
    }

    ret.duration += freg.duration;
    let nextline = refs.shift();
    if (nextline.match(/#(.*):(.*)/)) {
      nextline = refs.shift();
    }
    if (nextline.length > 0 && nextline.charAt(0) === '/' && baseurl.match(/.*\/\/.*\.\w+/g)) {
      baseurl = baseurl.match(/.*\/\/.*\.\w+/g)[0];
    }
    if (nextline.match(/.*:\/\/.*/)) {
      freg.url = nextline;
    } else {
      freg.url = baseurl + nextline;
    }
    freg.discontinue = discontinue;
    ret.frags.push(freg);
  }

  static parseURL (url) {
    let baseurl = '';
    let urls = url.match(/(.*\/).*\.m3u8/);
    if (urls && urls.length > 0) {
      for (let i = 0; i < urls.length; i++) {
        if (urls[i].match(/.*\/$/g) && urls[i].length > baseurl.length) {
          baseurl = urls[i];
        }
      }
    }
    return baseurl;
  }

  static parseDecrypt(refm, ret) {
    ret.encrypt = {};
    let refs = refm.split(',');
    for (let i in refs) { 
      let cmd = refs[i];
      if(cmd.match(/METHOD=(.*)/)) {
        ret.encrypt.method = cmd.match(/METHOD=(.*)/)[1];
      }
      if(cmd.match(/URI="(.*)"/)) {
        ret.encrypt.uri = cmd.match(/URI="(.*)"/)[1];
      }

      if(cmd.match(/IV=0x(.*)/)) {
        let iv = cmd.match(/IV=0x(.*)/)[1];
        let length = Math.ceil(iv.length / 2);
        ret.encrypt.ivb = new Uint8Array(length);
        for(let i = length - 1; i >=0; i--) {
          let im = parseInt(iv.substr(i * 2, 2), 16);
          ret.encrypt.ivb[i] = im;
        } 
        ret.encrypt.iv = iv;
      }
    };
  }
}

/* harmony default export */ __webpack_exports__["default"] = (M3U8Parser);


/***/ }),

/***/ "../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__);




const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].DEMUX_EVENTS;
const StreamType = {
  0x01: ['video', 'MPEG-1'],
  0x02: ['video', 'MPEG-2'],
  0x1b: ['video', 'AVC.H264'],
  0xea: ['video', 'VC-1'],
  0x03: ['audio', 'MPEG-1'],
  0x04: ['audio', 'MPEG-2'],
  0x0f: ['audio', 'MPEG-2.AAC'],
  0x11: ['audio', 'MPEG-4.AAC'],
  0x80: ['audio', 'LPCM'],
  0x81: ['audio', 'AC3'],
  0x06: ['audio', 'AC3'],
  0x82: ['audio', 'DTS'],
  0x83: ['audio', 'Dolby TrueHD'],
  0x84: ['audio', 'AC3-Plus'],
  0x85: ['audio', 'DTS-HD'],
  0x86: ['audio', 'DTS-MA'],
  0xa1: ['audio', 'AC3-Plus-SEC'],
  0xa2: ['audio', 'DTS-HD-SEC']
};

class TsDemuxer {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.demuxing = false;
    this.pat = [];
    this.pmt = [];
    this._hasVideoMeta = false;
    this._hasAudioMeta = false;
  }

  init () {
    this.on(DEMUX_EVENTS.DEMUX_START, this.demux.bind(this))
  }

  demux (frag) {
    if (this.demuxing) {
      return
    }

    let buffer = this.inputBuffer;
    let frags = { pat: [], pmt: [] };
    let peses = {};

    // Read TS segment
    while (buffer.length >= 188) {
      if (buffer.length >= 1 && buffer.array[0][buffer.offset] !== 71) {
        this.emit(DEMUX_EVENTS.DEMUX_ERROR, this.TAG, new Error(`Untrust sync code: ${buffer.array[0][buffer.offset]}, try to recover;`), false);
      }
      while (buffer.length >= 1 && buffer.array[0][buffer.offset] !== 71) {
        buffer.shift(1);
      }
      let buf = buffer.shift(188);
      // console.log(buf);
      let tsStream = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](buf.buffer);
      let ts = {};
      TsDemuxer.read(tsStream, ts, frags);
      if (ts.pes) {
        if (!peses[ts.header.pid]) {
          peses[ts.header.pid] = [];
        }
        peses[ts.header.pid].push(ts.pes);
        ts.pes.ES.buffer = [ts.pes.ES.buffer];
      } else if (peses[ts.header.pid]) {
        peses[ts.header.pid][peses[ts.header.pid].length - 1].ES.buffer.push(ts.payload.stream);
      }
    }

    let AudioOptions = frag;
    let VideoOptions = frag;

    // Get Frames data
    for (let i = 0; i < Object.keys(peses).length; i++) {
      let epeses = peses[Object.keys(peses)[i]];
      for (let j = 0; j < epeses.length; j++) {
        epeses[j].id = Object.keys(peses)[i];
        epeses[j].ES.buffer = TsDemuxer.Merge(epeses[j].ES.buffer);
        if (epeses[j].type === 'audio') {
          this.pushAudioSample(epeses[j], AudioOptions);
          AudioOptions = {};
        } else if (epeses[j].type === 'video') {
          this.pushVideoSample(epeses[j], VideoOptions);
          VideoOptions = {};
        }
      }
    }

    if (this._hasAudioMeta) {
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE, 'audio');
    }
    if (this._hasVideoMeta) {
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE, 'video');
    }
  }

  pushAudioSample (pes, options) {
    let track;
    if (!this._tracks.audioTrack) {
      this._tracks.audioTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__["AudioTrack"]();
      track = this._tracks.audioTrack;
    } else {
      track = this._tracks.audioTrack;
    }
    let meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["AudioTrackMeta"]({
      audioSampleRate: pes.ES.frequence,
      sampleRate: pes.ES.frequence,
      channelCount: pes.ES.channel,
      codec: 'mp4a.40.' + pes.ES.audioObjectType,
      config: pes.ES.audioConfig,
      id: 2,
      sampleRateIndex: pes.ES.frequencyIndex
    });
    meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);

    let metaEqual = TsDemuxer.compaireMeta(track.meta, meta, true);

    if (!this._hasAudioMeta || !metaEqual) {
      track.meta = meta;
      this._hasAudioMeta = true
      this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio');
    }

    let data = new Uint8Array(pes.ES.buffer.buffer.slice(pes.ES.buffer.position, pes.ES.buffer.length));
    let dts = parseInt(pes.pts / 90);
    let pts = parseInt(pes.pts / 90);
    let sample = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["AudioTrackSample"]({dts, pts, data, options});
    track.samples.push(sample);
  }

  pushVideoSample (pes, options) {
    let nals = xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__["Nalunit"].getNalunits(pes.ES.buffer);
    let track;
    let meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["VideoTrackMeta"]();
    if (!this._tracks.videoTrack) {
      this._tracks.videoTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__["VideoTrack"]();
      track = this._tracks.videoTrack;
    } else {
      track = this._tracks.videoTrack;
    }
    let sampleLength = 0;
    let sps = false;
    let pps = false;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      if (nal.sps) {
        sps = nal;
        track.sps = nal.body;
        meta.chromaFormat = sps.sps.chroma_format
        meta.codec = 'avc1.';
        for (var j = 1; j < 4; j++) {
          var h = sps.body[j].toString(16);
          if (h.length < 2) {
            h = '0' + h;
          }
          meta.codec += h;
        }
        meta.codecHeight = sps.sps.codec_size.height;
        meta.codecWidth = sps.sps.codec_size.width;
        meta.frameRate = sps.sps.frame_rate;
        meta.id = 1;
        meta.level = sps.sps.level_string;
        meta.presentHeight = sps.sps.present_size.height;
        meta.presentWidth = sps.sps.present_size.width;
        meta.profile = sps.sps.profile_string;
        meta.refSampleDuration = Math.floor(meta.timescale * (sps.sps.frame_rate.fps_den / sps.sps.frame_rate.fps_num));
        meta.sarRatio = sps.sps.sar_ratio ? sps.sps.sar_ratio : sps.sps.par_ratio;
      } else if (nal.pps) {
        track.pps = nal.body;
        pps = nal;
      } else {
        sampleLength += (4 + nal.body.byteLength);
      }
    }

    if (sps && pps) {
      meta.avcc = xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__["Nalunit"].getAvcc(sps.body, pps.body);
      let metaEqual = TsDemuxer.compaireMeta(track.meta, meta, true);
      if (!this._hasVideoMeta || !metaEqual) {
        if (options) {
          options.meta = Object.assign({}, meta);
        } else {
          options = {
            meta: Object.assign({}, meta)
          }
        }
        track.meta = meta;
        this._hasVideoMeta = true
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video');
      }
    }

    let data = new Uint8Array(sampleLength);
    let offset = 0;
    let isKeyframe = false;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      let length = nal.body.byteLength;
      if (nal.idr) {
        isKeyframe = true;
      }
      if (!nal.pps && !nal.sps) {
        data.set(new Uint8Array([length >>> 24 & 0xff,
          length >>> 16 & 0xff,
          length >>> 8 & 0xff,
          length & 0xff
        ]), offset);
        offset += 4;
        data.set(nal.body, offset);
        offset += length;
      }
    }
    let sample = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["VideoTrackSample"]({
      dts: parseInt(pes.dts / 90),
      pts: parseInt(pes.pts / 90),
      cts: (pes.pts - pes.dts) / 90,
      originDts: pes.dts,
      isKeyframe,
      data,
      options
    })
    track.samples.push(sample);
  }

  destory () {
    this.off(DEMUX_EVENTS.DEMUX_START, this.demux);
    this.configs = {};
    this.demuxing = false;
    this.pat = [];
    this.pmt = [];
    this._hasVideoMeta = false;
    this._hasAudioMeta = false;
  }

  static compaireArray (a, b, type) {
    let al = 0;
    let bl = 0;
    if (type === 'Uint8Array') {
      al = a.byteLength;
      bl = b.byteLength;
    } else if (type === 'Array') {
      al = a.length;
      bl = b.length;
    }
    if (al !== bl) {
      return false;
    }

    for (let i = 0; i < al; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }

  static compaireMeta (a, b, ignoreDuration) {
    if (!a || !b) {
      return false;
    }

    for (let i = 0, k = Object.keys(a).length; i < k; i++) {
      let itema = a[Object.keys(a)[i]];
      let itemb = b[Object.keys(a)[i]];
      if (typeof itema !== 'object') {
        if ((ignoreDuration && Object.keys(a)[i] !== 'duration' && Object.keys(a)[i] !== 'refSampleDuration' && Object.keys(a)[i] !== 'refSampleDurationFixed') && itema !== itemb) {
          return false;
        }
      } else if (itema.byteLength !== undefined) {
        if (itemb.byteLength === undefined) {
          return false;
        }
        if (!TsDemuxer.compaireArray(itema, itemb, 'Uint8Array')) {
          return false;
        }
      } else if (itema.length !== undefined) {
        if (itemb.length === undefined) {
          return false;
        }
        if (!TsDemuxer.compaireArray(itema, itemb, 'Array')) {
          return false;
        }
      } else {
        if (!TsDemuxer.compaireMeta(itema, itemb)) {
          return false;
        }
      }
    }
    return true;
  }

  static Merge (buffers) {
    let data;
    let length = 0;
    let offset = 0;
    for (let i = 0; i < buffers.length; i++) {
      length += (buffers[i].length - buffers[i].position);
    }

    data = new Uint8Array(length);
    for (let i = 0; i < buffers.length; i++) {
      let buffer = buffers[i];
      data.set(new Uint8Array(buffer.buffer, buffer.position), offset);
      offset += buffer.length - buffer.position;
    }
    return new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](data.buffer);
  }

  static read (stream, ts, frags) {
    TsDemuxer.readHeader(stream, ts);
    TsDemuxer.readPayload(stream, ts, frags);
    if (ts.header.packet === 'MEDIA' && ts.header.payload === 1 && !ts.unknownPIDs) {
      ts.pes = TsDemuxer.PES(ts);
    }
  }

  static readPayload (stream, ts, frags) {
    let header = ts.header
    let pid = header.pid;
    switch (pid) {
      case 0:
        TsDemuxer.PAT(stream, ts, frags);
        break;
      case 1:
        TsDemuxer.CAT(stream, ts, frags);
        break;
      case 2:
        TsDemuxer.TSDT(stream, ts, frags);
        break;
      case 0x1fff:
        break;
      default:
        // TODO: some的写法不太好，得改
        if (frags.pat.some((item) => { return item.pid === pid; })) {
          TsDemuxer.PMT(stream, ts, frags);
        } else {
          let sts = frags.pmt ? frags.pmt.filter((item) => item.pid === pid) : [];
          if (sts.length > 0) {
            TsDemuxer.Media(stream, ts, StreamType[sts[0].streamType][0])
          } else {
            ts.unknownPIDs = true;
          };
        }
    }
  }

  static readHeader (stream, ts) {
    let header = {};
    header.sync = stream.readUint8();
    let next = stream.readUint16();
    header.error = next >>> 15;
    header.payload = next >>> 14 & 1;
    header.priority = next >>> 13 & 1;
    header.pid = next & 0x1fff;

    next = stream.readUint8();

    header.scrambling = next >> 6 & 0x3; // 是否加密，00表示不加密

    /**
     * 00 ISO/IEC未来使用保留
     * 01 没有调整字段，仅含有184B有效净荷
     * 02 没有有效净荷，仅含有183B调整字段
     * 03 0~182B调整字段后为有效净荷
     */
    header.adaptation = next >> 4 & 0x3;
    header.continuity = next & 15;
    header.packet = header.pid === 0 ? 'PAT' : 'MEDIA';
    ts.header = header;
  }

  static PAT (stream, ts, frags) {
    let ret = {};
    let next = stream.readUint8();
    stream.skip(next);
    next = stream.readUint8();
    ret.tabelID = next;
    next = stream.readUint16();
    ret.error = next >>> 7;
    ret.zero = next >>> 6 & 1;
    ret.sectionLength = next & 0xfff;
    ret.streamID = stream.readUint16();
    ret.current = stream.readUint8() & 1;
    ret.sectionNumber = stream.readUint8();
    ret.lastSectionNumber = stream.readUint8();
    let N = (ret.sectionLength - 9) / 4;
    let list = [];
    for (let i = 0; i < N; i++) {
      let programNumber = stream.readUint16();
      let pid = stream.readUint16() & 0x1fff;
      list.push({
        program: programNumber,
        pid,
        type: programNumber === 0 ? 'network' : 'mapPID'
      });
    }
    if (list.length > 0) {
      frags.pat = frags.pat.concat(list);
    }
    ret.list = list;
    ret.program = stream.readUint16();
    ret.pid = stream.readUint16() & 0x1fff;
    ts.payload = ret;
    // TODO CRC
  }

  static PMT (stream, ts, frags) {
    let ret = {};
    let header = ts.header;
    header.packet = 'PMT';
    let next = stream.readUint8();
    stream.skip(next);
    next = stream.readUint8();
    ret.tableID = next;
    next = stream.readUint16();
    ret.sectionLength = next & 0xfff;
    ret.program = stream.readUint16();
    ret.current = stream.readUint8() & 1;
    ret.order = stream.readUint8();
    ret.lastOrder = stream.readUint8();
    ret.PCR_PID = stream.readUint16() & 0x1fff;
    ret.programLength = stream.readUint16() & 0xfff;
    let N = (ret.sectionLength - 13) / 5;
    let list = [];
    for (let i = 0; i < N; i++) {
      list.push({
        streamType: stream.readUint8(),
        pid: stream.readUint16() & 0x1fff, // 0x07e5 视频，0x07e6
        es: stream.readUint16() & 0xfff
      });
    }
    ret.list = list;
    if (!this.pmt) {
      this.pmt = [];
    }
    frags.pmt = this.pmt.concat(list.map((item) => {
      return {
        pid: item.pid,
        es: item.es,
        streamType: item.streamType,
        program: ret.program
      };
    }));
    ts.payload = ret;
  }

  static Media (stream, ts, type) {
    let header = ts.header;
    let payload = {};
    header.type = type;
    if (header.adaptation === 0x03) {
      payload.adaptationLength = stream.readUint8();
      if (payload.adaptationLength > 0) {
        let next = stream.readUint8();
        payload.discontinue = next >>> 7;
        payload.access = next >>> 6 & 0x01;
        payload.priority = next >>> 5 & 0x01;
        payload.PCR = next >>> 4 & 0x01;
        payload.OPCR = next >>> 3 & 0x01;
        payload.splicePoint = next >>> 2 & 0x01;
        payload.transportPrivate = next >>> 1 & 0x01;
        payload.adaptationField = next & 0x01;
        let _start = stream.position;
        if (payload.PCR === 1) {
          payload.programClockBase = stream.readUint32() << 1;
          next = stream.readUint16();
          payload.programClockBase |= next >>> 15;
          payload.programClockExtension = next & 0x1ff;
        }
        if (payload.OPCR === 1) {
          payload.originProgramClockBase = stream.readUint32() << 1;
          next = stream.readUint16();
          payload.originProgramClockBase += next >>> 15;
          payload.originProgramClockExtension = next & 0x1ff;
        }
        if (payload.splicePoint === 1) {
          payload.spliceCountdown = stream.readUint8();
        }
        if (payload.transportPrivate === 1) {
          let length = stream.readUint8();
          let transportPrivateData = [];
          for (let i = 0; i < length; i++) {
            transportPrivateData.push(stream.readUint8());
          }
        }
        if (payload.adaptationField === 1) {
          let length = stream.readUint8()
          let next = stream.readUint8()
          let start = stream.position;
          let ltw = next >>> 7;
          let piecewise = next >>> 6 & 0x1;
          let seamless = next >>> 5 & 0x1;
          if (ltw === 1) {
            next = stream.readUint16();
            payload.ltwValid = next >>> 15;
            payload.ltwOffset = next & 0xefff;
          }
          if (piecewise === 1) {
            next = stream.readUint24();
            payload.piecewiseRate = next & 0x3fffff;
          }
          if (seamless === 1) {
            next = stream.readInt8();
            payload.spliceType = next >>> 4;
            payload.dtsNextAU1 = next >>> 1 & 0x7;
            payload.marker1 = next & 0x1;
            next = stream.readUint16();
            payload.dtsNextAU2 = next >>> 1;
            payload.marker2 = next & 0x1;
            next = stream.readUint16();
            payload.dtsNextAU3 = next;
          }
          stream.skip(length - 1 - (stream.position - start));
        }
        let lastStuffing = payload.adaptationLength - 1 - (stream.position - _start);
        stream.skip(lastStuffing);
      }
    }
    payload.stream = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](stream.buffer.slice(stream.position));
    ts.payload = payload;
  }

  static PES (ts) {
    let ret = {};
    let buffer = ts.payload.stream;

    let next = buffer.readUint24();
    if (next !== 1) {
      ret.ES = {};
      ret.ES.buffer = buffer;
    } else {
      let streamID = buffer.readUint8();
      if (streamID >= 0xe0 && streamID <= 0xef) {
        ret.type = 'video';
      }
      if (streamID >= 0xc0 && streamID <= 0xdf) {
        ret.type = 'audio';
      }
      let packetLength = buffer.readUint16();
      ret.packetLength = packetLength;
      if (ret.type === 'video' || ret.type === 'audio') {
        let next = buffer.readUint8();
        let first = next >>> 6;
        if (first !== 0x02) {
          throw new Error('error when parse pes header');
        }
        next = buffer.readUint8();
        ret.ptsDTSFlag = next >>> 6;
        ret.escrFlag = next >>> 5 & 0x01;
        ret.esRateFlag = next >>> 4 & 0x01;
        ret.dsmFlag = next >>> 3 & 0x01;
        ret.additionalFlag = next >>> 2 & 0x01;
        ret.crcFlag = next >>> 1 & 0x01;
        ret.extensionFlag = next & 0x01;
        ret.pesHeaderLength = buffer.readUint8();
        let N1 = ret.pesHeaderLength;

        if (ret.ptsDTSFlag === 2) {
          let pts = [];
          next = buffer.readUint8();
          pts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          ret.pts = (pts[0] << 30 | pts[1] << 15 | pts[2]);
          N1 -= 5;
          // 视频如果没有dts用pts
          if (ret.type === 'video') {
            ret.dts = ret.pts;
          }
        }
        if (ret.ptsDTSFlag === 3) {
          let pts = [];
          next = buffer.readUint8();
          pts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          ret.pts = (pts[0] << 30 | pts[1] << 15 | pts[2]);
          let dts = [];
          next = buffer.readUint8();
          dts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          dts.push(next >>> 1);
          next = buffer.readUint16();
          dts.push(next >>> 1);
          ret.dts = (dts[0] << 30 | dts[1] << 15 | dts[2]);
          N1 -= 10;
        }
        if (ret.escrFlag === 1) {
          let escr = []
          let ex = [];
          next = buffer.readUint8();
          escr.push(next >>> 3 & 0x07);
          escr.push(next & 0x03);
          next = buffer.readUint16();
          escr.push(next >>> 13);
          escr.push(next & 0x03);
          next = buffer.readUint16();
          escr.push(next >>> 13);
          ex.push(next & 0x03);
          next = buffer.readUint8();
          ex.push(next >>> 1);
          ret.escr = (escr[0] << 30 | escr[1] << 28 | escr[2] << 15 | escr[3] << 13 | escr[4]) * 300 + (ex[0] << 7 | ex[1]);
          N1 -= 6;
        }
        if (ret.esRateFlag === 1) {
          next = buffer.readUint24();
          ret.esRate = next >>> 1 & 0x3fffff;
          N1 -= 3;
        }
        if (ret.dsmFlag === 1) {
          throw new Error('not support DSM_trick_mode');
        }
        if (ret.additionalFlag === 1) {
          next = buffer.readUint8();
          ret.additionalCopyInfo = next & 0x7f;
          N1 -= 1;
        }
        if (ret.crcFlag === 1) {
          ret.pesCRC = buffer.readUint16();
          N1 -= 2;
        }
        if (ret.extensionFlag === 1) {
          throw new Error('not support extension');
        }
        if (N1 > 0) {
          buffer.skip(N1);
        }
        ret.ES = TsDemuxer.ES(buffer, ret.type);
      } else {
        throw new Error('format is not supported');
      }
    }
    return ret;
  }

  static ES (buffer, type) {
    let next;
    let ret = {};
    if (type === 'video') {
      next = buffer.readUint32();
      if (next !== 1) {
        buffer.back(4);
        next = buffer.readUint24();
        if (next !== 1) {
          throw new Error('h264 nal header parse failed');
        }
      }
      buffer.skip(2);// 09 F0
      // TODO readnalu
      ret.buffer = buffer;
    } else if (type === 'audio') {
      next = buffer.readUint16();
      // adts的同步字节，12位
      if (next >>> 4 !== 0xfff) {
        throw new Error('aac ES parse Error');
      }
      const fq = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];
      ret.id = (next >>> 3 & 0x01) === 0 ? 'MPEG-4' : 'MPEG-2';
      ret.layer = next >>> 1 & 0x03;
      ret.absent = next & 0x01;
      next = buffer.readUint16();
      ret.audioObjectType = (next >>> 14 & 0x03) + 1;
      ret.profile = ret.audioObjectType - 1;
      ret.frequencyIndex = next >>> 10 & 0x0f;
      ret.frequence = fq[ret.frequencyIndex];
      ret.channel = next >>> 6 & 0x07;
      ret.frameLength = (next & 0x03) << 11 | (buffer.readUint16() >>> 5);
      TsDemuxer.getAudioConfig(ret);
      buffer.skip(1);
      ret.buffer = buffer;
    } else {
      throw new Error(`ES ${type} is not supported`);
    }

    return ret;
  }

  static TSDT (stream, ts, frags) {
    // TODO
    ts.payload = {};
  }

  static CAT (stream, ts, frags) {
    let ret = {}
    ret.tableID = stream.readUint8();
    let next = stream.readUint16();
    ret.sectionIndicator = next >>> 7;
    ret.sectionLength = next & 0x0fff;
    stream.skip(2);
    next = stream.readUint8();
    ret.version = next >>> 3;
    ret.currentNextIndicator = next & 0x01;
    ret.sectionNumber = stream.readUint8();
    ret.lastSectionNumber = stream.readUint8();
    let N = (this.sectionLength - 9) / 4;
    let list = [];
    for (let i = 0; i < N; i++) {
      list.push({});
    }
    ret.crc32 = stream.readUint32();
    ts.payload = ret;
  }

  static getAudioConfig (ret) {
    let userAgent = navigator.userAgent.toLowerCase()
    let config;
    let extensionSampleIndex;
    if (/firefox/i.test(userAgent)) {
      if (ret.frequencyIndex >= 6) {
        ret.audioObjectType = 5;
        config = new Array(4);
        extensionSampleIndex = ret.frequencyIndex - 3;
      } else {
        ret.audioObjectType = 2;
        config = new Array(2);
        extensionSampleIndex = ret.frequencyIndex;
      }
    } else if (userAgent.indexOf('android') !== -1) {
      ret.audioObjectType = 2;
      config = new Array(2);
      extensionSampleIndex = ret.frequencyIndex;
    } else {
      ret.audioObjectType = 5;
      config = new Array(4);
      if (ret.frequencyIndex >= 6) {
        extensionSampleIndex = ret.frequencyIndex - 3;
      } else {
        if (ret.channel === 1) {
          ret.audioObjectType = 2;
          config = new Array(2);
        }
        extensionSampleIndex = ret.frequencyIndex;
      }
    }

    config[0] = ret.audioObjectType << 3;
    config[0] |= (ret.frequencyIndex & 0x0e) >> 1;
    config[1] = (ret.frequencyIndex & 0x01) << 7;
    config[1] |= ret.channel << 3;
    if (ret.audioObjectType === 5) {
      config[1] |= (extensionSampleIndex & 0x0e) >> 1;
      config[2] = (extensionSampleIndex & 0x01) << 7;
      config[2] |= 2 << 2;
      config[3] = 0;
    }
    ret.audioConfig = config;
  }

  get inputBuffer () {
    return this._context.getInstance(this.configs.inputbuffer);
  }

  get _tracks () {
    return this._context.getInstance('TRACKS');
  }
}

/* harmony default export */ __webpack_exports__["default"] = (TsDemuxer);


/***/ }),

/***/ "../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Playlist {
  constructor (configs) {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
    this.fragLength = 0;
    this._lastget = undefined;
    this._audoclear = configs.autoclear || false;
  }

  get list () {
    return this._list;
  }

  set baseURL (baseURL) {
    if (this.baseURL !== baseURL) {
      this.clear();
      this._baseURL = baseURL;
    }
  }

  get baseURL () {
    return this._baseURL;
  }

  push (ts, duration, discontinue) {
    if (!this._ts[ts]) {
      this._ts[ts] = {duration: duration, 
        downloaded: false, 
        downloading: false, 
        start: this.duration, 
        discontinue: discontinue ? true: false
      };
      this._list[this.duration] = ts;
      this.duration += duration;
      this.fragLength += 1;
    }
  }

  deleteFrag (url) {
    if (this._ts[url]) {
      if (this._ts[url].start > this._lastget.time) {
        this._lastget = {
          duration: this._ts[url].duration,
          time: this._ts[url].start,
          downloaded: false,
          downloading: false,
          url: url
        }
      }
      delete this._list[this._ts[url].start];
      delete this._ts[url];
      this.fragLength -= 1;
    }
  }

  pushM3U8 (data, deletepre) {
    // 常规信息替换
    if (!data) {
      throw new Error(`No m3u8 data received.`);
      return;
    }
    this.version = data.version;
    this.targetduration = data.targetduration;
    if(data.encrypt && !this.encrypt) {
      this.encrypt = data.encrypt;
    }
    // 新分片信息
    if (data.sequence > this.sequence) {
      this.sequence = data.sequence;
      let newfraglist = []
      for (let i = 0; i < data.frags.length; i++) {
        let frag = data.frags[i];
        if (!this._ts[frag.url]) {
          newfraglist.push(frag.url)
          this.push(frag.url, frag.duration, frag.discontinue);
        }
      }

      if(newfraglist.length < 1) {
        throw new Error(`Can not read ts file list.`);
      }
      
      if (deletepre) {
        let tslist = this.getTsList();
        for (let i = 0; i < tslist.length; i++) {
          if (newfraglist.indexOf(tslist[i]) < 0) {
            this.deleteFrag(tslist[i]);
          }
        }
      }
    } else {
      throw new Error(`Old m3u8 file received, ${data.sequence}`);
    }
  }

  getTsList () {
    return Object.keys(this._ts);
  }

  downloaded (tsname, isloaded) {
    let ts = this._ts[tsname];
    if (ts) {
      ts.downloaded = isloaded
    }
  }

  downloading (tsname, loading) {
    let ts = this._ts[tsname];
    if (ts) {
      ts.downloading = loading
    }
  }

  getTsByName (name) {
    return this._ts[name];
  }

  getTs (time) {
    let timelist = Object.keys(this._list);
    let ts;

    if (time === undefined) {
      if (this._lastget) {
        time = this._lastget.time + this._lastget.duration;
      } else {
        time = 0;
      }
    }

    if (timelist.length < 1 || time >= this.duration) {
      return undefined;
    }
    timelist.sort((a, b) => {
      return parseFloat(a) - parseFloat(b)
    });
    for (let i = 0; i < timelist.length; i++) {
      if (time >= parseInt(timelist[i])) {
        let url = this._list[timelist[i]];
        let downloaded = this._ts[url].downloaded;
        let downloading = this._ts[url].downloading;
        ts = {url, downloaded, downloading, time: parseInt(timelist[i]), duration: parseInt(this._ts[url].duration)};
        if (this.autoclear) {
          delete this._ts[this._lastget.url];
          delete this._list[this._lastget.time];
        }
        this._lastget = ts;
      } else {
        break;
      }
    }
    return ts;
  }

  clear () {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
  }

  clearDownloaded () {
    for (let i = 0, l = Object.keys(this._ts).length; i < l; i++) {
      let ts = this._ts[Object.keys(this._ts)[i]];
      ts.downloaded = false;
      ts.downloading = false;
    }
  }

  destroy () {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
    this.fragLength = 0;
    this._lastget = undefined;
    this._audoclear = false;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Playlist);


/***/ }),

/***/ "../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  FetchLoader: __webpack_require__(/*! ./src/fetch-loader */ "../xgplayer-loader/src/fetch-loader.js").default
};


/***/ }),

/***/ "../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


const LOADER_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].LOADER_EVENTS;
const READ_STREAM = 0;
const READ_TEXT = 1;
const READ_JSON = 2;
const READ_BUFFER = 3;
class FetchLoader {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.url = null
    this.status = 0
    this.error = null
    this._reader = null;
    this._canceled = false;
    this._destroyed = false;
    this.readtype = this.configs.readtype;
    this.buffer = this.configs.buffer || 'LOADER_BUFFER';
    this._loaderTaskNo = 0;
  }

  init () {
    this.on(LOADER_EVENTS.LADER_START, this.load.bind(this))
  }

  static get type () {
    return 'loader'
  }

  load (url, opts) {
    let _this = this;
    this.url = url;
    this._canceled = false;

    // TODO: Add Ranges
    let params = this.getParams(opts)
    _this.loading = true
    return fetch(this.url, params).then(function (response) {
      if (response.ok) {
        _this.status = response.status
        return _this._onFetchResponse(response);
      }
      _this.loading = false;
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this.TAG, new Error(`invalid response.`));
    }).catch(function (error)  {
      _this.loading = false;
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this.TAG, error);
      throw new Error(error.message)
    })
  }

  _onFetchResponse (response) {
    let _this = this;
    let buffer = this._context.getInstance(this.buffer);
    this._loaderTaskNo++;
    let taskno = this._loaderTaskNo;
    if (response.ok === true) {
      switch (this.readtype) {
        case READ_JSON:
          response.json().then((data) => {
            _this.loading = false
            if (!_this._canceled && !_this._destroyed) {
              if (buffer) {
                buffer.push(data);
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_TEXT:
          response.text().then((data) => {
            _this.loading = false
            if (!_this._canceled && !_this._destroyed) {
              if (buffer) {
                buffer.push(data);
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_BUFFER:
          response.arrayBuffer().then((data) => {
            _this.loading = false
            if (!_this._canceled && !_this._destroyed) {
              if (buffer) {
                buffer.push(new Uint8Array(data));
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_STREAM:
        default:
          return this._onReader(response.body.getReader(), taskno);
      }
    }
  }

  _onReader (reader, taskno) {
    let buffer = this._context.getInstance(this.buffer);
    if ((!buffer && this._reader) || this._destroyed) {
      try {
        this._reader.cancel()
      } catch (e) {
        // DO NOTHING
      }
    }

    this._reader = reader
    if (this.loading === false) {
      return
    }

    let _this = this
    // reader read function returns a Promise. get data when callback and has value.done when disconnected.
    // read方法返回一个Promise. 回调中可以获取到数据。当value.done存在时，说明链接断开。
    this._reader && this._reader.read().then(function (val) {
      if (val.done) {
        // TODO: 完成处理
        _this.loading = false
        _this.status = 0;
        _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer)
        return
      }

      if (_this._canceled || _this._destroyed) {
        if  (_this._reader) {
          try {
            _this._reader.cancel()
          } catch (e) {
            // DO NOTHING
          }
        }

        return;
      }
      buffer.push(val.value)
      _this.emit(LOADER_EVENTS.LOADER_DATALOADED, buffer)
      return _this._onReader(reader, taskno)
    }).catch((error) => {
      _this.loading = false;
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this.TAG, error);
    })
  }

  getParams (opts) {
    let options = Object.assign({}, opts)
    let headers = new Headers()

    let params = {
      method: 'GET',
      headers: headers,
      mode: 'cors',
      cache: 'default'
    }

    // add custmor headers
    // 添加自定义头
    if (typeof this.configs.headers === 'object') {
      let configHeaders = this.configs.headers
      for (let key in configHeaders) {
        if (configHeaders.hasOwnProperty(key)) {
          headers.append(key, configHeaders[key])
        }
      }
    }

    if (typeof options.headers === 'object') {
      let optHeaders = options.headers
      for (let key in optHeaders) {
        if (optHeaders.hasOwnProperty(key)) {
          headers.append(key, optHeaders[key])
        }
      }
    }

    if (options.cors === false) {
      params.mode = 'same-origin'
    }

    // withCredentials is disabled by default
    // withCredentials 在默认情况下不被使用。
    if (options.withCredentials) {
      params.credentials = 'include'
    }

    // TODO: Add ranges;
    return params;
  }

  cancel () {
    if (this._reader) {
      try {
        this._reader.cancel()
      } catch (e) {
        // 防止failed: 200错误被打印到控制台上
      }
      this._reader = null
      this.loading = false
      this._canceled = true;
    }
  }

  destroy () {
    this._destroyed = true
    this.cancel();
  }
}

/* harmony default export */ __webpack_exports__["default"] = (FetchLoader);


/***/ }),

/***/ "../xgplayer-remux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-remux/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Mp4Remuxer: __webpack_require__(/*! ./src/mp4 */ "../xgplayer-remux/src/mp4/index.js").default
};


/***/ }),

/***/ "../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


// const UINT32_MAX = Math.pow(2, 32) - 1;
class Fmp4 {
  static size (value) {
    return xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(value)
  }
  static initBox (size, name, ...content) {
    const buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    buffer.write(Fmp4.size(size), Fmp4.type(name), ...content)
    return buffer.buffer
  }
  static extension (version, flag) {
    return new Uint8Array([
      version,
      (flag >> 16) & 0xff,
      (flag >> 8) & 0xff,
      flag & 0xff
    ])
  }
  static ftyp () {
    return Fmp4.initBox(24, 'ftyp', new Uint8Array([
      0x69, 0x73, 0x6F, 0x6D, // isom,
      0x0, 0x0, 0x00, 0x01, // minor_version: 0x01
      0x69, 0x73, 0x6F, 0x6D, // isom
      0x61, 0x76, 0x63, 0x31 // avc1
    ]))
  }
  static moov ({ type, meta }) {
    let size = 8
    let mvhd = Fmp4.mvhd(meta.duration, meta.timescale)
    let trak

    if (type === 'video') {
      trak = Fmp4.videoTrak(meta)
    } else {
      trak = Fmp4.audioTrak(meta)
    }

    let mvex = Fmp4.mvex(meta.duration, meta.timescale || 1000, meta.id);
    [mvhd, trak, mvex].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'moov', mvhd, trak, mvex)
  }
  static mvhd (duration, timescale = 1000) {
    // duration *= timescale;
    let bytes = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, // version(0) + flags     1位的box版本+3位flags   box版本，0或1，一般为0。（以下字节数均按version=0）
      0x00, 0x00, 0x00, 0x00, // creation_time    创建时间  （相对于UTC时间1904-01-01零点的秒数）
      0x00, 0x00, 0x00, 0x00, // modification_time   修改时间

      /**
             * timescale: 4 bytes文件媒体在1秒时间内的刻度值，可以理解为1秒长度
             */
      (timescale >>> 24) & 0xFF,
      (timescale >>> 16) & 0xFF,
      (timescale >>> 8) & 0xFF,
      (timescale) & 0xFF,

      /**
             * duration: 4 bytes该track的时间长度，用duration和time scale值可以计算track时长，比如audio track的time scale = 8000,
             * duration = 560128，时长为70.016，video track的time scale = 600, duration = 42000，时长为70
             */
      (duration >>> 24) & 0xFF,
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0   推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放
      /**
             * PreferredVolume(1.0, 2bytes) + reserved(2bytes)
             * 与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量
             */
      0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, //  reserved: 4 + 4 bytes保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // 视频变换矩阵   线性代数
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // pre-defined 保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----
      0xFF, 0xFF, 0xFF, 0xFF // next_track_ID 下一个track使用的id号
    ])
    return Fmp4.initBox(8 + bytes.length, 'mvhd', new Uint8Array(bytes))
  }
  static videoTrak (data) {
    let size = 8

    let tkhd = Fmp4.tkhd({
      id: 1,
      duration: data.duration,
      timescale: data.timescale || 1000,
      width: data.presentWidth,
      height: data.presentHeight,
      type: 'video'
    })
    let mdia = Fmp4.mdia({
      type: 'video',
      timescale: data.timescale || 1000,
      duration: data.duration,
      avcc: data.avcc,
      parRatio: data.parRatio,
      width: data.presentWidth,
      height: data.presentHeight
    });
    [tkhd, mdia].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'trak', tkhd, mdia)
  }
  static audioTrak (data) {
    let size = 8
    let tkhd = Fmp4.tkhd({
      id: 2,
      duration: data.duration,
      timescale: data.timescale || 1000,
      width: 0,
      height: 0,
      type: 'audio'
    })
    let mdia = Fmp4.mdia({
      type: 'audio',
      timescale: data.timescale || 1000,
      duration: data.duration,
      channelCount: data.channelCount,
      samplerate: data.sampleRate,
      config: data.config
    });
    [tkhd, mdia].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'trak', tkhd, mdia)
  }
  static tkhd (data) {
    let id = data.id
    let duration = data.duration
    let width = data.width
    let height = data.height
    let content = new Uint8Array([
      0x00, 0x00, 0x00, 0x07, // version(0) + flags 1位版本 box版本，0或1，一般为0。（以下字节数均按version=0）按位或操作结果值，预定义如下：
      // 0x000001 track_enabled，否则该track不被播放；
      // 0x000002 track_in_movie，表示该track在播放中被引用；
      // 0x000004 track_in_preview，表示该track在预览时被引用。
      // 一般该值为7，1+2+4 如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项；对于hint track，该值为0
      // hint track 这个特殊的track并不包含媒体数据，而是包含了一些将其他数据track打包成流媒体的指示信息。
      0x00, 0x00, 0x00, 0x00, // creation_time创建时间（相对于UTC时间1904-01-01零点的秒数）
      0x00, 0x00, 0x00, 0x00, // modification time 修改时间
      (id >>> 24) & 0xFF, // track_ID: 4 bytes id号，不能重复且不能为0
      (id >>> 16) & 0xFF,
      (id >>> 8) & 0xFF,
      (id) & 0xFF,
      0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes    保留位
      (duration >>> 24) & 0xFF, // duration: 4 bytes track的时间长度
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes    保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)  视频层，默认为0，值小的在上层.track分组信息，默认为0表示该track未与其他track有群组关系
      0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)    [8.8] 格式，如果为音频track，1.0（0x0100）表示最大音量；否则为0   +保留位
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, // 视频变换矩阵
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      (width >>> 8) & 0xFF, // //宽度
      (width) & 0xFF,
      0x00, 0x00,
      (height >>> 8) & 0xFF, // 高度
      (height) & 0xFF,
      0x00, 0x00
    ])
    return Fmp4.initBox(8 + content.byteLength, 'tkhd', content)
  }
  static edts (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let duration = data.duration
    let mediaTime = data.mediaTime
    buffer.write(Fmp4.size(36), Fmp4.type('edts'))
    // elst
    buffer.write(Fmp4.size(28), Fmp4.type('elst'))
    buffer.write(new Uint8Array([
      0x00, 0x00, 0x00, 0x01, // entry count
      (duration >> 24) & 0xff, (duration >> 16) & 0xff, (duration >> 8) & 0xff, duration & 0xff,
      (mediaTime >> 24) & 0xff, (mediaTime >> 16) & 0xff, (mediaTime >> 8) & 0xff, mediaTime & 0xff,
      0x00, 0x00, 0x00, 0x01 // media rate
    ]))
    return buffer.buffer
  }
  static mdia (data) {
    let size = 8
    let mdhd = Fmp4.mdhd(data.timescale, data.duration)
    let hdlr = Fmp4.hdlr(data.type)
    let minf = Fmp4.minf(data);
    [mdhd, hdlr, minf].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'mdia', mdhd, hdlr, minf)
  }
  static mdhd (timescale = 1000, duration) {
    let content = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, // creation_time    创建时间
      0x00, 0x00, 0x00, 0x00, // modification_time修改时间
      (timescale >>> 24) & 0xFF, // timescale: 4 bytes    文件媒体在1秒时间内的刻度值，可以理解为1秒长度
      (timescale >>> 16) & 0xFF,
      (timescale >>> 8) & 0xFF,
      (timescale) & 0xFF,
      (duration >>> 24) & 0xFF, // duration: 4 bytes  track的时间长度
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x55, 0xC4, // language: und (undetermined) 媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）
      0x00, 0x00 // pre_defined = 0
    ])
    return Fmp4.initBox(12 + content.byteLength, 'mdhd', Fmp4.extension(0, 0), content)
  }
  static hdlr (type) {
    let value = [0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x56, 0x69, 0x64, 0x65,
      0x6f, 0x48, 0x61, 0x6e,
      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
    ]
    if (type === 'audio') {
      value.splice(8, 4, ...[0x73, 0x6f, 0x75, 0x6e])
      value.splice(24, 13, ...[0x53, 0x6f, 0x75, 0x6e,
        0x64, 0x48, 0x61, 0x6e,
        0x64, 0x6c, 0x65, 0x72, 0x00])
    }
    return Fmp4.initBox(8 + value.length, 'hdlr', new Uint8Array(value))
  }
  static minf (data) {
    let size = 8
    let vmhd = data.type === 'video' ? Fmp4.vmhd() : Fmp4.smhd()
    let dinf = Fmp4.dinf()
    let stbl = Fmp4.stbl(data);
    [vmhd, dinf, stbl].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'minf', vmhd, dinf, stbl)
  }
  static vmhd () {
    return Fmp4.initBox(20, 'vmhd', new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x01, // flags
      0x00, 0x00, // graphicsmode
      0x00, 0x00,
      0x00, 0x00,
      0x00, 0x00 // opcolor
    ]))
  }
  static smhd () {
    return Fmp4.initBox(16, 'smhd', new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, // balance
      0x00, 0x00 // reserved
    ]))
  }
  static dinf () {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let dref = [0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x01, // entry_count
      0x00, 0x00, 0x00, 0x0c, // entry_size
      0x75, 0x72, 0x6c, 0x20, // 'url' type
      0x00, // version 0
      0x00, 0x00, 0x01 // entry_flags
    ]
    buffer.write(Fmp4.size(36), Fmp4.type('dinf'), Fmp4.size(28), Fmp4.type('dref'), new Uint8Array(dref))
    return buffer.buffer
  }
  static stbl (data) {
    let size = 8
    let stsd = Fmp4.stsd(data)
    let stts = Fmp4.stts()
    let stsc = Fmp4.stsc()
    let stsz = Fmp4.stsz()
    let stco = Fmp4.stco();
    [stsd, stts, stsc, stsz, stco].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'stbl', stsd, stts, stsc, stsz, stco)
  }
  static stsd (data) {
    let content
    if (data.type === 'audio') {
      // if (!data.isAAC && data.codec === 'mp4') {
      //     content = FMP4.mp3(data);
      // } else {
      //
      // }
      // 支持mp4a
      content = Fmp4.mp4a(data)
    } else {
      content = Fmp4.avc1(data)
    }
    return Fmp4.initBox(16 + content.byteLength, 'stsd', Fmp4.extension(0, 0), new Uint8Array([0x00, 0x00, 0x00, 0x01]), content)
  }
  static mp4a (data) {
    let content = new Uint8Array([
      0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // data_reference_index
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, data.channelCount, // channelcount
      0x00, 0x10, // sampleSize:16bits
      0x00, 0x00, 0x00, 0x00, // reserved2
      (data.samplerate >> 8) & 0xff,
      data.samplerate & 0xff, //
      0x00, 0x00
    ])
    let esds = Fmp4.esds(data.config)
    return Fmp4.initBox(8 + content.byteLength + esds.byteLength, 'mp4a', content, esds)
  }
  static esds (config = [43, 146, 8, 0]) {
    const configlen = config.length
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let content = new Uint8Array([
      0x00, // version 0
      0x00, 0x00, 0x00, // flags

      0x03, // descriptor_type
      0x17 + configlen, // length
      0x00, 0x01, // es_id
      0x00, // stream_priority

      0x04, // descriptor_type
      0x0f + configlen, // length
      0x40, // codec : mpeg4_audio
      0x15, // stream_type
      0x00, 0x00, 0x00, // buffer_size
      0x00, 0x00, 0x00, 0x00, // maxBitrate
      0x00, 0x00, 0x00, 0x00, // avgBitrate

      0x05 // descriptor_type
    ].concat([configlen]).concat(config).concat([0x06, 0x01, 0x02]))
    buffer.write(Fmp4.size(8 + content.byteLength), Fmp4.type('esds'), content)
    return buffer.buffer
  }
  static avc1 (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let size = 40// 8(avc1)+8(avcc)+8(btrt)+16(pasp)
    // let sps = data.sps
    // let pps = data.pps
    let width = data.width
    let height = data.height
    let hSpacing = data.parRatio.height
    let vSpacing = data.parRatio.width
    // let avccBuffer = new Buffer()
    // avccBuffer.write(new Uint8Array([
    //   0x01, // version
    //   sps[1], // profile
    //   sps[2], // profile compatible
    //   sps[3], // level
    //   0xfc | 3,
    //   0xE0 | 1 // 目前只处理一个sps
    // ].concat([sps.length >>> 8 & 0xff, sps.length & 0xff])))
    // avccBuffer.write(sps, new Uint8Array([1, pps.length >>> 8 & 0xff, pps.length & 0xff]), pps)

    let avcc = data.avcc
    let avc1 = new Uint8Array([
      0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // data_reference_index
      0x00, 0x00, // pre_defined
      0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // pre_defined
      (width >> 8) & 0xff,
      width & 0xff, // width
      (height >> 8) & 0xff,
      height & 0xff, // height
      0x00, 0x48, 0x00, 0x00, // horizresolution
      0x00, 0x48, 0x00, 0x00, // vertresolution
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // frame_count
      0x12,
      0x64, 0x61, 0x69, 0x6C, // dailymotion/hls.js
      0x79, 0x6D, 0x6F, 0x74,
      0x69, 0x6F, 0x6E, 0x2F,
      0x68, 0x6C, 0x73, 0x2E,
      0x6A, 0x73, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, // compressorname
      0x00, 0x18, // depth = 24
      0x11, 0x11]) // pre_defined = -1
    let btrt = new Uint8Array([
      0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
      0x00, 0x2d, 0xc6, 0xc0 // avgBitrate
    ])
    let pasp = new Uint8Array([
      (hSpacing >> 24), // hSpacing
      (hSpacing >> 16) & 0xff,
      (hSpacing >> 8) & 0xff,
      hSpacing & 0xff,
      (vSpacing >> 24), // vSpacing
      (vSpacing >> 16) & 0xff,
      (vSpacing >> 8) & 0xff,
      vSpacing & 0xff
    ])

    buffer.write(
      Fmp4.size(size + avc1.byteLength + avcc.byteLength + btrt.byteLength), Fmp4.type('avc1'), avc1,
      Fmp4.size(8 + avcc.byteLength), Fmp4.type('avcC'), avcc,
      Fmp4.size(20), Fmp4.type('btrt'), btrt,
      Fmp4.size(16), Fmp4.type('pasp'), pasp
    )
    return buffer.buffer
  }
  static stts () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stts', content)
  }
  static stsc () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stsc', content)
  }
  static stco () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stco', content)
  }
  static stsz () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // sample_size
      0x00, 0x00, 0x00, 0x00 // sample_count
    ])
    return Fmp4.initBox(20, 'stsz', content)
  }
  static mvex (duration, timescale = 1000, trackID) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let mehd = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(duration)
    buffer.write(Fmp4.size(56), Fmp4.type('mvex'), Fmp4.size(16), Fmp4.type('mehd'), Fmp4.extension(0, 0), mehd, Fmp4.trex(trackID))
    return buffer.buffer
  }
  static trex (id) {
    let content = new Uint8Array([
      0x00, // version 0
      0x00, 0x00, 0x00, // flags
      (id >> 24),
      (id >> 16) & 0xff,
      (id >> 8) & 0xff,
      (id & 0xff), // track_ID
      0x00, 0x00, 0x00, 0x01, // default_sample_description_index
      0x00, 0x00, 0x00, 0x00, // default_sample_duration
      0x00, 0x00, 0x00, 0x00, // default_sample_size
      0x00, 0x01, 0x00, 0x01 // default_sample_flags
    ])
    return Fmp4.initBox(8 + content.byteLength, 'trex', content)
  }
  static moof (data) {
    let size = 8
    let mfhd = Fmp4.mfhd()
    let traf = Fmp4.traf(data);
    [mfhd, traf].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'moof', mfhd, traf)
  }
  static mfhd () {
    let content = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(Fmp4.sequence)
    Fmp4.sequence += 1
    return Fmp4.initBox(16, 'mfhd', Fmp4.extension(0, 0), content)
  }
  static traf (data) {
    let size = 8
    let tfhd = Fmp4.tfhd(data.id)
    let tfdt = Fmp4.tfdt(data.time)
    let sdtp = Fmp4.sdtp(data)
    let trun = Fmp4.trun(data, sdtp.byteLength);

    [tfhd, tfdt, trun, sdtp].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'traf', tfhd, tfdt, trun, sdtp)
  }
  static tfhd (id) {
    let content = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(id)
    return Fmp4.initBox(16, 'tfhd', Fmp4.extension(0, 0), content)
  }
  static tfdt (time) {
    // let upper = Math.floor(time / (UINT32_MAX + 1)),
    //     lower = Math.floor(time % (UINT32_MAX + 1));
    return Fmp4.initBox(16, 'tfdt', Fmp4.extension(0, 0), xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(time))
  }
  static trun (data, sdtpLength) {
    // let id = data.id;
    // let ceil = id === 1 ? 16 : 12;
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let sampleCount = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(data.samples.length)
    // mdat-header 8
    // moof-header 8
    // mfhd 16
    // traf-header 8
    // thhd 16
    // tfdt 20
    // trun-header 12
    // sampleCount 4
    // data-offset 4
    // samples.length
    let offset = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(8 + 8 + 16 + 8 + 16 + 16 + 12 + 4 + 4 + 16 * data.samples.length + sdtpLength)
    buffer.write(Fmp4.size(20 + 16 * data.samples.length), Fmp4.type('trun'), new Uint8Array([0x00, 0x00, 0x0F, 0x01]), sampleCount, offset)

    // let size = buffer.buffer.byteLength
    // let writeOffset = 0
    // data.samples.forEach(() => {
    //   size += 16
    // })
    //
    // let trunBox = new Uint8Array(size)

    // trunBox.set(buffer.buffer, 0)

    data.samples.forEach((item) => {
      const flags = item.flags
      // console.log(item.type, item.dts, item.duration)

      buffer.write(new Uint8Array([
        (item.duration >>> 24) & 0xFF, // sample_duration
        (item.duration >>> 16) & 0xFF,
        (item.duration >>> 8) & 0xFF,
        (item.duration) & 0xFF,
        (item.size >>> 24) & 0xFF, // sample_size
        (item.size >>> 16) & 0xFF,
        (item.size >>> 8) & 0xFF,
        (item.size) & 0xFF,
        (flags.isLeading << 2) | flags.dependsOn, // sample_flags
        (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,
        0x00, 0x00, // sample_degradation_priority
        (item.cts >>> 24) & 0xFF, // sample_composition_time_offset
        (item.cts >>> 16) & 0xFF,
        (item.cts >>> 8) & 0xFF,
        (item.cts) & 0xFF
      ]))
      // writeOffset += 16
      // buffer.write(Buffer.writeUint32(0));
    })
    return buffer.buffer
  }
  static sdtp (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    buffer.write(Fmp4.size(12 + data.samples.length), Fmp4.type('sdtp'), Fmp4.extension(0, 0))
    data.samples.forEach(item => {
      const flags = item.flags
      const num = (flags.isLeading << 6) | // is_leading: 2 (bit)
        (flags.dependsOn << 4) | // sample_depends_on
        (flags.isDependedOn << 2) | // sample_is_depended_on
        (flags.hasRedundancy)// sample_has_redundancy

      buffer.write(new Uint8Array([num]))
    })
    return buffer.buffer
  }
  static mdat (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let size = 8
    data.samples.forEach(item => {
      size += item.size
    })
    buffer.write(Fmp4.size(size), Fmp4.type('mdat'))
    let mdatBox = new Uint8Array(size)
    let offset = 0
    mdatBox.set(buffer.buffer, offset)
    offset += 8
    data.samples.forEach(item => {
      item.buffer.forEach((unit) => {
        mdatBox.set(unit, offset)
        offset += unit.byteLength
        // buffer.write(unit.data);
      })
    })
    return mdatBox
  }
}
Fmp4.type = (name) => {
  return new Uint8Array([name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)])
}
Fmp4.sequence = 1

/* harmony default export */ __webpack_exports__["default"] = (Fmp4);


/***/ }),

/***/ "../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Mp4Remuxer; });
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fmp4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fmp4 */ "../xgplayer-remux/src/mp4/fmp4.js");



const REMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].REMUX_EVENTS

class Mp4Remuxer {
  constructor () {
    this._dtsBase = 0
    this._isDtsBaseInited = false

    this.isFirstVideo = true
    this.isFirstAudio = true

    this.videoAllDuration = 0
    this.audioAllDuration = 0
  }

  init () {
    this.on(REMUX_EVENTS.REMUX_MEDIA, this.remux.bind(this))
    this.on(REMUX_EVENTS.REMUX_METADATA, this.onMetaDataReady.bind(this))
    this.on(REMUX_EVENTS.DETECT_CHANGE_STREAM, this.resetDtsBase.bind(this))
  }

  destroy () {
    this._dtsBase = -1
    this._dtsBaseInited = false
  }

  reset () {
    this._dtsBase = 0
    this._isDtsBaseInited = false
  }

  remux () {
    const { audioTrack, videoTrack } = this._context.getInstance('TRACKS')
    !this._isDtsBaseInited && this.calcDtsBase(audioTrack, videoTrack)

    this._remuxVideo(videoTrack)
    this._remuxAudio(audioTrack)
  }

  resetDtsBase () {
    // for hls 中途切换 meta后seek
    this._dtsBase = 0
    this._dtsBaseInited = false
  }

  seek () {

  }

  onMetaDataReady (type) {
    let track

    if (type === 'audio') {
      const { audioTrack } = this._context.getInstance('TRACKS')
      track = audioTrack;
    } else {
      const { videoTrack } = this._context.getInstance('TRACKS')
      track = videoTrack;
    }

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource(type);
    if (!source) {
      source = presourcebuffer.createSource(type);
    }

    source.mimetype = track.meta.codec;
    source.init = this.remuxInitSegment(type, track.meta);
    // source.inited = false;

    // this.resetDtsBase()
    this.emit(REMUX_EVENTS.INIT_SEGMENT, type)
  }

  remuxInitSegment (type, meta) {
    let initSegment = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let ftyp = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].ftyp()
    let moov = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moov({ type, meta: meta })

    initSegment.write(ftyp, moov)
    return initSegment;
  }

  calcDtsBase (audioTrack, videoTrack) {
    if (!audioTrack.samples.length && !videoTrack.samples.length) {
      return;
    }

    let audioBase = Infinity
    let videoBase = Infinity

    if (audioTrack.samples && audioTrack.samples.length) {
      audioBase = audioTrack.samples[0].dts
    }
    if (videoTrack.samples && videoTrack.samples.length) {
      videoBase = videoTrack.samples[0].dts
    }

    this._dtsBase = Math.min(audioBase, videoBase)
    this._isDtsBaseInited = true
  }

  _remuxVideo (videoTrack) {
    const track = videoTrack

    if (!videoTrack.samples || !videoTrack.samples.length) {
      return
    }

    let {samples} = track
    let firstDts = -1

    let initSegment = null
    const mp4Samples = []
    const mdatBox = {
      samples: []
    }

    while (samples.length) {
      const avcSample = samples.shift()

      const { isKeyframe, options } = avcSample
      if (!this.isFirstAudio && options && options.meta) {
        initSegment = this.remuxInitSegment('video', options.meta)
        options.meta = null
        samples.unshift(avcSample)
        if (!options.isContinue) {
          this.resetDtsBase()
        }
        break;
      }

      let dts = avcSample.dts - this._dtsBase

      if (firstDts === -1) {
        firstDts = dts
      }

      let cts
      let pts
      if (avcSample.pts !== undefined) {
        pts = avcSample.pts - this._dtsBase
        cts = pts - dts
      }
      if (avcSample.cts !== undefined) {
        pts = avcSample.cts + dts
        cts = avcSample.cts
      }

      let mdatSample = {
        buffer: [],
        size: 0
      }
      mdatBox.samples.push(mdatSample)
      mdatSample.buffer.push(avcSample.data)
      mdatSample.size += avcSample.data.byteLength

      let sampleDuration = 0
      if (samples.length >= 1) {
        const nextDts = samples[0].dts - this._dtsBase
        sampleDuration = nextDts - dts
      } else {
        if (mp4Samples.length >= 1) { // lastest sample, use second last duration
          sampleDuration = mp4Samples[mp4Samples.length - 1].duration
        } else { // the only one sample, use reference duration
          sampleDuration = this.videoMeta.refSampleDuration
        }
      }
      this.videoAllDuration += sampleDuration
      // console.log(`dts ${dts}`, `pts ${pts}`, `cts: ${cts}`, `duration: ${sampleDuration}`, avcSample)
      mp4Samples.push({
        dts,
        cts,
        pts,
        data: avcSample.data,
        size: avcSample.data.byteLength,
        isKeyframe,
        duration: sampleDuration,
        flags: {
          isLeading: 0,
          dependsOn: isKeyframe ? 2 : 1,
          isDependedOn: isKeyframe ? 1 : 0,
          hasRedundancy: 0,
          isNonSync: isKeyframe ? 0 : 1
        },
        originDts: dts,
        type: 'video'
      })
    }

    let moofMdat = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    if (mp4Samples.length) {
      const moof = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moof({
        id: track.meta.id,
        time: firstDts,
        samples: mp4Samples
      })
      const mdat = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].mdat(mdatBox)
      moofMdat.write(moof, mdat)

      this.writeToSource('video', moofMdat)
    }

    if (initSegment) {
      this.writeToSource('video', initSegment)

      if (samples.length) {
        // second part of stream change
        track.samples = samples;
        return this._remuxVideo(track)
      }
    }

    this.isFirstVideo = false
    this.emit(REMUX_EVENTS.MEDIA_SEGMENT, 'video')

    const lastSample = mp4Samples[mp4Samples.length - 1]
    this._videoNextDts = lastSample.dts + lastSample.duration;
    track.samples = []
    track.length = 0
  }

  _remuxAudio (track) {
    const {samples} = track
    let firstDts = -1
    let mp4Samples = []

    let initSegment = null
    const mdatBox = {
      samples: []
    }
    if (!samples || !samples.length) {
      return
    }
    let isFirstDtsInited = false
    while (samples.length) {
      let sample = samples.shift()
      const { data, options } = sample
      if (!this.isFirstAudio && options && options.meta) {
        initSegment = this.remuxInitSegment('audio', options.meta)
        options.meta = null;
        samples.unshift(sample)
        if (!options.isContinue) {
          this.resetDtsBase()
        }
        break;
      }

      let dts = sample.dts - this._dtsBase
      const originDts = dts
      if (!isFirstDtsInited) {
        firstDts = dts
        isFirstDtsInited = true
      }

      let sampleDuration = 0

      if (this.audioMeta.refSampleDurationFixed) {
        sampleDuration = this.audioMeta.refSampleDurationFixed
      } else if (samples.length >= 1) {
        const nextDts = samples[0].dts - this._dtsBase;
        sampleDuration = nextDts - dts
      } else {
        if (mp4Samples.length >= 1) { // use second last sample duration
          sampleDuration = mp4Samples[mp4Samples.length - 1].duration
        } else { // the only one sample, use reference sample duration
          sampleDuration = this.audioMeta.refSampleDuration
        }
      }

      // console.log('remux audio ', dts)
      this.audioAllDuration += sampleDuration
      const mp4Sample = {
        dts,
        pts: dts,
        cts: 0,
        size: data.byteLength,
        duration: sample.duration ? sample.duration : sampleDuration,
        flags: {
          isLeading: 0,
          dependsOn: 2,
          isDependedOn: 1,
          hasRedundancy: 0,
          isNonSync: 0
        },
        isKeyframe: true,
        originDts,
        type: 'audio'
      }

      let mdatSample = {
        buffer: [],
        size: 0
      }
      mdatSample.buffer.push(data)
      mdatSample.size += data.byteLength

      mdatBox.samples.push(mdatSample)

      mp4Samples.push(mp4Sample)
    }

    const moofMdat = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()

    if (mp4Samples.length) {
      const moof = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moof({
        id: track.meta.id,
        time: firstDts,
        samples: mp4Samples
      })
      const mdat = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].mdat(mdatBox)
      moofMdat.write(moof, mdat)

      this.writeToSource('audio', moofMdat)
    }

    if (initSegment) {
      this.writeToSource('audio', initSegment)
      if (samples.length) {
        // second part of stream change
        track.samples = samples;
        return this._remuxAudio(track)
      }
    }

    this.isFirstAudio = false
    this.emit(REMUX_EVENTS.MEDIA_SEGMENT, 'audio', moofMdat)

    const lastSample = mp4Samples[mp4Samples.length - 1]
    this._videoNextDts = lastSample.dts + lastSample.duration;
    track.samples = []
    track.length = 0
  }

  writeToSource (type, buffer) {
    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource(type);
    if (!source) {
      source = presourcebuffer.createSource(type);
    }

    source.data.push(buffer)
  }

  initSilentAudio (dts, duration) {
    const unit = Mp4Remuxer.getSilentFrame(this.audioMeta.channelCount)
    return {
      dts,
      pts: dts,
      cts: 0,
      duration,
      unit,
      size: unit.byteLength,
      originDts: dts,
      type: 'video'
    }
  }

  get videoMeta () {
    return this._context.getInstance('TRACKS').videoTrack.meta
  }
  get audioMeta () {
    return this._context.getInstance('TRACKS').audioTrack.meta
  }

  static getSilentFrame (channelCount) {
    if (channelCount === 1) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80])
    } else if (channelCount === 2) {
      return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80])
    } else if (channelCount === 3) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e])
    } else if (channelCount === 4) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38])
    } else if (channelCount === 5) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38])
    } else if (channelCount === 6) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0])
    }
    return null
  }
}


/***/ }),

/***/ "../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Context: __webpack_require__(/*! ./src/context */ "../xgplayer-utils/src/context.js").default,

  // Modules from constants
  EVENTS: __webpack_require__(/*! ./src/constants/events */ "../xgplayer-utils/src/constants/events.js").default,
  WORKER_COMMANDS: __webpack_require__(/*! ./src/constants/worker-commands */ "../xgplayer-utils/src/constants/worker-commands.js").default,

  // Modules from env
  sniffer: __webpack_require__(/*! ./src/env/sniffer */ "../xgplayer-utils/src/env/sniffer.js").default,
  isLe: __webpack_require__(/*! ./src/env/isle */ "../xgplayer-utils/src/env/isle.js").default,
  UTF8: __webpack_require__(/*! ./src/env/utf8 */ "../xgplayer-utils/src/env/utf8.js").default,
  PageVisibility: __webpack_require__(/*! ./src/env/PageVisibility */ "../xgplayer-utils/src/env/PageVisibility.js").default,

  // Models
  MediaInfo: __webpack_require__(/*! ./src/models/media-info */ "../xgplayer-utils/src/models/media-info.js").default,
  MediaSample: __webpack_require__(/*! ./src/models/media-sample */ "../xgplayer-utils/src/models/media-sample.js").default,
  MediaSegment: __webpack_require__(/*! ./src/models/media-segment */ "../xgplayer-utils/src/models/media-segment.js").default,
  MediaSegmentList: __webpack_require__(/*! ./src/models/media-segment-list */ "../xgplayer-utils/src/models/media-segment-list.js").default,
  AudioTrackMeta: __webpack_require__(/*! ./src/models/track-meta */ "../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,
  VideoTrackMeta: __webpack_require__(/*! ./src/models/track-meta */ "../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,
  AudioTrackSample: __webpack_require__(/*! ./src/models/track-sample */ "../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,
  VideoTrackSample: __webpack_require__(/*! ./src/models/track-sample */ "../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,

  // Modules from mse
  Mse: __webpack_require__(/*! ./src/mse/index */ "../xgplayer-utils/src/mse/index.js").default,

  // Modules from write
  Stream: __webpack_require__(/*! ./src/write/stream */ "../xgplayer-utils/src/write/stream.js").default,
  Buffer: __webpack_require__(/*! ./src/write/buffer */ "../xgplayer-utils/src/write/buffer.js").default,

  MobileVideo: __webpack_require__(/*! ./src/mobile/mobile-video */ "../xgplayer-utils/src/mobile/mobile-video.js"),
  // Crypto
  Crypto: __webpack_require__(/*! ./src/crypto */ "../xgplayer-utils/src/crypto/index.js").default
};


/***/ }),

/***/ "../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ResultConstructor) {
  var totalLength = 0;

  for (var _len = arguments.length, arrays = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    arrays[_key - 1] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arrays[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arr = _step.value;

      totalLength += arr.length;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var result = new ResultConstructor(totalLength);
  var offset = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = arrays[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _arr = _step2.value;

      result.set(_arr, offset);
      offset += _arr.length;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
};

/***/ }),

/***/ "../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(/*! ./concat */ "../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js");

var _concat2 = _interopRequireDefault(_concat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _concat2.default;

/***/ }),

/***/ "../xgplayer-utils/node_modules/webworkify-webpack/index.js":
/*!******************************************************************!*\
  !*** ../xgplayer-utils/node_modules/webworkify-webpack/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function webpackBootstrapFunc (modules) {
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      i: moduleId,
/******/      l: false,
/******/      exports: {}
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.l = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }

/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // identity function for calling harmony imports with the correct context
/******/  __webpack_require__.i = function(value) { return value; };

/******/  // define getter function for harmony exports
/******/  __webpack_require__.d = function(exports, name, getter) {
/******/    if(!__webpack_require__.o(exports, name)) {
/******/      Object.defineProperty(exports, name, {
/******/        configurable: false,
/******/        enumerable: true,
/******/        get: getter
/******/      });
/******/    }
/******/  };

/******/  // define __esModule on exports
/******/  __webpack_require__.r = function(exports) {
/******/    Object.defineProperty(exports, '__esModule', { value: true });
/******/  };

/******/  // getDefaultExport function for compatibility with non-harmony modules
/******/  __webpack_require__.n = function(module) {
/******/    var getter = module && module.__esModule ?
/******/      function getDefault() { return module['default']; } :
/******/      function getModuleExports() { return module; };
/******/    __webpack_require__.d(getter, 'a', getter);
/******/    return getter;
/******/  };

/******/  // Object.prototype.hasOwnProperty.call
/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "/";

/******/  // on error function for async loading
/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };

  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)
  return f.default || f // try to call default if defined to also support babel esmodule exports
}

var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+'
var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)' // additional chars when output.pathinfo is true

// http://stackoverflow.com/a/2593661/130442
function quoteRegExp (str) {
  return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
}

function isNumeric(n) {
  return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
}

function getModuleDependencies (sources, module, queueName) {
  var retval = {}
  retval[queueName] = []

  var fnString = module.toString()
  var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/)
  if (!wrapperSignature) return retval
  var webpackRequireName = wrapperSignature[1]

  // main bundle deps
  var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')
  var match
  while ((match = re.exec(fnString))) {
    if (match[3] === 'dll-reference') continue
    retval[queueName].push(match[3])
  }

  // dll deps
  re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g')
  while ((match = re.exec(fnString))) {
    if (!sources[match[2]]) {
      retval[queueName].push(match[1])
      sources[match[2]] = __webpack_require__(match[1]).m
    }
    retval[match[2]] = retval[match[2]] || []
    retval[match[2]].push(match[4])
  }

  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
  var keys = Object.keys(retval);
  for (var i = 0; i < keys.length; i++) {
    for (var j = 0; j < retval[keys[i]].length; j++) {
      if (isNumeric(retval[keys[i]][j])) {
        retval[keys[i]][j] = 1 * retval[keys[i]][j];
      }
    }
  }

  return retval
}

function hasValuesInQueues (queues) {
  var keys = Object.keys(queues)
  return keys.reduce(function (hasValues, key) {
    return hasValues || queues[key].length > 0
  }, false)
}

function getRequiredModules (sources, moduleId) {
  var modulesQueue = {
    main: [moduleId]
  }
  var requiredModules = {
    main: []
  }
  var seenModules = {
    main: {}
  }

  while (hasValuesInQueues(modulesQueue)) {
    var queues = Object.keys(modulesQueue)
    for (var i = 0; i < queues.length; i++) {
      var queueName = queues[i]
      var queue = modulesQueue[queueName]
      var moduleToCheck = queue.pop()
      seenModules[queueName] = seenModules[queueName] || {}
      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue
      seenModules[queueName][moduleToCheck] = true
      requiredModules[queueName] = requiredModules[queueName] || []
      requiredModules[queueName].push(moduleToCheck)
      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)
      var newModulesKeys = Object.keys(newModules)
      for (var j = 0; j < newModulesKeys.length; j++) {
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])
      }
    }
  }

  return requiredModules
}

module.exports = function (moduleId, options) {
  options = options || {}
  var sources = {
    main: __webpack_require__.m
  }

  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)

  var src = ''

  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {
    var entryModule = 0
    while (requiredModules[module][entryModule]) {
      entryModule++
    }
    requiredModules[module].push(entryModule)
    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'
    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\n'
  })

  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'

  var blob = new window.Blob([src], { type: 'text/javascript' })
  if (options.bare) { return blob }

  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL

  var workerUrl = URL.createObjectURL(blob)
  var worker = new window.Worker(workerUrl)
  worker.objectURL = workerUrl

  return worker
}


/***/ }),

/***/ "../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const LOADER_EVENTS = {
  LADER_START: 'LOADER_START',
  LOADER_DATALOADED: 'LOADER_DATALOADED',
  LOADER_COMPLETE: 'LOADER_COMPLETE',
  LOADER_ERROR: 'LOADER_ERROR'
}

const DEMUX_EVENTS = {
  DEMUX_START: 'DEMUX_START',
  DEMUX_COMPLETE: 'DEMUX_COMPLETE',
  DEMUX_ERROR: 'DEMUX_ERROR',
  METADATA_PARSED: 'METADATA_PARSED',
  VIDEO_METADATA_CHANGE: 'VIDEO_METADATA_CHANGE',
  AUDIO_METADATA_CHANGE: 'AUDIO_METADATA_CHANGE',
  MEDIA_INFO: 'MEDIA_INFO'
}

const REMUX_EVENTS = {
  REMUX_METADATA: 'REMUX_METADATA',
  REMUX_MEDIA: 'REMUX_MEDIA',
  MEDIA_SEGMENT: 'MEDIA_SEGMENT',
  REMUX_ERROR: 'REMUX_ERROR',
  INIT_SEGMENT: 'INIT_SEGMENT',
  DETECT_CHANGE_STREAM: 'DETECT_CHANGE_STREAM'
}

const MSE_EVENTS = {
  SOURCE_UPDATE_END: 'SOURCE_UPDATE_END'
}

// hls专有events
const HLS_EVENTS = {
  RETRY_TIME_EXCEEDED: 'RETRY_TIME_EXCEEDED'
}

const CRYTO_EVENTS = {
  START_DECRYPT: 'START_DECRYPT',
  DECRYPTED: 'DECRYPTED'
}

const BROWSER_EVENTS = {
  VISIBILITY_CHANGE: 'VISIBILITY_CHANGE'
}

const ALLEVENTS = Object.assign({}, LOADER_EVENTS, DEMUX_EVENTS, REMUX_EVENTS, MSE_EVENTS, HLS_EVENTS, BROWSER_EVENTS)

const FlvAllowedEvents = []
const HlsAllowedEvents = []

for (let key in ALLEVENTS) {
  if (ALLEVENTS.hasOwnProperty(key)) {
    FlvAllowedEvents.push(ALLEVENTS[key])
  }
}

for (let key in ALLEVENTS) {
  if (ALLEVENTS.hasOwnProperty(key)) {
    HlsAllowedEvents.push(ALLEVENTS[key])
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  ALLEVENTS,
  HLS_EVENTS,
  REMUX_EVENTS,
  DEMUX_EVENTS,
  MSE_EVENTS,
  LOADER_EVENTS,
  FlvAllowedEvents,
  HlsAllowedEvents,
  CRYTO_EVENTS,
  BROWSER_EVENTS
});


/***/ }),

/***/ "../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! exports provided: CONTEXT_COMOMANDS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT_COMOMANDS", function() { return CONTEXT_COMOMANDS; });
const CONTEXT_COMOMANDS = {
  ON: 'on',
  ONCE: 'once',
  OFF: 'off',
  EMIT: 'emit',
  DESTROY: 'destroy'
}


/***/ }),

/***/ "../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_media_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/media-info */ "../xgplayer-utils/src/models/media-info.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "../../node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);



const DIRECT_EMIT_FLAG = '__TO__'

class Context {
  constructor (allowedEvents = []) {
    this._emitter = new events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]()
    this._instanceMap = {} // 所有的解码流程实例
    this._clsMap = {} // 构造函数的map
    this._inited = false
    this.mediaInfo = new _models_media_info__WEBPACK_IMPORTED_MODULE_0__["default"]()
    this.allowedEvents = allowedEvents
    this._hooks = {} // 注册在事件前/后的钩子，例如 before('DEMUX_COMPLETE')
  }

  /**
   * 从上下文中获取解码流程实例，如果没有实例，构造一个
   * @param tag
   * @param args
   * @returns {*}
   */
  getInstance (tag) {
    const instance = this._instanceMap[tag]
    if (instance) {
      return instance
    } else {
      // throw new Error(`${tag}实例尚未初始化`)
      return null
    }
  }

  /**
   * 初始化具体实例
   * @param tag
   * @param args
   */
  initInstance (tag, ...args) {
    if (this._clsMap[tag]) {
      const newInstance = new this._clsMap[tag](...args)
      this._instanceMap[tag] = newInstance
      if (newInstance.init) {
        newInstance.init() // TODO: lifecircle
      }
      return newInstance
    } else {
      throw new Error(`${tag}未在context中注册`)
    }
  }

  /**
   * 避免大量的initInstance调用，初始化所有的组件
   * @param config
   */
  init (config) {
    if (this._inited) {
      return
    }
    for (let tag in this._clsMap) {
      // if not inited, init an instance
      if (this._clsMap.hasOwnProperty(tag) && !this._instanceMap[tag]) {
        this.initInstance(tag, config)
      }
    }
    this._inited = true
  }

  /**
   * 注册一个上下文流程，提供安全的事件发送机制
   * @param tag
   * @param cls
   */
  registry (tag, cls) {
    const emitter = this._emitter
    const checkMessageName = this._isMessageNameValid.bind(this)
    const self = this
    const enhanced = class extends cls {
      constructor (...args) {
        super(...args)
        this.listeners = {}
        this.onceListeners = {}
        this.TAG = tag
        this._context = self
      }

      on (messageName, callback) {
        checkMessageName(messageName)

        if (this.listeners[messageName]) {
          this.listeners[messageName].push(callback)
        } else {
          this.listeners[messageName] = [callback]
        }

        emitter.on(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback) // 建立定向通信监听
        return emitter.on(messageName, callback)
      }

      /**
       * 在某个事件触发前执行
       * @param messageName
       * @param callback
       */
      before (messageName, callback) {
        checkMessageName(messageName)
        if (self._hooks[messageName]) {
          self._hooks[messageName].push(callback)
        } else {
          self._hooks[messageName] = [callback]
        }
      }

      once (messageName, callback) {
        checkMessageName(messageName)

        if (this.onceListeners[messageName]) {
          this.onceListeners[messageName].push(callback)
        } else {
          this.onceListeners[messageName] = [callback]
        }

        emitter.once(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
        return emitter.once(messageName, callback)
      }

      emit (messageName, ...args) {
        checkMessageName(messageName)

        const beforeList = self._hooks ? self._hooks[messageName] : null

        if (beforeList) {
          for (let i = 0, len = beforeList.length; i < len; i++) {
            const callback = beforeList[i]
            callback()
          }
        }
        return emitter.emit(messageName, ...args)
      }

      /**
       * 定向发送给某个组件单例的消息
       * @param messageName
       * @param args
       */
      emitTo (tag, messageName, ...args) {
        checkMessageName(messageName)

        return emitter.emit(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, ...args)
      }

      off (messageName, callback) {
        checkMessageName(messageName)
        return emitter.off(messageName, callback)
      }

      removeListeners () {
        const hasOwn = Object.prototype.hasOwnProperty.bind(this.listeners)

        for (let messageName in this.listeners) {
          if (hasOwn(messageName)) {
            const callbacks = this.listeners[messageName] || []
            for (let i = 0; i < callbacks.length; i++) {
              const callback = callbacks[i]
              emitter.off(messageName, callback)
              emitter.off(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
            }
          }
        }

        for (let messageName in this.onceListeners) {
          if (hasOwn(messageName)) {
            const callbacks = this.onceListeners[messageName] || []
            for (let i = 0; i < callbacks.length; i++) {
              const callback = callbacks[i]
              emitter.off(messageName, callback)
              emitter.off(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
            }
          }
        }
      }

      /**
       * 在组件销毁时，默认将它注册的事件全部卸载，确保不会造成内存泄漏
       */
      destroy () {
        // step1 unlisten events
        this.removeListeners()
        this.listeners = {}

        // step2 release from context
        delete self._instanceMap[tag]
        if (super.destroy) {
          return super.destroy()
        }
      }
    }
    this._clsMap[tag] = enhanced

    /**
     * get instance immediately
     * e.g const instance = context.registry(tag, Cls)(config)
     * */
    return (...args) => {
      return this.initInstance(tag, ...args)
    }
  }

  /**
   * 对存在的实例进行
   */
  destroyInstances () {
    Object.keys(this._instanceMap).forEach((tag) => {
      if (this._instanceMap[tag].destroy) {
        this._instanceMap[tag].destroy()
      }
    })
  }

  /**
   * 编解码流程无需关注事件的解绑
   */
  destroy () {
    this._emitter = null
    this.allowedEvents = []
    this._clsMap = null
    this._context = null
    this._hooks = null
    this.destroyInstances()
  }

  /**
   * 对信道进行收拢
   * @param messageName
   * @private
   */
  _isMessageNameValid (messageName) {
    if (!this.allowedEvents.indexOf(messageName) < 0) {
      throw new Error(`unregistered message name: ${messageName}`)
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Context);


/***/ }),

/***/ "../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/crypto/index.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/events */ "../xgplayer-utils/src/constants/events.js");

const CRYTO_EVENTS = _constants_events__WEBPACK_IMPORTED_MODULE_0__["default"].CRYTO_EVENTS
class Crypto {
    constructor(config) {
        this.inputBuffer = config.inputbuffer;
        this.outputBuffer = config.outputbuffer;
        this.key = config.key;
        this.iv = config.iv;
        this.method = config.method;

        this.crypto =  window.crypto || window.msCrypto
    }

    init() {
        this.on(CRYTO_EVENTS.START_DECRYPT, this.decript.bind(this));
    }
    
    decript() {
        if(!this.aeskey) {
            let sbkey = this.crypto.subtle.importKey('raw', this.key.buffer, { name: 'AES-CBC' }, false, ['encrypt', 'decrypt']);
            sbkey.then(key => {
                this.aeskey = key;
                this.decriptData();
            }) 
        } else {
            this.decriptData();
        }
    }

    decriptData() {
        let inputbuffer = this._context.getInstance(this.inputBuffer);
        let outputbuffer = this._context.getInstance(this.outputBuffer);
        let data = inputbuffer.shift();
        if(data) {
            this.crypto.subtle.decrypt({ name: 'AES-CBC', iv: this.iv.buffer }, this.aeskey, data).then(res=>{
                outputbuffer.push(new Uint8Array(res));
                this.emit(CRYTO_EVENTS.DECRYPTED);
                this.decriptData(data);
            });
        }
    }
}
/* harmony default export */ __webpack_exports__["default"] = (Crypto);

/***/ }),

/***/ "../xgplayer-utils/src/env/PageVisibility.js":
/*!***************************************************!*\
  !*** ../xgplayer-utils/src/env/PageVisibility.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/events */ "../xgplayer-utils/src/constants/events.js");

const BROWSER_EVENTS = _constants_events__WEBPACK_IMPORTED_MODULE_0__["default"].BROWSER_EVENTS

let hidden;
let visibilityChange;
if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support
  hidden = 'hidden';
  visibilityChange = 'visibilitychange';
} else if (typeof document.msHidden !== 'undefined') {
  hidden = 'msHidden';
  visibilityChange = 'msvisibilitychange';
} else if (typeof document.webkitHidden !== 'undefined') {
  hidden = 'webkitHidden';
  visibilityChange = 'webkitvisibilitychange';
}

class PageVisibility {

  constructor () {
    this.callbacks = {
      onShow: [],
      onHidden: []
    }
    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)
    this.init();
  }

  init () {
    document.addEventListener(visibilityChange, this.handleVisibilityChange, false);
  }

  handleVisibilityChange () {
    this.emit(BROWSER_EVENTS.VISIBILITY_CHANGE, document[hidden])
  }

  destroy () {
    document.removeEventListener(visibilityChange, this.handleVisibilityChange);
  }

}

/* harmony default export */ __webpack_exports__["default"] = (PageVisibility);


/***/ }),

/***/ "../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const le = (function () {
  const buf = new ArrayBuffer(2);
  (new DataView(buf)).setInt16(0, 256, true) // little-endian write
  return (new Int16Array(buf))[0] === 256 // platform-spec read, if equal then LE
})()

/* harmony default export */ __webpack_exports__["default"] = (le);


/***/ }),

/***/ "../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const le = (function () {
  const buf = new ArrayBuffer(2);
  (new DataView(buf)).setInt16(0, 256, true) // little-endian write
  return (new Int16Array(buf))[0] === 256 // platform-spec read, if equal then LE
})()

const sniffer = {
  get device () {
    let r = sniffer.os;
    return r.isPc ? 'pc' : r.isTablet ? 'tablet' : 'mobile';
  },
  get browser () {
    let ua = navigator.userAgent.toLowerCase();
    let reg = {
      ie: /rv:([\d.]+)\) like gecko/,
      firfox: /firefox\/([\d.]+)/,
      chrome: /chrome\/([\d.]+)/,
      opera: /opera.([\d.]+)/,
      safari: /version\/([\d.]+).*safari/
    };
    return [].concat(Object.keys(reg).filter(key => reg[key].test(ua)))[0];
  },
  get os () {
    let ua = navigator.userAgent
    let isWindowsPhone = /(?:Windows Phone)/.test(ua)
    let isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone;
    let isAndroid = /(?:Android)/.test(ua);
    let isFireFox = /(?:Firefox)/.test(ua);
    let isTablet = /(?:iPad|PlayBook)/.test(ua) || (isAndroid && !/(?:Mobile)/.test(ua)) || (isFireFox && /(?:Tablet)/.test(ua));
    let isPhone = /(?:iPhone)/.test(ua) && !isTablet;
    let isPc = !isPhone && !isAndroid && !isSymbian;
    return {
      isTablet,
      isPhone,
      isAndroid,
      isPc,
      isSymbian,
      isWindowsPhone,
      isFireFox
    };
  },

  get isLe () {
    return le
  }
};

/* harmony default export */ __webpack_exports__["default"] = (sniffer);


/***/ }),

/***/ "../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class UTF8 {
  static decode (uint8array) {
    const out = [];
    const input = uint8array;
    let i = 0;
    const length = uint8array.length;

    while (i < length) {
      if (input[i] < 0x80) {
        out.push(String.fromCharCode(input[i]));
        ++i;
        continue;
      } else if (input[i] < 0xC0) {
        // fallthrough
      } else if (input[i] < 0xE0) {
        if (UTF8._checkContinuation(input, i, 1)) {
          const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);
          if (ucs4 >= 0x80) {
            out.push(String.fromCharCode(ucs4 & 0xFFFF));
            i += 2;
            continue;
          }
        }
      } else if (input[i] < 0xF0) {
        if (UTF8._checkContinuation(input, i, 2)) {
          const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;
          if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {
            out.push(String.fromCharCode(ucs4 & 0xFFFF));
            i += 3;
            continue;
          }
        }
      } else if (input[i] < 0xF8) {
        if (UTF8._checkContinuation(input, i, 3)) {
          let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |
                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);
          if (ucs4 > 0x10000 && ucs4 < 0x110000) {
            ucs4 -= 0x10000;
            out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));
            out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));
            i += 4;
            continue;
          }
        }
      }
      out.push(String.fromCharCode(0xFFFD));
      ++i;
    }

    return out.join('');
  }

  static _checkContinuation (uint8array, start, checkLength) {
    let array = uint8array;
    if (start + checkLength < array.length) {
      while (checkLength--) {
        if ((array[++start] & 0xC0) !== 0x80) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (UTF8);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/audio-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/audio-context.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "../../node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);

class AudioCtx extends events__WEBPACK_IMPORTED_MODULE_0___default.a {
  constructor (config) {
    super();
    this.config = Object.assign({}, config);
    let AudioContext = window.AudioContext || window.webkitAudioContext;
    this.context = new AudioContext();
    this.gainNode = this.context.createGain();
    this.gainNode.connect(this.context.destination);
    this.meta = undefined;
    this.samples = [];
    this.preloadTime = this.config.preloadTime || 3;
    this.duration = 0;

    this._currentBuffer = undefined;
    this._nextBuffer = undefined;
    this._lastpts = undefined;
    this._preDecode = [];
    this._currentTime = 0;
    this._decoding = false;
    this._volume = this.config.volume || 0.6
    // 记录外部传输的状态
    this._played = false;
    this.playFinish = null; // pending play task
    this.waitNextID = null; // audio source end and next source not loaded
  }

  get currentTime () {
    return this._currentTime;
  }

  decodeAudio (audioTrack) {
    let {samples} = audioTrack;
    let data = samples;
    audioTrack.samples = [];
    this.setAudioData(data);
  }
  setAudioData (data) {
    for (let i = 0; i < data.length; i++) {
      data[i].pts = (data[i].pts === undefined) ? data[i].dts : data[i].pts;
      this._preDecode.push(data[i]);
    }
    if (this._preDecode.length > 0) {
      if (this._lastpts === undefined) {
        this._lastpts = this._preDecode[0].pts;
      }
      if ((this._preDecode[this._preDecode.length - 1].pts - this._lastpts) / 1000 > this.preloadTime) {
        this.decodeAAC();
      }
    }
  }

  decodeAAC () {
    if (this._decoding) {
      return;
    }
    this._decoding = true;
    let data = this._preDecode;
    let samples = [];
    let _this = this;
    let sample = data.shift();
    while (sample) {
      let sampleData = AudioCtx.getAACData(this.meta, sample)
      samples.push(sampleData);
      this._lastpts = sample.pts;
      sample = data.shift()
    }
    let buffer = AudioCtx.combileData(samples);
    try {
      this.context.decodeAudioData(buffer.buffer, function (buffer) {
        let audioSource = _this.context.createBufferSource();
        audioSource.buffer = buffer;
        // audioSource.onended = _this.onSourceEnded.bind(_this);
        _this.samples.push({
          time: _this.duration,
          duration: buffer.duration,
          data: audioSource
        })

        _this.duration += buffer.duration;

        if (!_this._currentBuffer) {
          _this._currentBuffer = _this.getTimeBuffer(_this.currentTime);
        }

        if (!_this._nextBuffer && _this._currentBuffer) {
          _this._nextBuffer = _this.getTimeBuffer(_this.currentTime + _this._currentBuffer.duration);
        }
        _this._decoding = false;

        if ((_this._preDecode.length > 0 && _this._preDecode[_this._preDecode.length - 1].pts - _this._lastpts) / 1000 >= _this.preloadTime) {
          _this.decodeAAC();
        }

        if (_this.playFinish) {
          _this.playFinish()
        }
      }, (e) => {
        console.error(e)
      })
    } catch (err) {
      console.error(err);
    }
  }

  onSourceEnded () {
    if (!this._nextBuffer || !this._played) {
      this.waitNextID = setTimeout(() => {
        this.onSourceEnded();
      }, 200);
      return;
    }
    let audioSource = this._nextBuffer.data;
    audioSource.start();
    audioSource.connect(this.gainNode);
    let _this = this;
    setTimeout(() => {
      _this.onSourceEnded.call(this);
    }, audioSource.buffer.duration * 1000 - 10);
    this._currentBuffer = this._nextBuffer;
    this._currentTime = this._currentBuffer.time;
    this._nextBuffer = this.getTimeBuffer(this.currentTime);
    if (this._currentBuffer) {
      this._nextBuffer = this.getTimeBuffer(this.currentTime + this._currentBuffer.duration);
    }
    this.emit('AUDIO_SOURCE_END')
  }

  play () {
    if (this.playFinish) {
      return;
    }
    this._played = true;
    if (this.context.state === 'suspended') {
      this.context.resume()
    }
    let _this = this;
    const playStart = () => {
      let audioSource = this._currentBuffer.data;
      audioSource.connect(this.gainNode);
      audioSource.start();
      setTimeout(() => {
        _this.onSourceEnded.call(this);
      }, audioSource.buffer.duration * 1000 - 10);
    }

    if (!this._currentBuffer) {
      return new Promise((resolve) => {
        this.playFinish = resolve;
      }).then(() => {
        this.playFinish = null;
        playStart()
      });
    } else {
      playStart();
      return Promise.resolve()
    }
<<<<<<< HEAD
  }

  pause () {
    const audioCtx = this.context;
    if (audioCtx.state === 'running') {
      audioCtx.suspend()
    }
  }

=======
  }

  pause () {
    const audioCtx = this.context;
    if (audioCtx.state === 'running') {
      audioCtx.suspend()
    }
  }

>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
  getTimeBuffer (time) {
    let ret;
    for (let i = 0; i < this.samples.length; i++) {
      let sample = this.samples[i]
      if (sample.time <= time && (sample.time + sample.duration) > time) {
        ret = sample;
        break;
      }
    }
    return ret;
  }

  setAudioMetaData (meta) {
    this.meta = meta;
  }

  destroy () {
    if (this.waitNextID) {
      window.clearTimeout(this.waitNextID)
    }
    this.context.close();
  }

  set muted (val) {
    if (val) {
      this.gainNode.gain.value = 0
    } else {
      this.gainNode.gain.value = this._volume
    }
  }

  get volume () {
    return this._volume
  }

  set volume (val) {
    if (val < 0) {
      this._volume = 0;
      this.gainNode.gain.value = 0
      return;
    } else if (val > 1) {
      this._volume = 1;
      this.gainNode.gain.value = 1
      return;
    }

    this._volume = val;
    this.gainNode.gain.value = val
  }

  static getAACData (meta, sample) {
    let buffer = new Uint8Array(sample.data.byteLength + 7);
    let adts = AudioCtx.getAdts(meta, sample.data);
    buffer.set(adts);
    buffer.set(sample.data, 7);
    return buffer;
  }

  static combileData (samples) {
    // get length
    let length = 0;
    for (let i = 0, k = samples.length; i < k; i++) {
      length += samples[i].byteLength;
    }

    let ret = new Uint8Array(length);
    let offset = 0;
    // combile data;
    for (let i = 0, k = samples.length; i < k; i++) {
      ret.set(samples[i], offset);
      offset += samples[i].byteLength;
    }
    return ret;
  }

  static getAdts (meta, data) {
    let adts = new Uint8Array(7);

    // 设置同步位 0xfff 12bit
    adts[0] = 0xff;
    adts[1] = 0xf0;

    // Object data (没什么人用MPEG-2了，HLS和FLV也全是MPEG-4，这里直接0)  1bit
    // Level always 00 2bit
    // CRC always 1 1bit
    adts[1] = adts[1] | 0x01;

    // profile 2bit
    adts[2] = 0xc0 & ((meta.objectType - 1) << 6);

    // sampleFrequencyIndex
    adts[2] = adts[2] | (0x3c & (meta.sampleRateIndex << 2))

    // private bit 0 1bit
    // chanel configuration 3bit
    adts[2] = adts[2] | (0x01 & meta.channelCount >> 2);
    adts[3] = 0xc0 & (meta.channelCount << 6);

    // original_copy: 0 1bit
    // home: 0 1bit

    // adts_variable_header()
    // copyrighted_id_bit 0 1bit
    // copyrighted_id_start 0 1bit

    // aac_frame_length 13bit;
    let aacframelength = data.byteLength + 7;

    adts[3] = adts[3] | (0x03 & aacframelength >> 11);
    adts[4] = 0xff & (aacframelength >> 3);
    adts[5] = 0xe0 & (aacframelength << 5);

    // adts_buffer_fullness 0x7ff 11bit
    adts[5] = adts[5] | 0x1f
    adts[6] = 0xfc;

    // number_of_raw_data_blocks_in_frame 0 2bit;
    return adts;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (AudioCtx);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/mobile-video.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/mobile-video.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _video_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./video-context */ "../xgplayer-utils/src/mobile/video-context.js");
/* harmony import */ var _audio_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audio-context */ "../xgplayer-utils/src/mobile/audio-context.js");
/* harmony import */ var _ticker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ticker */ "../xgplayer-utils/src/mobile/ticker.js");



/**
 * 音画同步调和器
 */
class AVReconciler {
  constructor (props) {
    this.aCtx = props.aCtx;
    this.vCtx = props.vCtx;
    this.video = props.video
    this.timeoutId = null
    this.start = null
  }

  doReconcile () {
    const vCurTime = (this.vCtx.currentTime || 0);
    const aCurTime = (this.aCtx.currentTime || 0) * 1000;

    const gap = vCurTime - aCurTime;
    if (this.timeoutId) {
      return;
    }
    if (gap > 200) { // audio delayed for more than 100ms
      this.video.start += gap
      this.vCtx.pause()
      this.timeoutId = setTimeout(() => {
        this.vCtx.play()
        this.timeoutId = null
      }, gap)
    } else if (gap < -120) {
      this.video.start += gap
    }
  }

  destroy () {
    this.start = null
    this.aCtx = null
    this.vCtx = null
  }
}

// eslint-disable-next-line no-undef
class MobileVideo extends HTMLElement {
  constructor () {
    super();
    this._canvas = document.createElement('canvas')
    this.handleAudioSourceEnd = this.handleAudioSourceEnd.bind(this)
    this.played = false;
    this.pendingPlayTask = null
    this._paused = true;
    this.videoMetaInited = false;
    this.audioMetaInited = false;
    this.init()
  }
<<<<<<< HEAD

  init () {
    this.vCtx = new _video_context__WEBPACK_IMPORTED_MODULE_0__["default"](Object.assign({
      canvas: this._canvas
    }, { style: { width: this.width, height: this.height } }));
    this.aCtx = new _audio_context__WEBPACK_IMPORTED_MODULE_1__["default"]({});
    this.ticker = new (Object(_ticker__WEBPACK_IMPORTED_MODULE_2__["getTicker"])())()
    this.reconciler = new AVReconciler({
      vCtx: this.vCtx,
      aCtx: this.aCtx,
      video: this
    })
=======

  init () {
    this.vCtx = new _video_context__WEBPACK_IMPORTED_MODULE_0__["default"](Object.assign({
      canvas: this._canvas
    }, { style: { width: this.width, height: this.height } }));
    this.aCtx = new _audio_context__WEBPACK_IMPORTED_MODULE_1__["default"]({});
    this.ticker = new (Object(_ticker__WEBPACK_IMPORTED_MODULE_2__["getTicker"])())()
    this.reconciler = new AVReconciler({
      vCtx: this.vCtx,
      aCtx: this.aCtx,
      video: this
    })

    this.dispatchEvent(new Event('waiting'));
>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
    this.vCtx.oncanplay = () => {
      if (!this.played) {
        this.appendChild(this._canvas);
      }
      this.dispatchEvent(new Event('canplay'));
    }

    this.aCtx.on('AUDIO_SOURCE_END', this.handleAudioSourceEnd)
  }

  handleAudioSourceEnd () {
    this.reconciler.doReconcile()
    this.vCtx.cleanBuffer();
  }
<<<<<<< HEAD

  _cleanBuffer () {
    this.vCtx.cleanBuffer()
  }

=======

  _cleanBuffer () {
    this.vCtx.cleanBuffer()
  }

>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
  destroy () {
    this.aCtx.destroy()
    this.vCtx.destroy()
    this.ticker.stop()
    this.start = null;
    this.reconciler.destroy()
    this.aCtx = null;
    this.vCtx = null;
    this.ticker = null;
  }

  onDemuxComplete (videoTrack, audioTrack) {
    this.aCtx.decodeAudio(audioTrack);
    this.vCtx.decodeVideo(videoTrack);
  }

  setAudioMeta (meta) {
    if (this.audioMetaInited) {
      this.aCtx.destroy();
      this.aCtx = new _audio_context__WEBPACK_IMPORTED_MODULE_1__["default"]({});
    }
    this.aCtx.setAudioMetaData(meta);
    this.audioMetaInited = true;
  }

  setVideoMeta (meta) {
    if (this.videoMetaInited) {
      this.vCtx.destroy();
      this.vCtx = new _video_context__WEBPACK_IMPORTED_MODULE_0__["default"](Object.assign({
        canvas: this._canvas
      }, { style: { width: this.width, height: this.height } }));
    }
    this.vCtx.setVideoMetaData(meta);
    this.videoMetaInited = true;
  }

  get width () {
    return this.getAttribute('width') || this.videoWidth
  }

  set width (val) {
    this.style.display = 'inline-block'
    const pxVal = typeof val === 'number' ? `${val}px` : val
    this.setAttribute('width', pxVal)
    this.style.width = pxVal
    this._canvas.style.width = pxVal;
    this._canvas.width = val;
  }

  get height () {
    return this.getAttribute('height')
  }

  set height (val) {
    this.style.display = 'inline-block'
    const pxVal = typeof val === 'number' ? `${val}px` : val
    this.setAttribute('height', pxVal)
    this.style.height = pxVal
    this._canvas.style.height = pxVal;
    this._canvas.height = val;
  }

  get videoWidth () {
    if (this.vCtx && this.vCtx.videoWidth) {
      return this.vCtx.videoWidth
    }
    return 0
  }

  get videoHeight () {
    if (this.vCtx && this.vCtx.videoHeight) {
      return this.vCtx.videoHeight
    }
    return 0
  }

  get src () {
    return this.getAttribute('src');
  }

  set src (val) {
    this.setAttribute('src', val);
  }

  get readyState () {
    return this.videoMetaInited ? this.vCtx.readyState : 0
  }

  get seeking () {
    return this.videoMetaInited ? this.vCtx.seeking : false
  }

  get currentTime () {
    return this.videoMetaInited ? this.vCtx.currentTime / 1000 : 0
  }

  get duration () {
    return this.audioMetaInited ? this.aCtx.duration : 0
  }

  get paused () {
    return this._paused
  }

  get playbackRate () {
    if (this.hasAttribute('playbackRate')) {
      return this.getAttribute('playbackRate')
    } else {
      return 1.0
    }
  }
<<<<<<< HEAD

  set playbackRate (val) {
    this.setAttribute('playbackrate', val);
    this.aCtx.playbackRate = val;
    this.vCtx.playbackRate = val;

    this.dispatchEvent(new Event('ratechange'))
  }

  get ended () {
    if (this.audioMetaInited) {
      return this.aCtx.ended;
    }
    return false;
  }

=======

  set playbackRate (val) {
    this.setAttribute('playbackrate', val);
    this.aCtx.playbackRate = val;
    this.vCtx.playbackRate = val;

    this.dispatchEvent(new Event('ratechange'))
  }

  get ended () {
    if (this.audioMetaInited) {
      return this.aCtx.ended;
    }
    return false;
  }

>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
  get autoplay () {
    if (this.hasAttribute('autoplay')) {
      return this.getAttribute('autoplay')
    } else {
      return false
    }
  }
  set autoplay (value) {
    this.setAttribute('autoplay', value)
  }
  play () {
    if (this.pendingPlayTask) {
      return;
    }

    if (this.played) {
      this.destroy()
      this.init()
    }
    this.pendingPlayTask = Promise.all([
      this.vCtx.play(),
      this.aCtx.play().then(() => {
        this.aCtx.muted = true
      })
    ]).then(() => {
      this.aCtx.muted = false
      this.ticker.start(() => {
        if (!this.start) {
          this.start = Date.now()
        }
        this._currentTime = Date.now() - this.start
        this.vCtx._onTimer(this._currentTime)
      })

      this.pendingPlayTask = null
      this.played = true;
<<<<<<< HEAD
=======
      this.dispatchEvent(new Event('playing'))
>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
      this.dispatchEvent(new Event('play'))
      this._paused = false
    })
  }

  pause () {
    this._paused = true;
    this.aCtx.pause()
    this.vCtx.pause()

    this.dispatchEvent(new Event('pause'))
  }

  get volume () {
    return this.aCtx.volume
  }

  set volume (vol) {
    this.setAttribute('volume', vol);
    this.aCtx.volume = vol
  }

  get muted () {
    const attrMuted = this.getAttribute('muted') === 'true'
    if (attrMuted !== undefined) {
      return attrMuted;
    } else if (this.getAttribute('volume')) {
      return Number.parseInt(this.getAttribute('volume')) === 0
    } else {
      return false
    }
  }

  set muted (val) {
    this.setAttribute('muted', val);
    if (!val) {
      this.aCtx.muted = false
    } else {
      this.aCtx.muted = true
    }
  }

  get error () {
    return this.vCtx.error || this.aCtx.error;
  }

  get buffered () {
    return this.vCtx.buffered
  }
}
// eslint-disable-next-line no-undef
customElements.define('mobile-video', MobileVideo);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/sourcebuffer.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/sourcebuffer.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class SourceBuffer {
  constructor (config) {
    this.config = Object.assign({}, config);
    this.type = this.config.type;
    this.buffer = [];
    this.currentGop = undefined;
    this._lastGet = undefined;
  }

  push (frame) {
    if (this.type === 'video') {
      if (frame.isKeyframe) {
        let currentGop = {
          samples: [],
          start: frame.dts,
          end: frame.dts,
          nextGop: undefined
        };
        if (this.currentGop) {
          this.currentGop.nextGop = currentGop;
        }
        this.currentGop = currentGop;
        this.buffer.push(this.currentGop);
      }

      if (this.currentGop) {
        this.currentGop.samples.push(frame);

        if (frame.dts < this.currentGop.start) {
          this.currentGop.start = frame.dts;
        }

        if (frame.dts > this.currentGop.end) {
          this.currentGop.end = frame.dts;
        }
      }
    }
  }

  get (time) {
    if (this.type === 'video') {
      if (this.buffer.length < 1) {
        return;
      }

      if (time === undefined) {
        let sample = this._getNext();
        return sample;
      }
    }
  }

  _getNext () {
    if (!this._lastGet) {
      let gop = this.buffer[0];
      if (gop.samples.length < 1) {
        return
      }

      this._lastGet = {
        gop,
        index: 0
      }
      return gop.samples[0];
    } else {
      let gop = this._lastGet.gop;
      let sample = gop.samples[this._lastGet.index + 1];
      if (sample) {
        this._lastGet.index = this._lastGet.index + 1;
        return sample;
      } else {
        gop = gop.nextGop;
        if (!gop || gop.samples.length < 1) {
          return;
        }
        sample = gop.samples[0];
        this._lastGet = {
          gop,
          index: 0
        }
        return sample;
      }
    }
  }

  remove (start, end) {
    if (this.buffer.length < 0) {
      return;
    }

    let i = 0;
    let gop = this.buffer[0];
    while (gop) {
      if (gop.end < end && gop.start >= start) {
        this.buffer.splice(i, 1)
        gop = this.buffer[i];
      } else {
        i += 1;
        gop = this.buffer[i];
      }
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (SourceBuffer);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/ticker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/ticker.js ***!
  \**********************************************/
/*! exports provided: getTicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTicker", function() { return getTicker; });
/**
 * @author fuyuhao@bytedance.com
 */

class Ticker {
  constructor (options) {
    this.options = Object.assign({}, options || {}, {
      interval: 16
    })

    this.callbacks = []
  }

  start(...callbacks) {
    this.callbacks = callbacks
  }

  onTick () {
    for (let i = 0, len = this.callbacks.length; i < len; i++) {
      const callback = this.callbacks[i]
      callback()
    }
  }

  setInterval (interval) {
    this.options.interval = interval
    return this;
  }
}

/**
 * ticker use requestAnimationFrame
 */
class RafTicker extends Ticker {
  constructor (props) {
    super(props);
    this.prev = null;
    this.timerId = null
    this._subTimerId = null

    this._tickFunc = RafTicker.getTickFunc()
    this.tick = this.tick.bind(this)
  }

  start (...callbacks) {
    super.start(...callbacks)
    this.tick()
  }

  tick () {
    this.nextTick();
    this.onTick()
  }

  nextTick () {
    const { _tickFunc } = this;
    this.timerId = _tickFunc(this.tick)
  }

  stop () {
    if (this.timerId) {
      const cancelFunc = RafTicker.getCancelFunc()

      cancelFunc(this.timerId)
    }
  }

  resume() {
    this.nextTick();
  }

  static getTickFunc () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame
  }

  static getCancelFunc () {
    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame
  }

  static isSupported () {
    return RafTicker.getTickFunc() !== undefined
  }
}

/**
 * use setTimeout for browsers without raf support
 */
class TimeoutTicker extends Ticker {
  constructor(config) {
    super(config)
    this.timeoutId = null

  }

  start (...callbacks) {
    super.nextTick(...callbacks)
    this.timeoutId = window.setInterval(() => {
      this.onTick();
    }, this.options.interval || 16)
  }

  stop () {
    if (this.timeoutId) {
      window.clearInterval(this.timeoutId)
    }
  }

}

/**
 * 返回Ticker构造函数
 * @returns {Ticker}
 */
const getTicker = () => {
  if (RafTicker.isSupported()) {
    return RafTicker
  } else {
    return TimeoutTicker
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/mobile/video-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/video-context.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworkify-webpack */ "../xgplayer-utils/node_modules/webworkify-webpack/index.js");
/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _write_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../write/stream */ "../xgplayer-utils/src/write/stream.js");
/* harmony import */ var _xgplayer_codec_src_h264_nalunit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../xgplayer-codec/src/h264/nalunit */ "../xgplayer-codec/src/h264/nalunit/index.js");
/* harmony import */ var _yuv_canvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./yuv-canvas */ "../xgplayer-utils/src/mobile/yuv-canvas.js");
/* harmony import */ var _sourcebuffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sourcebuffer */ "../xgplayer-utils/src/mobile/sourcebuffer.js");
/* harmony import */ var _models_TimeRanges__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/TimeRanges */ "../xgplayer-utils/src/models/TimeRanges.js");







class VideoCanvas {
  constructor (config) {
    this.config = Object.assign({}, config);
    this.canvas = this.config.canvas ? this.config.canvas : document.createElement('canvas');
    this.source = new _sourcebuffer__WEBPACK_IMPORTED_MODULE_4__["default"]({type: 'video'});
    this.preloadTime = this.config.preloadTime || 3;
    this.oncanplay = undefined;
    this.onFirstFrame = undefined;
    this.meta = undefined;
    this.readyStatus = 0;
    this.paused = true;
    this.count = 0;
    this.currentTime = 0;
    this.lastPlayed = 0;

    this._decoderInited = false;
    this._avccpushed = false;
    this._decodedFrames = {};
    this._lastSampleDts = undefined;
    this._baseDts = undefined;
    this._lastRenderTime = null
    this.playFinish = null

  }

  pause () {
    this.paused = true;
  }

  initWasmWorker () {
    let _this = this;
    this.wasmworker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default()(/*require.resolve*/(/*! ./worker.js */ "../xgplayer-utils/src/mobile/worker.js"));
    this.wasmworker.postMessage({
      msg: 'init',
      meta: this.meta
    })
    this.wasmworker.addEventListener('message', msg => {
      switch (msg.data.msg) {
        case 'DECODER_READY':
          _this._decoderInited = true;
          break;
        case 'DECODED':
          this._onDecoded(msg.data);
          break;
      }
    });
  }

  setVideoMetaData (meta) {
    this.meta = meta;
    if (!this._decoderInited) {
      this.initWasmWorker();
      return
    }
    this._avccpushed = true;
    let data = new Uint8Array(meta.sps.byteLength + 4);
    data.set([0, 0, 0, 1])
    data.set(meta.sps, 4);
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data
    })

    data = new Uint8Array(meta.pps.byteLength + 4);
    data.set([0, 0, 0, 1])
    data.set(meta.pps, 4);
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data
    })

    if (!this.yuvCanvas) {
      let config = Object.assign({meta, canvas: this.canvas}, this.config);
      this.yuvCanvas = new _yuv_canvas__WEBPACK_IMPORTED_MODULE_3__["default"](config);
    }
    this.readyStatus = 1;
  }

  decodeVideo (videoTrack) {
    if (!this._decoderInited) {
      return
    }

    if (!this._avccpushed) {
      this.setVideoMetaData(this.meta);
    }
    let { samples } = videoTrack;
    let sample = samples.shift();

    while (sample) {
      if (!this._baseDts) {
        this._baseDts = sample.dts;
      }
      this.source.push(sample);
      sample = samples.shift();
    }

    this._preload();
  }

  _preload () {
    if (!this._lastSampleDts || this._lastSampleDts - this._baseDts < this.currentTime + this.preloadTime * 1000) {
      let sample = this.source.get();
      if (sample) {
        this._lastSampleDts = sample.dts;
        this._analyseNal(sample);
      }

      while (sample && this._lastSampleDts - this._baseDts < this.currentTime + this.preloadTime * 1000) {
        sample = this.source.get();
        if (sample) {
          this._analyseNal(sample);
          this._lastSampleDts = sample.dts;
        }
      }
    }
  }

  _analyseNal (sample) {
    let nals = _xgplayer_codec_src_h264_nalunit__WEBPACK_IMPORTED_MODULE_2__["default"].getAvccNals(new _write_stream__WEBPACK_IMPORTED_MODULE_1__["default"](sample.data.buffer));

    let length = 0;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      length += nal.body.byteLength + 4;
    }
    let offset = 0;
    let data = new Uint8Array(length);
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      data.set([0, 0, 0, 1], offset);
      offset += 4;
      data.set(new Uint8Array(nal.body), offset);
      offset += nal.body.byteLength;
    }
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data,
      info: {
        dts: sample.dts,
        pts: sample.pts ? sample.pts : sample.dts + sample.cts,
        key: sample.isKeyframe
      }
    })
  }

  _onDecoded (data) {
    let {dts} = data.info
    this._decodedFrames[dts] = data;
    if (Object.keys(this._decodedFrames).length > 10) {
      if (this.playFinish) {
        this.playFinish()
      }
      if (this.oncanplay) {
        this.oncanplay();
      }
    }
<<<<<<< HEAD
  }

  play () {
    this.paused = false;
    return new Promise((resolve) => {
      this.playFinish = resolve
    }).then(() => {
      this.playFinish = null
    })
  }

=======
  }

  play () {
    this.paused = false;
    return new Promise((resolve) => {
      this.playFinish = resolve
    }).then(() => {
      this.playFinish = null
    })
  }

>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
  _onTimer (currentTime) {
    if (this.paused) {
      return;
    }
    if (this.meta) {
      if (this.meta.frameRate && this.meta.frameRate.fixed && this.meta.frameRate.fps) {
      }
      let frameTimes = Object.keys(this._decodedFrames);
      if (frameTimes.length > 0) {
        this.currentTime = currentTime;
        let frameTime = -1;
        for (let i = 0; i < frameTimes.length && Number.parseInt(frameTimes[i]) - this._baseDts <= this.currentTime; i++) {
          frameTime = Number.parseInt(frameTimes[i - 1]);
        }

        let frame = this._decodedFrames[frameTime];
        if (frame) {
          this.yuvCanvas.render(frame.buffer, frame.width, frame.height, frame.yLinesize, frame.uvLinesize);
        }
        for (let i = 0; i < frameTimes.length; i++) {
          if (Number.parseInt(frameTimes[i]) < frameTime) {
            delete this._decodedFrames[frameTimes[i]];
          }
        }
      }
    }
    this._lastRenderTime = Date.now()
  }

  cleanBuffer () {
    if (this.currentTime > 1) {
      this.source.remove(0, this.currentTime - 1);
    }
<<<<<<< HEAD
  }

  destroy () {
    this.wasmworker.postMessage({msg: 'destroy'})
    this.wasmworker = null;
    this.canvas = null
    this.source = null
    this._decoderInited = false;
  }

=======
  }

  destroy () {
    this.wasmworker.postMessage({msg: 'destroy'})
    this.wasmworker = null;
    this.canvas = null
    this.source = null
    this._decoderInited = false;
  }

>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
  get buffered () {
    const ranges = []
    let currentRange = {
      start: null,
      end: null
    }
    for (let i = 0; i < this.source.buffer.length; i++) {
      const { start, end } = this.source.buffer[i];
      if (!currentRange.start) {
        currentRange.start = start;
      }
      if (!currentRange.end) {
        currentRange.end = end;
      }

      if (start - currentRange.end > 1000) {
        currentRange.start = currentRange.start / 1000
        currentRange.end = currentRange.end / 1000
        currentRange = {
          start,
          end
        }
      } else {
        currentRange.end = end
      }
    }

    if (currentRange.start !== null && currentRange.end !== null) {
      currentRange.start = currentRange.start / 1000
      currentRange.end = currentRange.end / 1000
      ranges.push(currentRange)
    }

    return new _models_TimeRanges__WEBPACK_IMPORTED_MODULE_5__["default"](ranges)
  }

}
/* harmony default export */ __webpack_exports__["default"] = (VideoCanvas);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/worker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/worker.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

const MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;
var Decoder = function (self) {
  this.inited = false;
  this.self = self;
  this.meta = this.self.meta;
  this.infolist = {};
  self.par_broadwayOnBroadwayInited = this.broadwayOnBroadwayInited.bind(this);
  self.par_broadwayOnPictureDecoded = this.broadwayOnPictureDecoded.bind(this);
}

Decoder.prototype.toU8Array = function (ptr, length) {
  return this.self.HEAPU8.subarray(ptr, ptr + length);
}

Decoder.prototype.init = function () {
  Module._broadwayInit();
  this.streamBuffer = this.toU8Array(Module._broadwayCreateStream(MAX_STREAM_BUFFER_LENGTH), MAX_STREAM_BUFFER_LENGTH);
}

Decoder.prototype.broadwayOnPictureDecoded = function (offset, width, height, yLinesize, uvLinesize, infoid) {
  let info = Object.assign({}, this.infolist[infoid]);
  let yRowcount = height;
  let uvRowcount = height / 2;
  if (this.meta.chromaFormat === 444 || this.meta.chromaFormat === 422) {
    uvRowcount = height;
  }
  let data = this.toU8Array(offset, (yLinesize * yRowcount) + 2 * (uvLinesize * uvRowcount));
  this.infolist[infoid] = null;
  let datetemp = new Uint8Array(data.length);
  datetemp.set(data);
  let buffer = datetemp.buffer;
  this.self.postMessage({
    msg: 'DECODED',
    width,
    height,
    yLinesize,
    uvLinesize,
    info,
    buffer
  }, [buffer]);
}

Decoder.prototype.broadwayOnBroadwayInited = function () {
  this.inited = true;
  this.self.postMessage({msg: 'DECODER_READY'});
}

Decoder.prototype.decode = function (data, info) {
  let time = parseInt(new Date().getTime());
  let infoid = time - (Math.floor(time / 10e8) * 10e8);
  this.infolist[infoid] = info;
  this.streamBuffer.set(data);
  Module._broadwayPlayStream(data.length, infoid);
}

Decoder.prototype.destroy = function () {
  Module._broadwayExit();
}

var decoder;

function onPostRun () {
  decoder = new Decoder(this);
  decoder.init();
}

function init (meta) {
  self.importScripts('https://sf1-vcloudcdn.pstatp.com/obj/ttfe/media/decoder/h264/decoder.js');
  addOnPostRun(onPostRun.bind(self));
}

module.exports = function (self) {
  self.addEventListener('message', function (e) {
    var data = e.data;
    if (!data.msg) {
      self.postMessage({
        msg: 'ERROR:invalid message'
      })
    } else {
      switch (data.msg) {
        case 'init':
          console.log(data);
          self.meta = data.meta;
          init()
          break;
        case 'decode':
          decoder.decode(data.data, data.info);
          break;
        case 'destory':
          decoder.destroy();
          break
        default:
          break;
      }
    }
  }, false);
}


/***/ }),

/***/ "../xgplayer-utils/src/mobile/yuv-canvas.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/mobile/yuv-canvas.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class YUVCanvas {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.canvas = this.configs.canvas;
    this.meta = Object.assign({}, this.configs.meta);
    this.chroma = this.meta.chromaFormat;
    this.height = this.meta.presentHeight;
    this.width = this.meta.presentWidth;
    // this.canvas.width = this.meta.presentWidth;
    // this.canvas.height = this.meta.presentHeight;
    // this.canvas.style.width = configs.style.width;
    // this.canvas.style.height = configs.style.height;
    this._initContextGL();
    if (this.contextGL) {
      this._initProgram();
      this._initBuffers();
      this._initTextures();
    };
  }

  _initContextGL () {
    var canvas = this.canvas;
    var gl = null;

    var validContextNames = ['webgl', 'experimental-webgl', 'moz-webgl', 'webkit-3d'];
    var nameIndex = 0;

    while (!gl && nameIndex < validContextNames.length) {
      var contextName = validContextNames[nameIndex];

      try {
        if (this.contextOptions) {
          gl = canvas.getContext(contextName, this.contextOptions);
        } else {
          gl = canvas.getContext(contextName);
        };
      } catch (e) {
        gl = null;
      }

      if (!gl || typeof gl.getParameter !== 'function') {
        gl = null;
      }

      ++nameIndex;
    };

    this.contextGL = gl;
  };

  _initProgram () {
    var gl = this.contextGL;

    // vertex shader is the same for all types
    var vertexShaderScript;
    var fragmentShaderScript;
    vertexShaderScript = [
      'attribute vec4 vertexPos;',
      'attribute vec4 texturePos;',
      'attribute vec4 uTexturePos;',
      'attribute vec4 vTexturePos;',
      'varying vec2 textureCoord;',
      'varying vec2 uTextureCoord;',
      'varying vec2 vTextureCoord;',

      'void main()',
      '{',
      '  gl_Position = vertexPos;',
      '  textureCoord = texturePos.xy;',
      '  uTextureCoord = uTexturePos.xy;',
      '  vTextureCoord = vTexturePos.xy;',
      '}'
    ].join('\n');

    fragmentShaderScript = [
      'precision highp float;',
      'varying highp vec2 textureCoord;',
      'varying highp vec2 uTextureCoord;',
      'varying highp vec2 vTextureCoord;',
      'uniform sampler2D ySampler;',
      'uniform sampler2D uSampler;',
      'uniform sampler2D vSampler;',
      'uniform mat4 YUV2RGB;',

      'void main(void) {',
      '  highp float y = texture2D(ySampler,  textureCoord).r;',
      '  highp float u = texture2D(uSampler,  uTextureCoord).r;',
      '  highp float v = texture2D(vSampler,  vTextureCoord).r;',
      '  gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;',
      '}'
    ].join('\n');

    var YUV2RGB = [
      1.16438, 0.00000, 1.59603, -0.87079,
      1.16438, -0.39176, -0.81297, 0.52959,
      1.16438, 2.01723, 0.00000, -1.08139,
      0, 0, 0, 1
    ];
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexShaderScript);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
      console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(vertexShader));
    }

    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentShaderScript);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
      console.log('Fragment shader failed to compile: ' + gl.getShaderInfoLog(fragmentShader));
    }

    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.log('Program failed to compile: ' + gl.getProgramInfoLog(program));
    }

    gl.useProgram(program);

    var YUV2RGBRef = gl.getUniformLocation(program, 'YUV2RGB');
    gl.uniformMatrix4fv(YUV2RGBRef, false, YUV2RGB);

    this.shaderProgram = program;
  }

  _initBuffers () {
    var gl = this.contextGL;
    var program = this.shaderProgram;

    var vertexPosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]), gl.STATIC_DRAW);

    var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
    gl.enableVertexAttribArray(vertexPosRef);
    gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);

    var texturePosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

    var texturePosRef = gl.getAttribLocation(program, 'texturePos');
    gl.enableVertexAttribArray(texturePosRef);
    gl.vertexAttribPointer(texturePosRef, 2, gl.FLOAT, false, 0, 0);

    this.texturePosBuffer = texturePosBuffer;

    var uTexturePosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, uTexturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

    var uTexturePosRef = gl.getAttribLocation(program, 'uTexturePos');
    gl.enableVertexAttribArray(uTexturePosRef);
    gl.vertexAttribPointer(uTexturePosRef, 2, gl.FLOAT, false, 0, 0);

    this.uTexturePosBuffer = uTexturePosBuffer;

    var vTexturePosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vTexturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

    var vTexturePosRef = gl.getAttribLocation(program, 'vTexturePos');
    gl.enableVertexAttribArray(vTexturePosRef);
    gl.vertexAttribPointer(vTexturePosRef, 2, gl.FLOAT, false, 0, 0);

    this.vTexturePosBuffer = vTexturePosBuffer;
  };

  _initTextures () {
    var gl = this.contextGL;
    var program = this.shaderProgram;
    var yTextureRef = this._initTexture();
    var ySamplerRef = gl.getUniformLocation(program, 'ySampler');
    gl.uniform1i(ySamplerRef, 0);
    this.yTextureRef = yTextureRef;

    var uTextureRef = this._initTexture();
    var uSamplerRef = gl.getUniformLocation(program, 'uSampler');
    gl.uniform1i(uSamplerRef, 1);
    this.uTextureRef = uTextureRef;

    var vTextureRef = this._initTexture();
    var vSamplerRef = gl.getUniformLocation(program, 'vSampler');
    gl.uniform1i(vSamplerRef, 2);
    this.vTextureRef = vTextureRef;
  }

  _initTexture () {
    var gl = this.contextGL;

    var textureRef = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, textureRef);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindTexture(gl.TEXTURE_2D, null);

    return textureRef;
  }

  _drawPictureGL (data, width, height, yLinesize, uvLinesize) {
    var ylen = yLinesize * height;
    var uvlen = uvLinesize * height / 2;
    if (this.chroma === 444 || this.chroma === 422) {
      uvlen *= 2;
    }
    data = new Uint8Array(data);
    let renderData = {
      yData: data.subarray(0, ylen),
      uData: data.subarray(ylen, ylen + uvlen),
      vData: data.subarray(ylen + uvlen, ylen + uvlen + uvlen)
    }
    this._drawPictureGL420(renderData, width, height, yLinesize, uvLinesize);
  }

  _drawPictureGL420 (data, width, height, yLinesize, uvLinesize) {
    var gl = this.contextGL;
    var texturePosBuffer = this.texturePosBuffer;
    var uTexturePosBuffer = this.uTexturePosBuffer;
    var vTexturePosBuffer = this.vTexturePosBuffer;

    var yTextureRef = this.yTextureRef;
    var uTextureRef = this.uTextureRef;
    var vTextureRef = this.vTextureRef;

    var yData = data.yData;
    var uData = data.uData;
    var vData = data.vData;

    var yDataPerRow = yLinesize;
    var yRowCnt = height;

    var uDataPerRow = width / 2;
    var uRowCnt = height / 2;

    if (this.chroma === 422 || this.chroma === 444) {
      uRowCnt = height;
    }

    var vDataPerRow = uvLinesize;
    var vRowCnt = uRowCnt;

    let ratiow = this.canvas.width / this.width;
    let ratioh = this.canvas.height / this.height;
    let left = 0;
    let top = 0;
    let w = this.canvas.width;
    let h = this.canvas.height;
    if (ratiow < ratioh) {
      h = (this.height * this.canvas.width / this.width);
      top = parseInt((this.canvas.height - (this.height * this.canvas.width / this.width)) / 2);
    } else {
      w = (this.width * this.canvas.height / this.height);
      left = parseInt((this.canvas.width - (this.width * this.canvas.height / this.height)) / 2);
    }
    gl.viewport(left, top, w, h);

    var texturePosValues = new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]);
    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);

    var uTexturePosValues = new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]);
    gl.bindBuffer(gl.ARRAY_BUFFER, uTexturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, uTexturePosValues, gl.DYNAMIC_DRAW);

    var vTexturePosValues = new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]);
    gl.bindBuffer(gl.ARRAY_BUFFER, vTexturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, vTexturePosValues, gl.DYNAMIC_DRAW);

    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, yDataPerRow, yRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, yData);

    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, uDataPerRow, uRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uData);
    
    gl.activeTexture(gl.TEXTURE2);
    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, vDataPerRow, vRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, vData);

    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  }

  _drawPictureRGB (data) {

  }

  render (data, width, height, yLinesize, uvLinesize) {
    var gl = this.contextGL;
    if (gl) {
      this._drawPictureGL(data, width, height, yLinesize, uvLinesize);
    } else {
      this._drawPictureRGB(data);
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (YUVCanvas);


/***/ }),

/***/ "../xgplayer-utils/src/models/TimeRanges.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/TimeRanges.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TimeRanges; });
class TimeRanges {
  constructor (ranges) {
    this.ranges = ranges || [];
  }

  start (idx) {
    return this.ranges[idx] ? this.ranges[idx].start : 0
  }

  end (idx) {
    return this.ranges[idx] ? this.ranges[idx].end : 0
  }

  add (range) {
    this.ranges.push(range)
  }

  get length () {
    return this.ranges.length
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaInfo; });
const isObjectFilled = (obj) => {
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      if (obj[key] === null) {
        return false
      }
    }
  }
  return true
}

class MediaInfo {
  constructor () {
    this.mimeType = null
    this.duration = null

    this.hasVideo = null
    this.video = {
      codec: null,
      width: null,
      height: null,
      profile: null,
      level: null,
      frameRate: {
        fixed: true,
        fps: 25,
        fps_num: 25000,
        fps_den: 1000
      },
      chromaFormat: null,
      parRatio: {
        width: 1,
        height: 1
      }
    }

    this.hasAudio = null

    this.audio = {
      codec: null,
      sampleRate: null,
      sampleRateIndex: null,
      channelCount: null
    }
  }

  isComplete () {
    return MediaInfo.isBaseInfoReady(this) && MediaInfo.isVideoReady(this) && MediaInfo.isAudioReady(this)
  }

  static isBaseInfoReady (mediaInfo) {
    return isObjectFilled(mediaInfo)
  }

  static isVideoReady (mediaInfo) {
    if (!mediaInfo.hasVideo) {
      return true
    }

    return isObjectFilled(mediaInfo.video)
  }

  static isAudioReady (mediaInfo) {
    if (!mediaInfo.hasAudio) {
      return true
    }

    return isObjectFilled(mediaInfo.video)
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSample; });
class MediaSample {
  constructor (info) {
    let _default = MediaSample.getDefaultInf()

    if (!info || Object.prototype.toString.call(info) !== '[object Object]') {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    Object.entries(sample).forEach(([k, v]) => {
      this[k] = v
    })
  }

  static getDefaultInf () {
    return {
      dts: null,
      pts: null,
      duration: null,
      position: null,
      isRAP: false, // is Random access point
      originDts: null
    }
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSegmentList; });
class MediaSegmentList {

    constructor (type) {
        this._type = type;
        this._list = [];
        this._lastAppendLocation = -1; // cached last insert location
    }

    get type () {
        return this._type;
    }

    get length () {
        return this._list.length;
    }

    isEmpty () {
        return this._list.length === 0;
    }

    clear () {
        this._list = [];
        this._lastAppendLocation = -1;
    }

    _searchNearestSegmentBefore (beginDts) {
        let list = this._list;
        if (list.length === 0) {
            return -2;
        }
        let last = list.length - 1;
        let mid = 0;
        let lbound = 0;
        let ubound = last;

        let idx = 0;

        if (beginDts < list[0].originDts) {
            idx = -1;
            return idx;
        }

        while (lbound <= ubound) {
            mid = lbound + Math.floor((ubound - lbound) / 2);
            if (mid === last || (beginDts > list[mid].lastSample.originDts
                    && (beginDts < list[mid + 1].originDts))) {
                idx = mid;
                break;
            } else if (list[mid].originDts < beginDts) {
                lbound = mid + 1;
            } else {
                ubound = mid - 1;
            }
        }
        return idx;
    }

    _searchNearestSegmentAfter (beginDts) {
        return this._searchNearestSegmentBefore(beginDts) + 1;
    }

    append (segment) {
        let list = this._list;
        let lastAppendIdx = this._lastAppendLocation;
        let insertIdx = 0;

        if (lastAppendIdx !== -1 && lastAppendIdx < list.length
            && segment.originStartDts >= list[lastAppendIdx].lastSample.originDts
            && ((lastAppendIdx === list.length - 1)
                || (lastAppendIdx < list.length - 1
                    && segment.originStartDts < list[lastAppendIdx + 1].originStartDts))) {
            insertIdx = lastAppendIdx + 1; // use cached location idx
        } else {
            if (list.length > 0) {
                insertIdx = this._searchNearestSegmentBefore(segment.originStartDts) + 1;
            }
        }

        this._lastAppendLocation = insertIdx;
        this._list.splice(insertIdx, 0, segment);
    }

    getLastSegmentBefore (beginDts) {
        let idx = this._searchNearestSegmentBefore(beginDts);
        if (idx >= 0) {
            return this._list[idx];
        } else { // -1
            return null;
        }
    }

    getLastSampleBefore (beginDts) {
        let segment = this.getLastSegmentBefore(beginDts);
        if (segment !== null) {
            return segment.lastSample;
        } else {
            return null;
        }
    }

    getLastRAPBefore (beginDts) {
        let segmentIdx = this._searchNearestSegmentBefore(beginDts);
        let randomAccessPoints = this._list[segmentIdx].randomAccessPoints;
        while (randomAccessPoints.length === 0 && segmentIdx > 0) {
            segmentIdx--;
            randomAccessPoints = this._list[segmentIdx].randomAccessPoints;
        }
        if (randomAccessPoints.length > 0) {
            return randomAccessPoints[randomAccessPoints.length - 1];
        } else {
            return null;
        }
    }

}

/***/ }),

/***/ "../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSegment; });
class MediaSegment {
    constructor () {
        this.startDts = -1;
        this.endDts = -1;
        this.startPts = -1;
        this.endPts = -1;
        this.originStartDts = -1;
        this.originEndDts = -1;
        this.randomAccessPoints = [];
        this.firstSample = null;
        this.lastSample = null;
    }

    addRAP (sample) {
        sample.isRAP = true;
        this.randomAccessPoints.push(sample);
    }
}

/***/ }),

/***/ "../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! exports provided: AudioTrackMeta, VideoTrackMeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrackMeta", function() { return AudioTrackMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrackMeta", function() { return VideoTrackMeta; });
class AudioTrackMeta {
  constructor (meta) {
    const _default = {
      sampleRate: 48000,
      channelCount: 2,
      codec: 'mp4a.40.2',
      config: [41, 401, 136, 0],
      duration: 0,
      id: 2,
      refSampleDuration: 21,
      sampleRateIndex: 3,
      timescale: 1000,
      type: 'audio'
    }
    if (meta) {
      return Object.assign({}, _default, meta)
    }
    return _default
  }

  destroy () {
    this.init = null
  }
}

class VideoTrackMeta {
  constructor (meta) {
    const _default = {
      avcc: null,
      sps: new Uint8Array(0),
      pps: new Uint8Array(0),
      chromaFormat: 420,
      codec: 'avc1.640020',
      codecHeight: 720,
      codecWidth: 1280,
      duration: 0,
      frameRate: {
        fixed: true,
        fps: 25,
        fps_num: 25000,
        fps_den: 1000
      },
      id: 1,
      level: '3.2',
      presentHeight: 720,
      presentWidth: 1280,
      profile: 'High',
      refSampleDuration: 40,
      parRatio: {
        height: 1,
        width: 1
      },
      timescale: 1000,
      type: 'video'
    }

    if (meta) {
      return Object.assign({}, _default, meta)
    }
    return _default
  }

  destroy () {
    this.init = null
    this.sps = null
    this.pps = null
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! exports provided: AudioTrackSample, VideoTrackSample */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrackSample", function() { return AudioTrackSample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrackSample", function() { return VideoTrackSample; });
class AudioTrackSample {
  constructor (info) {
    let _default = AudioTrackSample.getDefault()
    if (!info) {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    return sample
  }

  static getDefault () {
    return {
      dts: null,
      pts: null,
      data: new Uint8Array()
    }
  }
}

class VideoTrackSample {
  constructor (info) {
    let _default = VideoTrackSample.getDefault()

    if (!info) {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    return sample
  }

  static getDefault () {
    return {
      dts: null,
      pts: null,
      isKeyframe: false, // is Random access point
      originDts: null,
      data: new Uint8Array()
    }
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class MSE {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.container = this.configs.container;
    this.mediaSource = null;
    this.sourceBuffers = {};
    this.preloadTime = this.configs.preloadTime || 1;
    this.onSourceOpen = this.onSourceOpen.bind(this)
    this.onTimeUpdate = this.onTimeUpdate.bind(this)
    this.onUpdateEnd = this.onUpdateEnd.bind(this)
    this.onWaiting = this.onWaiting.bind(this)
  }

  init () {
    // eslint-disable-next-line no-undef
    this.mediaSource = new self.MediaSource();
    this.mediaSource.addEventListener('sourceopen', this.onSourceOpen);
    this.container.src = URL.createObjectURL(this.mediaSource);
    this.url = this.container.src;
    this.container.addEventListener('timeupdate', this.onTimeUpdate);
    this.container.addEventListener('waiting', this.onWaiting);
  }

  onTimeUpdate () {
    this.emit('TIME_UPDATE', this.container);
  }

  onWaiting () {
    this.emit('WAITING', this.container);
  }

  onSourceOpen () {
    this.addSourceBuffers();
  }

  onUpdateEnd () {
    this.emit('SOURCE_UPDATE_END');
    this.doAppend()
  }
  addSourceBuffers () {
    if (this.mediaSource.readyState !== 'open') {
      return;
    }
    let sources = this._context.getInstance('PRE_SOURCE_BUFFER');
    let tracks = this._context.getInstance('TRACKS');
    let track;

    sources = sources.sources;
    let add = false;
    for (let i = 0, k = Object.keys(sources).length; i < k; i++) {
      let type = Object.keys(sources)[i];
      if (type === 'audio') {
        track = tracks.audioTrack;
      } else if (type === 'video') {
        track = tracks.videoTrack;
        // return;
      }
      if (track) {
        let dur = type === 'audio' ? 21 : 40;
        if (track.meta && track.meta.refSampleDuration) dur = track.meta.refSampleDuration;
        if (sources[type].data.length >= (this.preloadTime / dur)) {
          add = true;
        }
      }
    }

    if (add) {
      if (Object.keys(this.sourceBuffers).length > 0) {
        return;
      }
      for (let i = 0, k = Object.keys(sources).length; i < k; i++) {
        let type = Object.keys(sources)[i];
        let source = sources[type]
        let mime = (type === 'video') ? 'video/mp4;codecs=' + source.mimetype : 'audio/mp4;codecs=' + source.mimetype
        let sourceBuffer = this.mediaSource.addSourceBuffer(mime);
        this.sourceBuffers[type] = sourceBuffer;
        sourceBuffer.addEventListener('updateend', this.onUpdateEnd);
        this.doAppend();
      }
    }
  }

  doAppend () {
    let sources = this._context.getInstance('PRE_SOURCE_BUFFER');
    if (sources) {
      for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
        let type = Object.keys(this.sourceBuffers)[i]
        let sourceBuffer = this.sourceBuffers[type];
        if (!sourceBuffer.updating) {
          let source = sources.sources[type];
          if (source && !source.inited) {
            // console.log('append initial segment')
            sourceBuffer.appendBuffer(source.init.buffer.buffer);
            source.inited = true;
          } else if (source) {
            let data = source.data.shift()
            if (data) {
              sourceBuffer.appendBuffer(data.buffer.buffer);
            }
          }
        }
      }
    }
  }

  endOfStream () {
    const { readyState, activeSourceBuffers } = this.mediaSource;
    if (readyState === 'open' && activeSourceBuffers.length === 0) {
      try {
        this.mediaSource.endOfStream()
      } catch (e) {
        // log
      }
    }
  }

  remove (end, start = 0) {
    for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
      let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      if (!buffer.updating) {
        // console.log(start, end)
        buffer.remove(start, end);
      }
    }
  }
  removeBuffers () {
    const taskList = []
    for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
      let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      buffer.removeEventListener('updateend', this.onUpdateEnd);

      let task;
      if (buffer.updating) {
        task = new Promise((resolve) => {
          const doCleanBuffer = function () {
            let retryTime = 3

            const clean = () => {
              if (!buffer.updating) {
                MSE.clearBuffer(buffer)
                resolve()
              } else if (retryTime > 0){
                setTimeout(clean, 200)
                retryTime--
              } else {
                resolve()
              }
            }

            setTimeout(clean, 200)
            buffer.removeEventListener('updateend', doCleanBuffer)
          }
          buffer.addEventListener('updateend', doCleanBuffer)
        })
      } else {
        MSE.clearBuffer(buffer)
        task = Promise.resolve()
      }

      taskList.push(task)
    }

    return Promise.all(taskList)
  }

  destroy () {
    return this.removeBuffers().then(() => {
      for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
        let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
        this.mediaSource.removeSourceBuffer(buffer);
        delete this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      }

      this.container.removeEventListener('timeupdate', this.onTimeUpdate);
      this.container.removeEventListener('waiting', this.onWaiting);
      this.mediaSource.removeEventListener('sourceopen', this.onSourceOpen);

      this.endOfStream()
      window.URL.revokeObjectURL(this.url);

      this.url = null
      this.configs = {};
      this.container = null;
      this.mediaSource = null;
      this.sourceBuffers = {};
      this.preloadTime = 1;
    })
  }

  static clearBuffer (buffer) {
    const buffered = buffer.buffered;
    let bEnd = 0.1
    for (let i = 0, len = buffered.length; i < len; i++) {
      bEnd = buffered.end(i)
    }
    try {
      buffer.remove(0, bEnd)
    } catch (e) {
      // DO NOTHING
    }
  }
}
/* harmony default export */ __webpack_exports__["default"] = (MSE);


/***/ }),

/***/ "../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var concat_typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! concat-typed-array */ "../xgplayer-utils/node_modules/concat-typed-array/lib/index.js");
/* harmony import */ var concat_typed_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(concat_typed_array__WEBPACK_IMPORTED_MODULE_0__);


class Buffer {
  constructor (buffer) {
    this.buffer = buffer || new Uint8Array(0)
  }

  write (...buffer) {
    buffer.forEach(item => {
      this.buffer = concat_typed_array__WEBPACK_IMPORTED_MODULE_0___default()(Uint8Array, this.buffer, item)
    })
  }

  static writeUint32 (value) {
    return new Uint8Array([
      value >> 24,
      (value >> 16) & 0xff,
      (value >> 8) & 0xff,
      value & 0xff
    ])
  }

  static readAsInt (arr) {
    let temp = ''

    function padStart4Hex (hexNum) {
      let hexStr = hexNum.toString(16)
      return hexStr.padStart(2, '0')
    }

    arr.forEach(num => {
      temp += padStart4Hex(num)
    })
    return parseInt(temp, 16)
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Buffer);


/***/ }),

/***/ "../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Stream {
  constructor (buffer) {
    if (buffer instanceof ArrayBuffer) {
      this.buffer = buffer;
      this.dataview = new DataView(buffer);
      this.dataview.position = 0;
    } else {
      throw new Error('data is invalid');
    }
  }

  get length () {
    return this.buffer.byteLength;
  }

  set position (value) {
    this.dataview.position = value;
  }

  get position () {
    return this.dataview.position;
  }

  back (count) {
    this.position -= count;
  }

  skip (count) {
    let loop = Math.floor(count / 4);
    let last = count % 4;
    for (let i = 0; i < loop; i++) {
      Stream.readByte(this.dataview, 4);
    }
    if (last > 0) {
      Stream.readByte(this.dataview, last);
    }
  }

  /**
   * [readByte 从DataView中读取数据]
   * @param  {DataView} buffer [DataView实例]
   * @param  {Number} size   [读取字节数]
   * @return {Number}        [整数]
   */
  static readByte (buffer, size, sign) {
    let res;
    switch (size) {
      case 1:
        if (sign) {
          res = buffer.getInt8(buffer.position);
        } else {
          res = buffer.getUint8(buffer.position);
        }
        break;
      case 2:
        if (sign) {
          res = buffer.getInt16(buffer.position);
        } else {
          res = buffer.getUint16(buffer.position);
        }
        break;
      case 3:
        if (sign) {
          throw new Error('not supported for readByte 3');
        } else {
          res = buffer.getUint8(buffer.position) << 16;
          res |= buffer.getUint8(buffer.position + 1) << 8;
          res |= buffer.getUint8(buffer.position + 2);
        }
        break;
      case 4:
        if (sign) {
          res = buffer.getInt32(buffer.position);
        } else {
          res = buffer.getUint32(buffer.position);
        }
        break;
      case 8:
        if (sign) {
          throw new Error('not supported for readBody 8');
        } else {
          res = buffer.getUint32(buffer.position) << 32;
          res |= buffer.getUint32(buffer.position + 4);
        }
        break;
      default:
        res = '';
    }
    buffer.position += size;
    return res;
  }

  readUint8 () {
    return Stream.readByte(this.dataview, 1);
  }

  readUint16 () {
    return Stream.readByte(this.dataview, 2);
  }

  readUint24 () {
    return Stream.readByte(this.dataview, 3);
  }

  readUint32 () {
    return Stream.readByte(this.dataview, 4);
  }

  readUint64 () {
    return Stream.readByte(this.dataview, 8);
  }

  readInt8 () {
    return Stream.readByte(this.dataview, 1, true);
  }
  readInt16 () {
    return Stream.readByte(this.dataview, 2, true);
  }

  readInt32 () {
    return Stream.readByte(this.dataview, 4, true);
  }

  writeUint32 (value) {
    return new Uint8Array([
      value >>> 24 & 0xff,
      value >>> 16 & 0xff,
      value >>> 8 & 0xff,
      value & 0xff
    ]);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Stream);


/***/ }),

<<<<<<< HEAD
/***/ "../xgplayer/dist/index.js":
/*!*********************************!*\
  !*** ../xgplayer/dist/index.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():undefined}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}({"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/skin/style/index.scss":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--5-1!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/skin/style/index.scss ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */function(e,t,n){(e.exports=n(/*! ../../../node_modules/css-loader/lib/css-base.js */"./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,'.xgplayer-skin-default{background:#000;width:100%;height:100%;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;-ms-user-select:none}.xgplayer-skin-default *{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}.xgplayer-skin-default.xgplayer-is-fullscreen{width:100%!important;height:100%!important;padding-top:0!important;z-index:9999}.xgplayer-skin-default.xgplayer-is-fullscreen.xgplayer-inactive{cursor:none}.xgplayer-skin-default video{width:100%;height:100%;outline:none}.xgplayer-skin-default .xgplayer-none{display:none}@-webkit-keyframes loadingRotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes loadingRotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes loadingDashOffset{0%{stroke-dashoffset:236}to{stroke-dashoffset:0}}@keyframes loadingDashOffset{0%{stroke-dashoffset:236}to{stroke-dashoffset:0}}.xgplayer-skin-default .xgplayer-play,.xgplayer-skin-default .xgplayer-play-img{position:relative;-webkit-order:0;-moz-box-ordinal-group:1;order:0;display:block;cursor:pointer}.xgplayer-skin-default .xgplayer-play-img .xgplayer-icon,.xgplayer-skin-default .xgplayer-play .xgplayer-icon{margin-top:3px;width:32px}.xgplayer-skin-default .xgplayer-play-img .xgplayer-icon div,.xgplayer-skin-default .xgplayer-play .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-play-img .xgplayer-icon .xgplayer-icon-play,.xgplayer-skin-default .xgplayer-play .xgplayer-icon .xgplayer-icon-play{display:block}.xgplayer-skin-default .xgplayer-play-img .xgplayer-icon .xgplayer-icon-pause,.xgplayer-skin-default .xgplayer-play .xgplayer-icon .xgplayer-icon-pause{display:none}.xgplayer-skin-default .xgplayer-play-img .xgplayer-tips .xgplayer-tip-play,.xgplayer-skin-default .xgplayer-play .xgplayer-tips .xgplayer-tip-play{display:block}.xgplayer-skin-default .xgplayer-play-img .xgplayer-tips .xgplayer-tip-pause,.xgplayer-skin-default .xgplayer-play .xgplayer-tips .xgplayer-tip-pause{display:none}.xgplayer-skin-default .xgplayer-play-img:hover,.xgplayer-skin-default .xgplayer-play:hover{opacity:.85}.xgplayer-skin-default .xgplayer-play-img:hover .xgplayer-tips,.xgplayer-skin-default .xgplayer-play:hover .xgplayer-tips{display:block}.xgplayer-skin-default.xgplayer-playing .xgplayer-play-img .xgplayer-icon .xgplayer-icon-play,.xgplayer-skin-default.xgplayer-playing .xgplayer-play .xgplayer-icon .xgplayer-icon-play{display:none}.xgplayer-skin-default.xgplayer-playing .xgplayer-play-img .xgplayer-icon .xgplayer-icon-pause,.xgplayer-skin-default.xgplayer-playing .xgplayer-play .xgplayer-icon .xgplayer-icon-pause{display:block}.xgplayer-skin-default.xgplayer-playing .xgplayer-play-img .xgplayer-tips .xgplayer-tip-play,.xgplayer-skin-default.xgplayer-playing .xgplayer-play .xgplayer-tips .xgplayer-tip-play{display:none}.xgplayer-skin-default.xgplayer-pause .xgplayer-play-img .xgplayer-icon .xgplayer-icon-play,.xgplayer-skin-default.xgplayer-pause .xgplayer-play .xgplayer-icon .xgplayer-icon-play,.xgplayer-skin-default.xgplayer-playing .xgplayer-play-img .xgplayer-tips .xgplayer-tip-pause,.xgplayer-skin-default.xgplayer-playing .xgplayer-play .xgplayer-tips .xgplayer-tip-pause{display:block}.xgplayer-skin-default.xgplayer-pause .xgplayer-play-img .xgplayer-icon .xgplayer-icon-pause,.xgplayer-skin-default.xgplayer-pause .xgplayer-play .xgplayer-icon .xgplayer-icon-pause{display:none}.xgplayer-skin-default.xgplayer-pause .xgplayer-play-img .xgplayer-tips .xgplayer-tip-play,.xgplayer-skin-default.xgplayer-pause .xgplayer-play .xgplayer-tips .xgplayer-tip-play{display:block}.xgplayer-skin-default.xgplayer-pause .xgplayer-play-img .xgplayer-tips .xgplayer-tip-pause,.xgplayer-skin-default.xgplayer-pause .xgplayer-play .xgplayer-tips .xgplayer-tip-pause{display:none}.xgplayer-skin-default .xgplayer-start{border-radius:50%;display:inline-block;width:70px;height:70px;background:rgba(0,0,0,.38);overflow:hidden;text-align:center;line-height:70px;vertical-align:middle;position:absolute;left:50%;top:50%;z-index:115;margin:-35px auto auto -35px;cursor:pointer}.xgplayer-skin-default .xgplayer-start div{position:absolute}.xgplayer-skin-default .xgplayer-start div svg{fill:hsla(0,0%,100%,.7);margin:14px}.xgplayer-skin-default .xgplayer-start .xgplayer-icon-play{display:block}.xgplayer-skin-default .xgplayer-start .xgplayer-icon-pause{display:none}.xgplayer-skin-default .xgplayer-start:hover{opacity:.85}.xgplayer-skin-default.xgplayer-playing .xgplayer-start,.xgplayer-skin-default.xgplayer-playing .xgplayer-start .xgplayer-icon-play{display:none}.xgplayer-skin-default.xgplayer-playing .xgplayer-start .xgplayer-icon-pause{display:block}.xgplayer-skin-default.xgplayer-pause .xgplayer-start{display:inline-block}.xgplayer-skin-default.xgplayer-pause .xgplayer-start .xgplayer-icon-play{display:block}.xgplayer-skin-default.replay .xgplayer-start,.xgplayer-skin-default.xgplayer-pause .xgplayer-start .xgplayer-icon-pause{display:none}.xgplayer-skin-default.replay .xgplayer-start .xgplayer-icon-play{display:block}.xgplayer-skin-default.replay .xgplayer-start .xgplayer-icon-pause{display:none}.xgplayer-skin-default .xgplayer-enter{display:none;position:absolute;left:0;top:0;width:100%;height:100%;background:#000;z-index:120}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner{display:block;position:absolute;left:50%;top:50%;height:100px;width:100px;position:relative;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div{width:12%;height:26%;background-color:hsla(0,0%,100%,.7);position:absolute;left:44%;top:37%;opacity:0;border-radius:30px;-webkit-animation:fade 1s linear infinite;animation:fade 1s linear infinite}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar1{-webkit-transform:rotate(0deg) translateY(-142%);-ms-transform:rotate(0deg) translateY(-142%);transform:rotate(0deg) translateY(-142%);-webkit-animation-delay:0s;animation-delay:0s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar2{-webkit-transform:rotate(30deg) translateY(-142%);-ms-transform:rotate(30deg) translateY(-142%);transform:rotate(30deg) translateY(-142%);-webkit-animation-delay:-.9163s;animation-delay:-.9163s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar3{-webkit-transform:rotate(60deg) translateY(-142%);-ms-transform:rotate(60deg) translateY(-142%);transform:rotate(60deg) translateY(-142%);-webkit-animation-delay:-.833s;animation-delay:-.833s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar4{-webkit-transform:rotate(90deg) translateY(-142%);-ms-transform:rotate(90deg) translateY(-142%);transform:rotate(90deg) translateY(-142%);-webkit-animation-delay:-.7497s;animation-delay:-.7497s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar5{-webkit-transform:rotate(120deg) translateY(-142%);-ms-transform:rotate(120deg) translateY(-142%);transform:rotate(120deg) translateY(-142%);-webkit-animation-delay:-.6664s;animation-delay:-.6664s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar6{-webkit-transform:rotate(150deg) translateY(-142%);-ms-transform:rotate(150deg) translateY(-142%);transform:rotate(150deg) translateY(-142%);-webkit-animation-delay:-.5831s;animation-delay:-.5831s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar7{-webkit-transform:rotate(180deg) translateY(-142%);-ms-transform:rotate(180deg) translateY(-142%);transform:rotate(180deg) translateY(-142%);-webkit-animation-delay:-.4998s;animation-delay:-.4998s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar8{-webkit-transform:rotate(210deg) translateY(-142%);-ms-transform:rotate(210deg) translateY(-142%);transform:rotate(210deg) translateY(-142%);-webkit-animation-delay:-.4165s;animation-delay:-.4165s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar9{-webkit-transform:rotate(240deg) translateY(-142%);-ms-transform:rotate(240deg) translateY(-142%);transform:rotate(240deg) translateY(-142%);-webkit-animation-delay:-.3332s;animation-delay:-.3332s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar10{-webkit-transform:rotate(270deg) translateY(-142%);-ms-transform:rotate(270deg) translateY(-142%);transform:rotate(270deg) translateY(-142%);-webkit-animation-delay:-.2499s;animation-delay:-.2499s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar11{-webkit-transform:rotate(300deg) translateY(-142%);-ms-transform:rotate(300deg) translateY(-142%);transform:rotate(300deg) translateY(-142%);-webkit-animation-delay:-.1666s;animation-delay:-.1666s}.xgplayer-skin-default .xgplayer-enter .xgplayer-enter-spinner div.xgplayer-enter-bar12{-webkit-transform:rotate(330deg) translateY(-142%);-ms-transform:rotate(330deg) translateY(-142%);transform:rotate(330deg) translateY(-142%);-webkit-animation-delay:-.0833s;animation-delay:-.0833s}@-webkit-keyframes fade{0%{opacity:1}to{opacity:.25}}.xgplayer-skin-default.xgplayer-is-enter .xgplayer-enter{display:block}.xgplayer-skin-default .xgplayer-poster{display:none;position:absolute;left:0;top:0;width:100%;height:100%;z-index:100;background-size:cover;background-position:50%}.xgplayer-skin-default.xgplayer-nostart .xgplayer-poster{display:block}.xgplayer-skin-default .xgplayer-placeholder{-webkit-flex:1;-moz-box-flex:1;flex:1;-webkit-order:3;-moz-box-ordinal-group:4;order:3;display:block}.xgplayer-skin-default .xgplayer-fullscreen,.xgplayer-skin-default .xgplayer-fullscreen-img{position:relative;-webkit-order:13;-moz-box-ordinal-group:14;order:13;display:block;cursor:pointer}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-icon,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-icon{margin-top:3px}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-icon div,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-icon .xgplayer-icon-requestfull,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-icon .xgplayer-icon-requestfull{display:block}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-icon .xgplayer-icon-exitfull,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-icon .xgplayer-icon-exitfull{display:none}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-tips,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-tips{position:absolute;right:0;left:auto}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-tips .xgplayer-tip-requestfull,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-tips .xgplayer-tip-requestfull{display:block}.xgplayer-skin-default .xgplayer-fullscreen-img .xgplayer-tips .xgplayer-tip-exitfull,.xgplayer-skin-default .xgplayer-fullscreen .xgplayer-tips .xgplayer-tip-exitfull{display:none}.xgplayer-skin-default .xgplayer-fullscreen-img:hover,.xgplayer-skin-default .xgplayer-fullscreen:hover{opacity:.85}.xgplayer-skin-default .xgplayer-fullscreen-img:hover .xgplayer-tips,.xgplayer-skin-default .xgplayer-fullscreen:hover .xgplayer-tips{display:block}.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen-img .xgplayer-icon .xgplayer-icon-requestfull,.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen .xgplayer-icon .xgplayer-icon-requestfull{display:none}.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen-img .xgplayer-icon .xgplayer-icon-exitfull,.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen .xgplayer-icon .xgplayer-icon-exitfull{display:block}.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen-img .xgplayer-tips .xgplayer-tip-requestfull,.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen .xgplayer-tips .xgplayer-tip-requestfull{display:none}.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen-img .xgplayer-tips .xgplayer-tip-exitfull,.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-fullscreen .xgplayer-tips .xgplayer-tip-exitfull{display:block}.xgplayer-skin-default .xgplayer-cssfullscreen,.xgplayer-skin-default .xgplayer-cssfullscreen-img{position:relative;-webkit-order:12;-moz-box-ordinal-group:13;order:12;display:block;cursor:pointer}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-icon,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-icon{width:32px;margin-top:5px}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-icon div,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-icon .xgplayer-icon-requestfull,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-icon .xgplayer-icon-requestfull{display:block}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-icon .xgplayer-icon-exitfull,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-icon .xgplayer-icon-exitfull{display:none}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-tips,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-tips{margin-left:-40px}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-tips .xgplayer-tip-requestfull,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-tips .xgplayer-tip-requestfull{display:block}.xgplayer-skin-default .xgplayer-cssfullscreen-img .xgplayer-tips .xgplayer-tip-exitfull,.xgplayer-skin-default .xgplayer-cssfullscreen .xgplayer-tips .xgplayer-tip-exitfull{display:none}.xgplayer-skin-default .xgplayer-cssfullscreen-img:hover,.xgplayer-skin-default .xgplayer-cssfullscreen:hover{opacity:.85}.xgplayer-skin-default .xgplayer-cssfullscreen-img:hover .xgplayer-tips,.xgplayer-skin-default .xgplayer-cssfullscreen:hover .xgplayer-tips{display:block}.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-icon .xgplayer-icon-requestfull,.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-icon .xgplayer-icon-requestfull{display:none}.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-icon .xgplayer-icon-exitfull,.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-icon .xgplayer-icon-exitfull{display:block}.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-tips,.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-tips{margin-left:-47px}.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-tips .xgplayer-tip-requestfull,.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-tips .xgplayer-tip-requestfull{display:none}.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-tips .xgplayer-tip-exitfull,.xgplayer-skin-default.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-tips .xgplayer-tip-exitfull{display:block}.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-cssfullscreen,.xgplayer-skin-default.xgplayer-is-fullscreen .xgplayer-cssfullscreen-img{display:none}.xgplayer-skin-default.xgplayer-is-cssfullscreen{position:fixed!important;left:0!important;top:0!important;width:100%!important;height:100%!important;z-index:99999!important}.lang-is-en .xgplayer-cssfullscreen-img .xgplayer-tips,.lang-is-en .xgplayer-cssfullscreen .xgplayer-tips,.lang-is-en.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-tips,.lang-is-en.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-tips{margin-left:-46px}.lang-is-jp .xgplayer-cssfullscreen-img .xgplayer-tips,.lang-is-jp .xgplayer-cssfullscreen .xgplayer-tips{margin-left:-120px}.lang-is-jp.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen-img .xgplayer-tips,.lang-is-jp.xgplayer-is-cssfullscreen .xgplayer-cssfullscreen .xgplayer-tips{margin-left:-60px}.xgplayer-skin-default .xgplayer-volume{outline:none;-webkit-order:4;-moz-box-ordinal-group:5;order:4;width:28px;height:140px;display:block;position:relative;margin-top:-100px;z-index:18}.xgplayer-skin-default .xgplayer-volume .xgplayer-icon{margin-top:8px;cursor:pointer;position:absolute;bottom:-9px}.xgplayer-skin-default .xgplayer-volume .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-volume .xgplayer-icon .xgplayer-icon-large{display:block}.xgplayer-skin-default .xgplayer-volume .xgplayer-icon .xgplayer-icon-muted,.xgplayer-skin-default .xgplayer-volume .xgplayer-icon .xgplayer-icon-small{display:none}.xgplayer-skin-default .xgplayer-slider{display:none;position:absolute;width:28px;height:92px;background:rgba(0,0,0,.54);border-radius:1px;bottom:42px;outline:none}.xgplayer-skin-default .xgplayer-slider:after{content:" ";display:block;height:15px;width:28px;position:absolute;bottom:-15px;left:0;z-index:20}.xgplayer-skin-default .xgplayer-bar,.xgplayer-skin-default .xgplayer-drag{display:block;position:absolute;bottom:6px;left:12px;background:hsla(0,0%,100%,.3);border-radius:100px;width:4px;height:76px;outline:none;cursor:pointer}.xgplayer-skin-default .xgplayer-drag{bottom:0;left:0;background:#fa1f41;max-height:76px}.xgplayer-skin-default .xgplayer-drag:after{content:" ";display:inline-block;width:8px;height:8px;background:#fff;box-shadow:0 0 5px 0 rgba(0,0,0,.26);position:absolute;border-radius:50%;left:-2px;top:-6px}.xgplayer-skin-default.xgplayer-volume-active .xgplayer-slider,.xgplayer-skin-default.xgplayer-volume-large .xgplayer-volume .xgplayer-icon .xgplayer-icon-large{display:block}.xgplayer-skin-default.xgplayer-volume-large .xgplayer-volume .xgplayer-icon .xgplayer-icon-muted,.xgplayer-skin-default.xgplayer-volume-large .xgplayer-volume .xgplayer-icon .xgplayer-icon-small,.xgplayer-skin-default.xgplayer-volume-small .xgplayer-volume .xgplayer-icon .xgplayer-icon-large{display:none}.xgplayer-skin-default.xgplayer-volume-small .xgplayer-volume .xgplayer-icon .xgplayer-icon-small{display:block}.xgplayer-skin-default.xgplayer-volume-muted .xgplayer-volume .xgplayer-icon .xgplayer-icon-large,.xgplayer-skin-default.xgplayer-volume-muted .xgplayer-volume .xgplayer-icon .xgplayer-icon-small,.xgplayer-skin-default.xgplayer-volume-small .xgplayer-volume .xgplayer-icon .xgplayer-icon-muted{display:none}.xgplayer-skin-default.xgplayer-volume-muted .xgplayer-volume .xgplayer-icon .xgplayer-icon-muted{display:block}.xgplayer-skin-default.xgplayer-mobile .xgplayer-volume .xgplayer-slider{display:none}.xgplayer-skin-default .xgplayer-definition{-webkit-order:5;-moz-box-ordinal-group:6;order:5;width:60px;height:150px;z-index:18;position:relative;outline:none;display:none;cursor:default;margin-left:10px;margin-top:-119px}.xgplayer-skin-default .xgplayer-definition ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:30px;left:0;text-align:center;white-space:nowrap;margin-left:-10px;z-index:26;cursor:pointer}.xgplayer-skin-default .xgplayer-definition ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);padding:6px 13px}.xgplayer-skin-default .xgplayer-definition ul li.selected,.xgplayer-skin-default .xgplayer-definition ul li:hover{color:#fff;opacity:1}.xgplayer-skin-default .xgplayer-definition .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;cursor:pointer;color:hsla(0,0%,100%,.8);position:absolute;bottom:0;width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-skin-default.xgplayer-definition-active .xgplayer-definition ul,.xgplayer-skin-default.xgplayer-is-definition .xgplayer-definition{display:block}.xgplayer-skin-default .xgplayer-time{-webkit-order:2;-moz-box-ordinal-group:3;order:2;font-family:ArialMT;font-size:13px;color:#fff;line-height:40px;text-align:center;display:inline-block}.xgplayer-skin-default .xgplayer-time span:after{content:"/";display:inline-block;padding:0 3px}.xgplayer-skin-default .xgplayer-time em{color:hsla(0,0%,100%,.5)}.xgplayer-skin-default .xgplayer-controls{display:-webkit-flex;display:-moz-box;display:flex;position:absolute;bottom:0;left:0;right:0;height:40px;background-image:linear-gradient(180deg,transparent,rgba(0,0,0,.37),rgba(0,0,0,.75),rgba(0,0,0,.75));z-index:10}.xgplayer-skin-default.no-controls .xgplayer-controls,.xgplayer-skin-default.xgplayer-inactive .xgplayer-controls,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls>*,.xgplayer-skin-default.xgplayer-nostart .xgplayer-controls{display:none}.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-cssfullscreen,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-definition,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-fullscreen,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-live,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-placeholder,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-play,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-play-img,.xgplayer-skin-default.xgplayer-is-live .xgplayer-controls .xgplayer-volume{display:block}.xgplayer-skin-default .xgplayer-live{display:block;font-size:12px;color:#fff;line-height:40px;-webkit-order:1;-moz-box-ordinal-group:2;order:1}.xgplayer-skin-default .xgplayer-loading{display:none;width:100px;height:100px;overflow:hidden;-webkit-transform:scale(.7);-ms-transform:scale(.7);transform:scale(.7);position:absolute;left:50%;top:50%;margin:-70px auto auto -50px}.xgplayer-skin-default .xgplayer-loading svg{border-radius:50%;-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-animation:loadingRotate 1s linear infinite;animation:loadingRotate 1s linear infinite}.xgplayer-skin-default .xgplayer-loading svg path{stroke:#ddd;stroke-dasharray:236;-webkit-animation:loadingDashOffset 2s linear infinite;animation:loadingDashOffset 2s linear infinite;animation-direction:alternate-reverse;fill:none;stroke-width:12px}.xgplayer-skin-default.xgplayer-nostart .xgplayer-loading{display:none}.xgplayer-skin-default.xgplayer-isloading .xgplayer-loading{display:block}.xgplayer-skin-default .xgplayer-progress{display:block;position:absolute;height:20px;line-height:20px;left:12px;right:12px;outline:none;top:-10px;z-index:35}.xgplayer-skin-default .xgplayer-progress-outer{background:hsla(0,0%,100%,.3);display:block;height:3px;line-height:3px;margin-top:8.5px;width:100%;position:relative;cursor:pointer}.xgplayer-skin-default .xgplayer-progress-cache,.xgplayer-skin-default .xgplayer-progress-played{display:block;height:100%;line-height:1;position:absolute;left:0;top:0}.xgplayer-skin-default .xgplayer-progress-cache{width:0;background:hsla(0,0%,100%,.5)}.xgplayer-skin-default .xgplayer-progress-played{display:block;width:0;background-image:linear-gradient(-90deg,#fa1f41,#e31106);border-radius:0 1.5px 1.5px 0}.xgplayer-skin-default .xgplayer-progress-btn{display:none;position:absolute;left:0;top:-5px;width:13px;height:13px;border-radius:30px;background:#fff;box-shadow:0 0 2px 0 rgba(0,0,0,.26);left:100%;-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.xgplayer-skin-default .xgplayer-progress-point{position:absolute}.xgplayer-skin-default .xgplayer-progress-point.xgplayer-tips{margin-left:0;top:-25px;display:none;z-index:100}.xgplayer-skin-default .xgplayer-progress-dot{display:inline-block;position:absolute;height:3px;width:5px;top:0;background:#fff;border-radius:6px;z-index:16}.xgplayer-skin-default .xgplayer-progress-dot .xgplayer-progress-tip{position:absolute;left:0;top:-40px;height:auto;line-height:30px;width:auto;-webkit-transform:scale(.8);-ms-transform:scale(.8);transform:scale(.8);background:rgba(0,0,0,.3);border-radius:6px;border:1px solid rgba(0,0,0,.8);cursor:default;white-space:nowrap;display:none}.xgplayer-skin-default .xgplayer-progress-dot-show .xgplayer-progress-tip{display:block}.xgplayer-skin-default .xgplayer-progress-thumbnail{position:absolute;-moz-box-sizing:border-box;box-sizing:border-box}.xgplayer-skin-default .xgplayer-progress-thumbnail.xgplayer-tips{margin-left:0;display:none;z-index:99}.xgplayer-skin-default .xgplayer-progress:focus .xgplayer-progress-outer,.xgplayer-skin-default .xgplayer-progress:hover .xgplayer-progress-outer{height:6px;margin-top:7px}.xgplayer-skin-default .xgplayer-progress:focus .xgplayer-progress-dot,.xgplayer-skin-default .xgplayer-progress:hover .xgplayer-progress-dot{height:6px}.xgplayer-skin-default .xgplayer-progress:focus .xgplayer-progress-btn,.xgplayer-skin-default .xgplayer-progress:hover .xgplayer-progress-btn{display:block;top:-3px}.xgplayer-skin-default.xgplayer-definition-active .xgplayer-progress,.xgplayer-skin-default.xgplayer-playbackrate-active .xgplayer-progress,.xgplayer-skin-default.xgplayer-texttrack-active .xgplayer-progress,.xgplayer-skin-default.xgplayer-volume-active .xgplayer-progress{z-index:15}.xgplayer-skin-default.xgplayer-mobile .xgplayer-progress-btn{display:block!important}.xgplayer-skin-default.xgplayer-mobile .xgplayer-progress:focus .xgplayer-progress-outer,.xgplayer-skin-default.xgplayer-mobile .xgplayer-progress:hover .xgplayer-progress-outer{height:3px!important;margin-top:8.5px!important}.xgplayer-skin-default.xgplayer-mobile .xgplayer-progress:focus .xgplayer-progress-btn,.xgplayer-skin-default.xgplayer-mobile .xgplayer-progress:hover .xgplayer-progress-btn{display:block!important;top:-5px!important}.xgplayer-skin-default .xgplayer-replay{position:absolute;left:0;top:0;width:100%;height:100%;z-index:105;display:none;-webkit-justify-content:center;-moz-box-pack:center;justify-content:center;-webkit-align-items:center;-moz-box-align:center;align-items:center;background:rgba(0,0,0,.54);-webkit-flex-direction:column;-moz-box-orient:vertical;-moz-box-direction:normal;flex-direction:column}.xgplayer-skin-default .xgplayer-replay svg{background:rgba(0,0,0,.58);border-radius:100%;cursor:pointer}.xgplayer-skin-default .xgplayer-replay svg path{-webkit-transform:translate(20px,21px);-ms-transform:translate(20px,21px);transform:translate(20px,21px);fill:#ddd}.xgplayer-skin-default .xgplayer-replay svg:hover{background:rgba(0,0,0,.38)}.xgplayer-skin-default .xgplayer-replay svg:hover path{fill:#fff}.xgplayer-skin-default .xgplayer-replay .xgplayer-replay-txt{display:inline-block;font-family:PingFangSC-Regular;font-size:14px;color:#fff;line-height:34px}.xgplayer-skin-default.xgplayer.xgplayer-ended .xgplayer-controls{display:none}.xgplayer-skin-default.xgplayer.xgplayer-ended .xgplayer-replay{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-skin-default .xgplayer-playbackrate{-webkit-order:8;-moz-box-ordinal-group:9;order:8;width:60px;height:20px;z-index:18;position:relative;display:inline-block;cursor:default}.xgplayer-skin-default .xgplayer-playbackrate ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:20px;left:0;text-align:left;white-space:nowrap;z-index:26;cursor:pointer}.xgplayer-skin-default .xgplayer-playbackrate ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);position:relative;padding:4px 0;text-align:center}.xgplayer-skin-default .xgplayer-playbackrate ul li.selected,.xgplayer-skin-default .xgplayer-playbackrate ul li:hover{color:#fff;opacity:1}.xgplayer-skin-default .xgplayer-playbackrate ul li:first-child{position:relative;margin-top:12px}.xgplayer-skin-default .xgplayer-playbackrate ul li:last-child{position:relative;margin-bottom:12px}.xgplayer-skin-default .xgplayer-playbackrate .name{height:20px;position:relative;top:11px;text-align:center;background:rgba(0,0,0,.38);color:hsla(0,0%,100%,.8);border-radius:10px;line-height:20px}.xgplayer-skin-default .xgplayer-playbackrate span{position:relative;top:19px;font-weight:700;text-shadow:0 0 4px rgba(0,0,0,.6)}.xgplayer-skin-default .xgplayer-playbackrate:hover{opacity:1}.xgplayer-skin-default.xgplayer-playbackrate-active .xgplayer-playbackrate ul{display:block}.xgplayer-skin-default .xgplayer-download{position:relative;-webkit-order:9;-moz-box-ordinal-group:10;order:9;display:block;cursor:pointer}.xgplayer-skin-default .xgplayer-download .xgplayer-icon{margin-top:3px}.xgplayer-skin-default .xgplayer-download .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-download .xgplayer-icon svg{position:relative;top:5px;left:5px}.xgplayer-skin-default .xgplayer-download .xgplayer-tips{margin-left:-20px}.xgplayer-skin-default .xgplayer-download .xgplayer-tips .xgplayer-tip-download{display:block}.xgplayer-skin-default .xgplayer-download:hover{opacity:.85}.xgplayer-skin-default .xgplayer-download:hover .xgplayer-tips{display:block}.lang-is-en .xgplayer-download .xgplayer-tips{margin-left:-32px}.lang-is-jp .xgplayer-download .xgplayer-tips{margin-left:-40px}.xgplayer-skin-default .danmu-switch{-webkit-order:6;-moz-box-ordinal-group:7;order:6;z-index:26}.xgplayer-skin-default .xgplayer-danmu{display:none;position:absolute;top:0;left:0;right:0;height:100%;overflow:hidden;z-index:9;outline:none}.xgplayer-skin-default .xgplayer-danmu>*{position:absolute;white-space:nowrap;z-index:9}.xgplayer-skin-default .xgplayer-danmu.xgplayer-has-danmu{display:block}.xgplayer-skin-default .xgplayer-panel{outline:none;-webkit-order:7;-moz-box-ordinal-group:8;order:7;width:40px;height:40px;display:inline-block;position:relative;font-family:PingFangSC-Regular;font-size:13px;color:hsla(0,0%,100%,.8);z-index:36}.xgplayer-skin-default .xgplayer-panel .xgplayer-panel-icon{cursor:pointer;position:absolute;margin-left:5px;top:10px}.xgplayer-skin-default .xgplayer-panel-active{display:block!important;bottom:30px}.xgplayer-skin-default .xgplayer-panel-slider{z-index:36;display:none;position:absolute;width:230px;height:230px;background:rgba(0,0,0,.54);border-radius:1px;padding:10px 20px;outline:none;left:-115px;bottom:40px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-hidemode{padding-bottom:10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-hidemode-radio li{display:inline;list-style:none;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-hidemode ul{display:-webkit-flex;display:-moz-box;display:flex;-webkit-justify-content:space-around;justify-content:space-around}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-hidemode li{margin:0 12px;font-size:11px;color:#aaa}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-hidemode-font{margin-bottom:10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency{display:block;margin-top:10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-line{-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;outline:none;width:150px;height:4px;background:#aaa;border-radius:4px;border-style:none;margin-left:10px;margin-top:-2px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-line::-moz-focus-outer{border:0!important}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-color::-webkit-slider-runnable-track{outline:none;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-color::-moz-range-track{outline:none;background-color:#aaa;border-color:transparent;cursor:pointer;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-color::-ms-track{outline:none;background-color:#aaa;color:transparent;border-color:transparent;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-bar::-webkit-slider-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;margin-top:-4px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-bar::-moz-range-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:0;width:0;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-bar::-ms-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-transparency .xgplayer-transparency-bar::-moz-range-progress{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;height:4px;border-radius:4px;background:linear-gradient(90deg,#f85959,#f85959 100%,#aaa)}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea{display:block;margin-top:8px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-name{display:inline-block;position:relative;top:-10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-control{display:inline-block}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-control-up{width:150px;margin-left:10px;display:-moz-box;display:-webkit-flex;display:flex;-webkit-justify-content:space-between;-moz-box-pack:justify;justify-content:space-between;color:#aaa}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-control-down{position:relative;top:-10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-control-down-dots{display:-webkit-flex;display:-moz-box;display:flex;width:150px;margin-left:10px;-webkit-justify-content:space-between;-moz-box-pack:justify;justify-content:space-between}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-threequarters,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-twoquarters{margin-left:-6px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea-full{margin-right:3px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-line{-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;outline:none;width:150px;height:4px;background:#aaa;border-radius:4px;border-style:none;margin-left:10px;margin-top:-2px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-line::-moz-focus-outer{border:0!important}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-color::-webkit-slider-runnable-track{outline:none;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-color::-moz-range-track{outline:none;background-color:#aaa;border-color:transparent;cursor:pointer;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-color::-ms-track{outline:none;background-color:#aaa;color:transparent;border-color:transparent;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-bar::-webkit-slider-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;margin-top:-4px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-bar::-moz-range-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:0;width:0;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-bar::-ms-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-full-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-onequarters-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-threequarters-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-twoquarters-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-showarea .xgplayer-showarea-zero-dot{width:3px;height:3px;border:3px solid #aaa;border-radius:50%;background-color:#aaa;position:relative;top:16px;z-index:-1}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed{display:block}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed-name{display:inline-block;position:relative;top:-10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed-control{display:inline-block}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed-control-up{width:150px;margin-left:10px;display:-moz-box;display:-webkit-flex;display:flex;-webkit-justify-content:space-between;-moz-box-pack:justify;justify-content:space-between;color:#aaa}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed-control-down{position:relative;top:-10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed-control-down-dots{display:-webkit-flex;display:-moz-box;display:flex;width:150px;margin-left:10px;-webkit-justify-content:space-between;-moz-box-pack:justify;justify-content:space-between}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-line{-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;outline:none;width:150px;height:4px;background:#aaa;border-radius:4px;border-style:none;margin-left:10px;margin-top:-2px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-line::-moz-focus-outer{border:0!important}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-color::-webkit-slider-runnable-track{outline:none;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-color::-moz-range-track{outline:none;background-color:#aaa;border-color:transparent;cursor:pointer;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-color::-ms-track{outline:none;background-color:#aaa;color:transparent;border-color:transparent;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-bar::-webkit-slider-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;margin-top:-4px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-bar::-moz-range-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:0;width:0;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-bar::-ms-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-large-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-middle-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmuspeed .xgplayer-danmuspeed-small-dot{width:3px;height:3px;border:3px solid #aaa;border-radius:50%;background-color:#aaa;position:relative;top:16px;z-index:-1}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont{display:block}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont-name{display:inline-block;position:relative;top:-10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont-control{display:inline-block}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont-control-up{width:150px;margin-left:10px;display:-moz-box;display:-webkit-flex;display:flex;-webkit-justify-content:space-between;-moz-box-pack:justify;justify-content:space-between;color:#aaa}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont-control-down{position:relative;top:-10px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont-control-down-dots{display:-webkit-flex;display:-moz-box;display:flex;width:150px;margin-left:10px;-webkit-justify-content:space-between;-moz-box-pack:justify;justify-content:space-between}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-line{-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;outline:none;width:150px;height:4px;background:#aaa;border-radius:4px;border-style:none;margin-left:10px;margin-top:-2px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-line::-moz-focus-outer{border:0!important}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-color::-webkit-slider-runnable-track{outline:none;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-color::-moz-range-track{outline:none;background-color:#aaa;border-color:transparent;cursor:pointer;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-color::-ms-track{outline:none;background-color:#aaa;color:transparent;border-color:transparent;width:150px;height:4px;border-radius:4px}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-bar::-webkit-slider-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;margin-top:-4px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-bar::-moz-range-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:0;width:0;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-bar::-ms-thumb{outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:6px solid #f85959;height:6px;width:6px;border-radius:6px;cursor:pointer}.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-large-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-middle-dot,.xgplayer-skin-default .xgplayer-panel-slider .xgplayer-danmufont .xgplayer-danmufont-small-dot{width:3px;height:3px;border:3px solid #aaa;border-radius:50%;background-color:#aaa;position:relative;top:16px;z-index:-1}.xgplayer-skin-default .xgplayer-playnext{position:relative;-webkit-order:1;-moz-box-ordinal-group:2;order:1;display:block;cursor:pointer;top:-2px}.xgplayer-skin-default .xgplayer-playnext .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-playnext .xgplayer-tips .xgplayer-tip-playnext{display:block}.xgplayer-skin-default .xgplayer-playnext:hover{opacity:.85}.xgplayer-skin-default .xgplayer-playnext:hover .xgplayer-tips{display:block}.lang-is-en .xgplayer-playnext .xgplayer-tips{margin-left:-25px}.lang-is-jp .xgplayer-playnext .xgplayer-tips{margin-left:-38px}.xgplayer-skin-default .xgplayer-pip{-webkit-order:9;-moz-box-ordinal-group:10;order:9;position:relative;outline:none;display:block;cursor:pointer;height:20px;top:8px}.xgplayer-skin-default .xgplayer-pip .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-skin-default .xgplayer-pip .name span{width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-skin-default .xgplayer-pip-lay{position:absolute;top:26px;left:0;width:100%;height:100%;z-index:130;cursor:pointer;background-color:transparent;display:none}.xgplayer-skin-default .xgplayer-pip-lay div{width:100%;height:100%}.xgplayer-skin-default .xgplayer-pip-drag{cursor:move;position:absolute;top:0;left:0;width:100%;height:26px;line-height:26px;background-image:linear-gradient(rgba(0,0,0,.3),transparent);z-index:130;display:none}.xgplayer-skin-default.xgplayer-pip-active{position:fixed;right:0;bottom:200px;width:320px!important;height:180px!important;z-index:110!important}.xgplayer-skin-default.xgplayer-pip-active .xgplayer-controls,.xgplayer-skin-default.xgplayer-pip-active .xgplayer-danmu{display:none}.xgplayer-skin-default.xgplayer-pip-active .xgplayer-pip-lay{display:block}.xgplayer-skin-default.xgplayer-pip-active .xgplayer-pip-drag{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-skin-default.xgplayer-inactive .xgplayer-pip-drag{display:none}.lang-is-jp .xgplayer-pip .name span{width:70px;height:20px}.xgplayer-skin-default .xgplayer-rotate{position:relative;-webkit-order:10;-moz-box-ordinal-group:11;order:10;display:block;cursor:pointer}.xgplayer-skin-default .xgplayer-rotate .xgplayer-icon{margin-top:7px;width:26px}.xgplayer-skin-default .xgplayer-rotate .xgplayer-icon div{position:absolute}.xgplayer-skin-default .xgplayer-rotate .xgplayer-tips{margin-left:-22px}.xgplayer-skin-default .xgplayer-rotate .xgplayer-tips .xgplayer-tip-rotate{display:block}.xgplayer-skin-default .xgplayer-rotate:hover{opacity:.85}.xgplayer-skin-default .xgplayer-rotate:hover .xgplayer-tips{display:block}.lang-is-en .xgplayer-rotate .xgplayer-tips{margin-left:-26px}.lang-is-jp .xgplayer-rotate .xgplayer-tips{margin-left:-38px}.xgplayer-skin-default .xgplayer-screenshot{-webkit-order:11;-moz-box-ordinal-group:12;order:11;position:relative;outline:none;display:block;cursor:pointer;height:20px;top:8px}.xgplayer-skin-default .xgplayer-screenshot .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-skin-default .xgplayer-screenshot .name span{width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.lang-is-en .xgplayer-screenshot .name span,.lang-is-jp .xgplayer-screenshot .name span{width:75px;height:20px}.xgplayer-skin-default .xgplayer-texttrack{-webkit-order:7;-moz-box-ordinal-group:8;order:7;width:60px;height:150px;z-index:18;position:relative;outline:none;display:none;cursor:default;margin-top:-119px}.xgplayer-skin-default .xgplayer-texttrack ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:30px;left:0;text-align:center;white-space:nowrap;margin-left:-10px;z-index:26;cursor:pointer}.xgplayer-skin-default .xgplayer-texttrack ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);padding:6px 13px}.xgplayer-skin-default .xgplayer-texttrack ul li.selected,.xgplayer-skin-default .xgplayer-texttrack ul li:hover{color:#fff;opacity:1}.xgplayer-skin-default .xgplayer-texttrack .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;cursor:pointer;color:hsla(0,0%,100%,.8);position:absolute;bottom:0;width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-skin-default.xgplayer-is-texttrack .xgplayer-texttrack,.xgplayer-skin-default.xgplayer-texttrack-active .xgplayer-texttrack ul{display:block}.xgplayer-skin-default .xgplayer-icon{display:block;width:40px;height:40px;overflow:hidden;fill:#fff}.xgplayer-skin-default .xgplayer-tips{background:rgba(0,0,0,.54);border-radius:1px;display:none;position:absolute;font-family:PingFangSC-Regular;font-size:11px;color:#fff;padding:2px 4px;text-align:center;top:-30px;left:50%;margin-left:-16px;width:auto;white-space:nowrap}.xgplayer-skin-default.xgplayer-mobile .xgplayer-tips{display:none!important}.xgplayer-skin-default .xgplayer-error{background:#000;display:none;position:absolute;left:0;top:0;width:100%;height:100%;z-index:125;font-family:PingFangSC-Regular;font-size:14px;color:#fff;text-align:center;line-height:100%;-webkit-justify-content:center;-moz-box-pack:center;justify-content:center;-webkit-align-items:center;-moz-box-align:center;align-items:center}.xgplayer-skin-default .xgplayer-error .xgplayer-error-refresh{color:#fa1f41;padding:0 3px;cursor:pointer}.xgplayer-skin-default .xgplayer-error .xgplayer-error-text{line-height:18px;margin:auto 6px}.xgplayer-skin-default.xgplayer-is-error .xgplayer-error{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-skin-default .xgplayer-memoryplay-spot{position:absolute;height:32px;left:10px;bottom:46px;background:rgba(0,0,0,.5);border-radius:32px;line-height:32px;color:#ddd;z-index:15;padding:0 32px 0 16px}.xgplayer-skin-default .xgplayer-memoryplay-spot .xgplayer-lasttime{color:red;font-weight:700}.xgplayer-skin-default .xgplayer-memoryplay-spot .btn-close{position:absolute;width:16px;height:16px;right:10px;top:2px;cursor:pointer;color:#fff;font-size:16px}',""])},"./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];"number"==typeof i&&(r[i]=!0)}for(a=0;a<e.length;a++){var o=e[a];"number"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},"./node_modules/d/index.js":
/*!*********************************!*\
  !*** ./node_modules/d/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! es5-ext/object/assign */"./node_modules/es5-ext/object/assign/index.js"),a=n(/*! es5-ext/object/normalize-options */"./node_modules/es5-ext/object/normalize-options.js"),i=n(/*! es5-ext/object/is-callable */"./node_modules/es5-ext/object/is-callable.js"),o=n(/*! es5-ext/string/#/contains */"./node_modules/es5-ext/string/#/contains/index.js");(e.exports=function(e,t){var n,i,s,l,c;return arguments.length<2||"string"!=typeof e?(l=t,t=e,e=null):l=arguments[2],null==e?(n=s=!0,i=!1):(n=o.call(e,"c"),i=o.call(e,"e"),s=o.call(e,"w")),c={value:t,configurable:n,enumerable:i,writable:s},l?r(a(l),c):c}).gs=function(e,t,n){var s,l,c,u;return"string"!=typeof e?(c=n,n=t,t=e,e=null):c=arguments[3],null==t?t=void 0:i(t)?null==n?n=void 0:i(n)||(c=n,n=void 0):(c=t,t=n=void 0),null==e?(s=!0,l=!1):(s=o.call(e,"c"),l=o.call(e,"e")),u={get:t,set:n,configurable:s,enumerable:l},c?r(a(c),u):u}},"./node_modules/danmu.js/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/danmu.js/dist/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){var n,r,a,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(o,s){"object"==i(t)&&"object"==i(e)?e.exports=s():(r=[],void 0===(a="function"==typeof(n=s)?n.apply(t,r):n)||(e.exports=a))}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==(void 0===e?"undefined":i(e))&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(22))&&r.__esModule?r:{default:r},i={};i.domObj=new a.default,i.createDom=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",a=document.createElement(e);return a.className=r,a.innerHTML=t,Object.keys(n).forEach(function(t){var r=t,i=n[t];"video"===e||"audio"===e?i&&a.setAttribute(r,i):a.setAttribute(r,i)}),a},i.hasClass=function(e,t){return e.classList?Array.prototype.some.call(e.classList,function(e){return e===t}):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},i.addClass=function(e,t){e.classList?t.replace(/(^\s+|\s+$)/g,"").split(/\s+/g).forEach(function(t){t&&e.classList.add(t)}):i.hasClass(e,t)||(e.className+=" "+t)},i.removeClass=function(e,t){e.classList?t.split(/\s+/g).forEach(function(t){e.classList.remove(t)}):i.hasClass(e,t)&&t.split(/\s+/g).forEach(function(t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")})},i.toggleClass=function(e,t){t.split(/\s+/g).forEach(function(t){i.hasClass(e,t)?i.removeClass(e,t):i.addClass(e,t)})},i.findDom=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments[1],n=void 0;try{n=e.querySelector(t)}catch(r){t.startsWith("#")&&(n=e.getElementById(t.slice(1)))}return n},i.deepCopy=function(e,t){if("Object"===i.typeOf(t)&&"Object"===i.typeOf(e))return Object.keys(t).forEach(function(n){"Object"!==i.typeOf(t[n])||t[n]instanceof Node?"Array"===i.typeOf(t[n])?e[n]="Array"===i.typeOf(e[n])?e[n].concat(t[n]):t[n]:e[n]=t[n]:e[n]?i.deepCopy(e[n],t[n]):e[n]=t[n]}),e},i.typeOf=function(e){return Object.prototype.toString.call(e).match(/([^\s.*]+)(?=]$)/g)[0]},i.copyDom=function(e){if(e&&1===e.nodeType){var t=document.createElement(e.tagName);return Array.prototype.forEach.call(e.attributes,function(e){t.setAttribute(e.name,e.value)}),e.innerHTML&&(t.innerHTML=e.innerHTML),t}return""},i.formatTime=function(e){var t=Math.floor(e);return 1e3*t+(e-t)},t.default=i,e.exports=t.default},function(e,t,n){var r=n(13)();e.exports=function(e){return e!==r&&null!==e}},function(e,t,n){e.exports=n(3)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(4))&&r.__esModule?r:{default:r};n(26),t.default=a.default,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(5)),i=s(n(21)),o=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=o.default.deepCopy({overlap:!1,area:{start:0,end:1},live:!1,comments:[],direction:"r2l"},t),this.hideArr=[],(0,a.default)(this);var n=this;if(this.config.comments.forEach(function(e){e.duration=e.duration<5e3?5e3:e.duration,e.mode||(e.mode="scroll")}),!this.config.container||1!==this.config.container.nodeType)return this.emit("error","container id can't be empty"),!1;if(this.container=this.config.container,this.config.containerStyle){var r=this.config.containerStyle;Object.keys(r).forEach(function(e){n.container.style[e]=r[e]})}this.live=this.config.live,this.player=this.config.player,this.direction=this.config.direction,o.default.addClass(this.container,"danmu"),this.bulletBtn=new i.default(this),this.emit("ready")}return r(e,[{key:"start",value:function(){this.bulletBtn.main.start()}},{key:"pause",value:function(){this.bulletBtn.main.pause()}},{key:"play",value:function(){this.bulletBtn.main.play()}},{key:"stop",value:function(){this.bulletBtn.main.stop()}},{key:"sendComment",value:function(e){e&&e.id&&e.duration&&(e.el||e.txt)&&(e.duration=e.duration<5e3?5e3:e.duration,this.bulletBtn.main.data.push(e))}},{key:"setCommentID",value:function(e,t){var n=this.container.getBoundingClientRect();e&&t&&(this.bulletBtn.main.data.some(function(n){return n.id===e&&(n.id=t,!0)}),this.bulletBtn.main.queue.some(function(r){return r.id===e&&(r.id=t,r.pauseMove(n),r.startMove(n),!0)}))}},{key:"setCommentDuration",value:function(e,t){var n=this.container.getBoundingClientRect();e&&t&&(t=t<5e3?5e3:t,this.bulletBtn.main.data.some(function(n){return n.id===e&&(n.duration=t,!0)}),this.bulletBtn.main.queue.some(function(r){return r.id===e&&(r.duration=t,r.pauseMove(n),r.startMove(n),!0)}))}},{key:"setAllDuration",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll",t=arguments[1],n=this.container.getBoundingClientRect();t&&(t=t<5e3?5e3:t,this.bulletBtn.main.data.forEach(function(n){e===n.mode&&(n.duration=t)}),this.bulletBtn.main.queue.forEach(function(r){e===r.mode&&(r.duration=t,r.pauseMove(n),r.startMove(n))}))}},{key:"hide",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll";this.hideArr.indexOf(e)<0&&this.hideArr.push(e),this.bulletBtn.main.queue.filter(function(t){return e===t.mode||"color"===e&&t.color}).forEach(function(e){return e.remove()})}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll",t=this.hideArr.indexOf(e);t>-1&&this.hideArr.splice(t,1)}},{key:"setDirection",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"r2l";this.emit("changeDirection",e)}}]),e}();t.default=l,e.exports=t.default},function(e,t,n){var r,a,o,s,l,c,u,d=n(6),p=n(20),f=Function.prototype.apply,g=Function.prototype.call,y=Object.create,h=Object.defineProperty,x=Object.defineProperties,m=Object.prototype.hasOwnProperty,v={configurable:!0,enumerable:!1,writable:!0};a=function(e,t){var n,a;return p(t),a=this,r.call(this,e,n=function(){o.call(a,e,n),f.call(t,this,arguments)}),n.__eeOnceListener__=t,this},l={on:r=function(e,t){var n;return p(t),m.call(this,"__ee__")?n=this.__ee__:(n=v.value=y(null),h(this,"__ee__",v),v.value=null),n[e]?"object"==i(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:a,off:o=function(e,t){var n,r,a,o;if(p(t),!m.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"==i(r=n[e]))for(o=0;a=r[o];++o)a!==t&&a.__eeOnceListener__!==t||(2===r.length?n[e]=r[o?0:1]:r.splice(o,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},emit:s=function(e){var t,n,r,a,o;if(m.call(this,"__ee__")&&(a=this.__ee__[e]))if("object"==(void 0===a?"undefined":i(a))){for(n=arguments.length,o=new Array(n-1),t=1;t<n;++t)o[t-1]=arguments[t];for(a=a.slice(),t=0;r=a[t];++t)f.call(r,this,o)}else switch(arguments.length){case 1:g.call(a,this);break;case 2:g.call(a,this,arguments[1]);break;case 3:g.call(a,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,o=new Array(n-1),t=1;t<n;++t)o[t-1]=arguments[t];f.call(a,this,o)}}},c={on:d(r),once:d(a),off:d(o),emit:d(s)},u=x({},c),e.exports=t=function(e){return null==e?y(u):x(Object(e),c)},t.methods=l},function(e,t,n){var r=n(7),a=n(15),i=n(16),o=n(17);(e.exports=function(e,t){var n,i,s,l,c;return arguments.length<2||"string"!=typeof e?(l=t,t=e,e=null):l=arguments[2],null==e?(n=s=!0,i=!1):(n=o.call(e,"c"),i=o.call(e,"e"),s=o.call(e,"w")),c={value:t,configurable:n,enumerable:i,writable:s},l?r(a(l),c):c}).gs=function(e,t,n){var s,l,c,u;return"string"!=typeof e?(c=n,n=t,t=e,e=null):c=arguments[3],null==t?t=void 0:i(t)?null==n?n=void 0:i(n)||(c=n,n=void 0):(c=t,t=n=void 0),null==e?(s=!0,l=!1):(s=o.call(e,"c"),l=o.call(e,"e")),u={get:t,set:n,configurable:s,enumerable:l},c?r(a(c),u):u}},function(e,t,n){e.exports=n(8)()?Object.assign:n(9)},function(e,t,n){e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},function(e,t,n){var r=n(10),a=n(14),i=Math.max;e.exports=function(e,t){var n,o,s,l=i(arguments.length,2);for(e=Object(a(e)),s=function(r){try{e[r]=t[r]}catch(e){n||(n=e)}},o=1;o<l;++o)t=arguments[o],r(t).forEach(s);if(void 0!==n)throw n;return e}},function(e,t,n){e.exports=n(11)()?Object.keys:n(12)},function(e,t,n){e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},function(e,t,n){var r=n(1),a=Object.keys;e.exports=function(e){return a(r(e)?Object(e):e)}},function(e,t,n){e.exports=function(){}},function(e,t,n){var r=n(1);e.exports=function(e){if(!r(e))throw new TypeError("Cannot use null or undefined");return e}},function(e,t,n){var r=n(1),a=Array.prototype.forEach,i=Object.create;e.exports=function(e){var t=i(null);return a.call(arguments,function(e){r(e)&&function(e,t){var n;for(n in e)t[n]=e[n]}(Object(e),t)}),t}},function(e,t,n){e.exports=function(e){return"function"==typeof e}},function(e,t,n){e.exports=n(18)()?String.prototype.contains:n(19)},function(e,t,n){var r="razdwatrzy";e.exports=function(){return"function"==typeof r.contains&&!0===r.contains("dwa")&&!1===r.contains("foo")}},function(e,t,n){var r=String.prototype.indexOf;e.exports=function(e){return r.call(this,e,arguments[1])>-1}},function(e,t,n){e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=o(n(0)),i=o(n(23));function o(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.main=new i.default(t),t.config.defaultOff||this.main.start()}return r(e,[{key:"createSwitch",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.switchBtn=a.default.createDom("dk-switch",'<span class="txt">弹</span>',{},"danmu-switch "+(e?"danmu-switch-active":"")),this.switchBtn}}]),e}();t.default=s,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t={initDOM:function(){return document.createElement("div")},initSize:10},this.init(t)}return r(e,[{key:"init",value:function(e){this.idleList=[],this.usingList=[],this._id=0,this.options=e,this._expand(e.initSize)}},{key:"use",value:function(){this.idleList.length||this._expand(1);var e=this.idleList.shift();return this.usingList.push(e),e}},{key:"unuse",value:function(e){var t=this.usingList.indexOf(e);t<0||(this.usingList.splice(t,1),e.innerHTML="",e.textcontent="",e.style="",this.idleList.push(e))}},{key:"_expand",value:function(e){for(var t=0;t<e;t++)this.idleList.push(this.options.initDOM(this._id++))}}]),e}();t.default=a,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(24)),i=s(n(25)),o=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.container=t.container,this.channel=new a.default(t),this.data=[].concat(t.config.comments),this.queue=[],this.timer=null,this.retryTimer=null,this.interval=2e3,this.status="idle",t.on("bullet_remove",this.updateQueue.bind(this));var n=this;this.danmu.on("changeDirection",function(e){n.danmu.direction=e})}return r(e,[{key:"updateQueue",value:function(e){var t=this;t.queue.some(function(n,r){return n.id===e.bullet.id&&(t.queue.splice(r,1),!0)})}},{key:"init",value:function(e,t){t||(t=this),t.data.sort(function(e,t){return e.start-t.start}),t.retryTimer||(t.retryTimer=setInterval(function(){t.readData(),t.dataHandle()},t.interval-1e3))}},{key:"start",value:function(){this.status="playing",this.queue=[],this.container.innerHTML="",this.channel.resetWithCb(this.init,this)}},{key:"stop",value:function(){this.status="closed",clearInterval(this.retryTimer),this.retryTimer=null,this.channel.reset(),this.queue=[],this.container.innerHTML=""}},{key:"play",value:function(){this.status="playing";var e=this.channel.channels,t=this.danmu.container.getBoundingClientRect();e&&e.length>0&&["scroll","top","bottom"].forEach(function(n){for(var r=0;r<e.length;r++)e[r].queue[n].forEach(function(e){e.resized||(e.startMove(t),e.resized=!0)});for(var a=0;a<e.length;a++)e[a].queue[n].forEach(function(e){e.resized=!1})})}},{key:"pause",value:function(){this.status="paused";var e=this.channel.channels,t=this.danmu.container.getBoundingClientRect();e&&e.length>0&&["scroll","top","bottom"].forEach(function(n){for(var r=0;r<e.length;r++)e[r].queue[n].forEach(function(e){e.pauseMove(t)})})}},{key:"dataHandle",value:function(){var e=this;"paused"!==this.status&&"closed"!==this.status&&e.queue.length&&e.queue.forEach(function(t){"waiting"!==t.status&&"paused"!==t.status||t.startMove(e.channel.containerPos)})}},{key:"readData",value:function(){var e=this,t=this.danmu,n=0;t.player&&t.player.currentTime&&(n=o.default.formatTime(t.player.currentTime));var r=void 0,a=e.interval,s=e.channel,l=void 0;t.player?(l=e.data.filter(function(t){return!t.start&&e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)&&(t.start=n),e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)&&t.start-a<=n&&n<=t.start+a}),t.live&&(e.data=e.data.filter(function(e){return e.start||(e.start=n),e.start>n-3*a}))):l=e.data.filter(function(t){return e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)}),l.length>0&&l.forEach(function(n){(r=new i.default(t,n)).attach(),s.addBullet(r).result?(e.queue.push(r),r.topInit()):r.detach()})}}]),e}();t.default=l,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.reset();var n=this;this.danmu.on("bullet_remove",function(e){n.removeBullet(e.bullet)}),this.direction=t.direction,this.danmu.on("changeDirection",function(e){n.direction=e}),this.containerPos=this.danmu.container.getBoundingClientRect(),this.containerWidth=this.containerPos.width,this.containerHeight=this.containerPos.height,this.containerLeft=this.containerPos.left,this.containerRight=this.containerPos.right,this.danmu.bulletResizeTimer=setInterval(function(){n.containerPos=n.danmu.container.getBoundingClientRect(),(Math.abs(n.containerPos.width-n.containerWidth)>=2||Math.abs(n.containerPos.height-n.containerHeight)>=2||Math.abs(n.containerPos.left-n.containerLeft)>=2||Math.abs(n.containerPos.right-n.containerRight)>=2)&&(n.containerWidth=n.containerPos.width,n.containerHeight=n.containerPos.height,n.containerLeft=n.containerPos.left,n.containerRight=n.containerPos.right,n.resize(!0))},50)}return r(e,[{key:"resize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.danmu.container,n=this;setTimeout(function(){n.danmu.bulletBtn.main.data&&n.danmu.bulletBtn.main.data.forEach(function(e){e.bookChannelId&&delete e.bookChannelId});var r=t.getBoundingClientRect();n.width=r.width,n.height=r.height,n.danmu.config.area&&n.danmu.config.area.start>=0&&n.danmu.config.area.end>=n.danmu.config.area.start&&("b2t"===n.direction?n.width=n.width*(n.danmu.config.area.end-n.danmu.config.area.start):n.height=n.height*(n.danmu.config.area.end-n.danmu.config.area.start)),n.container=t;var a,i=/mobile/gi.test(navigator.userAgent)?10:12;a="b2t"===n.direction?Math.floor(n.width/i):Math.floor(n.height/i);for(var o=[],s=0;s<a;s++)o[s]={id:s,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};if(n.channels&&n.channels.length<=o.length){for(var l=function(t){o[t]={id:t,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top"].forEach(function(r){n.channels[t].queue[r].forEach(function(a){a.el&&(o[t].queue[r].push(a),a.resized||(a.pauseMove(n.containerPos,e),a.startMove(n.containerPos),a.resized=!0))})}),n.channels[t].queue.bottom.forEach(function(r){if(r.el){if(o[t+o.length-n.channels.length].queue.bottom.push(r),r.channel_id[0]+r.channel_id[1]-1===t){var a=[].concat(r.channel_id);r.channel_id=[a[0]-n.channels.length+o.length,a[1]],r.top=r.channel_id[0]*i,n.danmu.config.area&&n.danmu.config.area.start&&(r.top+=n.containerHeight*n.danmu.config.area.start),r.topInit()}r.resized||(r.pauseMove(n.containerPos,e),r.startMove(n.containerPos),r.resized=!0)}})},c=0;c<n.channels.length;c++)l(c);for(var u=function(e){["scroll","top","bottom"].forEach(function(t){o[e].queue[t].forEach(function(e){e.resized=!1})})},d=0;d<o.length;d++)u(d);n.channels=o,"b2t"===n.direction?n.channelWidth=i:n.channelHeight=i}else if(n.channels&&n.channels.length>o.length){for(var p=function(t){o[t]={id:t,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top","bottom"].forEach(function(r){if("top"===r&&t>Math.floor(o.length/2));else if("bottom"===r&&t<=Math.floor(o.length/2));else{var a="bottom"===r?t-o.length+n.channels.length:t;n.channels[a].queue[r].forEach(function(s,l){if(s.el){if(o[t].queue[r].push(s),"bottom"===r&&s.channel_id[0]+s.channel_id[1]-1===a){var c=[].concat(s.channel_id);s.channel_id=[c[0]-n.channels.length+o.length,c[1]],s.top=s.channel_id[0]*i,n.danmu.config.area&&n.danmu.config.area.start&&(s.top+=n.containerHeight*n.danmu.config.area.start),s.topInit()}s.resized||(s.pauseMove(n.containerPos,e),s.startMove(n.containerPos),s.resized=!0)}n.channels[a].queue[r].splice(l,1)})}})},f=0;f<o.length;f++)p(f);for(var g=function(e){["scroll","top","bottom"].forEach(function(t){n.channels[e].queue[t].forEach(function(e){e.pauseMove(n.containerPos),e.remove()})})},y=o.length;y<n.channels.length;y++)g(y);for(var h=function(e){["scroll","top","bottom"].forEach(function(t){o[e].queue[t].forEach(function(e){e.resized=!1})})},x=0;x<o.length;x++)h(x);n.channels=o,"b2t"===n.direction?n.channelWidth=i:n.channelHeight=i}},10)}},{key:"addBullet",value:function(e){var t=this.danmu,n=this.channels,r=void 0,a=void 0,i=void 0;if("b2t"===this.direction?(a=this.channelWidth,i=Math.ceil(e.width/a)):(r=this.channelHeight,i=Math.ceil(e.height/r)),i>n.length)return{result:!1,message:"exceed channels.length, occupy="+i+",channelsSize="+n.length};for(var o=!0,s=void 0,l=-1,c=0,u=n.length;c<u;c++)if(n[c].queue[e.mode].some(function(t){return t.id===e.id}))return{result:!1,message:"exsited, channelOrder="+c+",danmu_id="+e.id};if("scroll"===e.mode)for(var d=0,p=n.length-i;d<=p;d++){o=!0;for(var f=d;f<d+i;f++){if((s=n[f]).operating.scroll){o=!1;break}if((s.bookId.scroll||e.prior)&&s.bookId.scroll!==e.id){o=!1;break}s.operating.scroll=!0;var g=s.queue.scroll[0];if(g){var y=g.el.getBoundingClientRect();if("b2t"===this.direction){if(y.bottom>this.containerPos.bottom){o=!1,s.operating.scroll=!1;break}}else if(y.right>this.containerPos.right){o=!1,s.operating.scroll=!1;break}var h,x=void 0,m=void 0,v=void 0,b=void 0;if("b2t"===this.direction?(m=(y.top-this.containerPos.top+y.height)/(x=(this.containerPos.height+y.height)/g.duration),v=this.containerPos.height,b=(this.containerPos.height+e.height)/e.duration):(m=(y.left-this.containerPos.left+y.width)/(x=(this.containerPos.width+y.width)/g.duration),v=this.containerPos.width,b=(this.containerPos.width+e.width)/e.duration),h=v/b,t.config.bOffset||(t.config.bOffset=0),x<b&&m+t.config.bOffset>h){o=!1,s.operating.scroll=!1;break}}s.operating.scroll=!1}if(o){l=d;break}}else if("top"===e.mode)for(var k=0,w=n.length-i;k<=w;k++){o=!0;for(var _=k;_<k+i;_++){if(_>Math.floor(n.length/2)){o=!1;break}if((s=n[_]).operating[e.mode]){o=!1;break}if((s.bookId[e.mode]||e.prior)&&s.bookId[e.mode]!==e.id){o=!1;break}if(s.operating[e.mode]=!0,s.queue[e.mode].length>0){o=!1,s.operating[e.mode]=!1;break}s.operating[e.mode]=!1}if(o){l=k;break}}else if("bottom"===e.mode)for(var E=n.length-i;E>=0;E--){o=!0;for(var C=E;C<E+i;C++){if(C<=Math.floor(n.length/2)){o=!1;break}if((s=n[C]).operating[e.mode]){o=!1;break}if((s.bookId[e.mode]||e.prior)&&s.bookId[e.mode]!==e.id){o=!1;break}if(s.operating[e.mode]=!0,s.queue[e.mode].length>0){o=!1,s.operating[e.mode]=!1;break}s.operating[e.mode]=!1}if(o){l=E;break}}if(-1!==l){for(var S=l,P=l+i;S<P;S++)(s=n[S]).operating[e.mode]=!0,s.queue[e.mode].unshift(e),e.prior&&delete s.bookId[e.mode],s.operating[e.mode]=!1;return e.prior&&(delete e.bookChannelId,t.bulletBtn.main.data.some(function(t){return t.id===e.id&&(delete t.bookChannelId,!0)})),e.channel_id=[l,i],"b2t"===this.direction?(e.top=l*a,this.danmu.config.area&&this.danmu.config.area.start&&(e.top+=this.containerWidth*this.danmu.config.area.start)):(e.top=l*r,this.danmu.config.area&&this.danmu.config.area.start&&(e.top+=this.containerHeight*this.danmu.config.area.start)),{result:e,message:"success"}}if(e.prior)if(e.bookChannelId)t.bulletBtn.main.data.some(function(t){return t.id===e.id&&(t.start+=2e3,!0)});else{l=-1;for(var j=0,T=n.length-i;j<=T;j++){o=!0;for(var O=j;O<j+i;O++)if(n[O].bookId[e.mode]){o=!1;break}if(o){l=j;break}}if(-1!==l){for(var L=l;L<l+i;L++)n[L].bookId[e.mode]=e.id;t.bulletBtn.main.data.some(function(t){return t.id===e.id&&(t.start+=2e3,t.bookChannelId=[l,i],!0)})}}return{result:!1,message:"no surplus will right"}}},{key:"removeBullet",value:function(e){for(var t=this.channels,n=e.channel_id,r=void 0,a=n[0],i=n[0]+n[1];a<i;a++)if(r=t[a]){r.operating[e.mode]=!0;var o=-1;r.queue[e.mode].some(function(t,n){return t.id===e.id&&(o=n,!0)}),o>-1&&r.queue[e.mode].splice(o,1),r.operating[e.mode]=!1}}},{key:"resetArea",value:function(){var e=this.danmu.container,t=this,n=e.getBoundingClientRect();t.width=n.width,t.height=n.height,t.danmu.config.area&&t.danmu.config.area.start>=0&&t.danmu.config.area.end>=t.danmu.config.area.start&&("b2t"===t.direction?t.width=t.width*(t.danmu.config.area.end-t.danmu.config.area.start):t.height=t.height*(t.danmu.config.area.end-t.danmu.config.area.start)),t.container=e;var r,a=/mobile/gi.test(navigator.userAgent)?10:12;r="b2t"===t.direction?Math.floor(t.width/a):Math.floor(t.height/a);for(var i=[],o=0;o<r;o++)i[o]={id:o,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};if(t.channels&&t.channels.length<=i.length){for(var s=function(e){i[e]={id:e,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top"].forEach(function(n){t.channels[e].queue[n].forEach(function(r){r.el&&(i[e].queue[n].push(r),r.resized||(r.pauseMove(t.containerPos,!1),r.startMove(t.containerPos),r.resized=!0))})}),t.channels[e].queue.bottom.forEach(function(n){if(n.el){if(i[e+i.length-t.channels.length].queue.bottom.push(n),n.channel_id[0]+n.channel_id[1]-1===e){var r=[].concat(n.channel_id);n.channel_id=[r[0]-t.channels.length+i.length,r[1]],n.top=n.channel_id[0]*a,t.danmu.config.area&&t.danmu.config.area.start&&(n.top+=t.containerHeight*t.danmu.config.area.start),n.topInit()}n.resized||(n.pauseMove(t.containerPos,!1),n.startMove(t.containerPos),n.resized=!0)}})},l=0;l<t.channels.length;l++)s(l);for(var c=function(e){["scroll","top","bottom"].forEach(function(t){i[e].queue[t].forEach(function(e){e.resized=!1})})},u=0;u<i.length;u++)c(u);t.channels=i,"b2t"===t.direction?t.channelWidth=a:t.channelHeight=a}else if(t.channels&&t.channels.length>i.length){for(var d=function(e){i[e]={id:e,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top","bottom"].forEach(function(n){if("top"===n&&e>Math.floor(i.length/2));else if("bottom"===n&&e<=Math.floor(i.length/2));else{var r="bottom"===n?e-i.length+t.channels.length:e;t.channels[r].queue[n].forEach(function(o,s){if(o.el){if(i[e].queue[n].push(o),"bottom"===n&&o.channel_id[0]+o.channel_id[1]-1===r){var l=[].concat(o.channel_id);o.channel_id=[l[0]-t.channels.length+i.length,l[1]],o.top=o.channel_id[0]*a,t.danmu.config.area&&t.danmu.config.area.start&&(o.top+=t.containerHeight*t.danmu.config.area.start),o.topInit()}o.resized||(o.pauseMove(t.containerPos,!1),o.startMove(t.containerPos),o.resized=!0)}t.channels[r].queue[n].splice(s,1)})}})},p=0;p<i.length;p++)d(p);for(var f=function(e){["scroll","top","bottom"].forEach(function(t){i[e].queue[t].forEach(function(e){e.resized=!1})})},g=0;g<i.length;g++)f(g);t.channels=i,"b2t"===t.direction?t.channelWidth=a:t.channelHeight=a}}},{key:"reset",value:function(){var e=this.danmu.container,t=this;t.channels&&t.channels.length>0&&["scroll","top","bottom"].forEach(function(e){for(var n=0;n<t.channels.length;n++)t.channels[n].queue[e].forEach(function(e){e.pauseMove(t.containerPos),e.remove()})}),setTimeout(function(){var n=e.getBoundingClientRect();t.width=n.width,t.height=n.height,t.danmu.config.area&&t.danmu.config.area.start>=0&&t.danmu.config.area.end>=t.danmu.config.area.start&&("b2t"===t.direction?t.width=t.width*(t.danmu.config.area.end-t.danmu.config.area.start):t.height=t.height*(t.danmu.config.area.end-t.danmu.config.area.start)),t.container=e;var r,a=/mobile/gi.test(navigator.userAgent)?10:12;r="b2t"===t.direction?Math.floor(t.width/a):Math.floor(t.height/a);for(var i=[],o=0;o<r;o++)i[o]={id:o,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};t.channels=i,"b2t"===t.direction?t.channelWidth=a:t.channelHeight=a},200)}},{key:"resetWithCb",value:function(e,t){var n=this.danmu.container,r=this;r.channels&&r.channels.length>0&&["scroll","top","bottom"].forEach(function(e){for(var t=0;t<r.channels.length;t++)r.channels[t].queue[e].forEach(function(e){e.pauseMove(r.containerPos),e.remove()})});var a=n.getBoundingClientRect();r.width=a.width,r.height=a.height,r.danmu.config.area&&r.danmu.config.area.start>=0&&r.danmu.config.area.end>=r.danmu.config.area.start&&("b2t"===r.direction?r.width=r.width*(r.danmu.config.area.end-r.danmu.config.area.start):r.height=r.height*(r.danmu.config.area.end-r.danmu.config.area.start)),r.container=n;var i,o=/mobile/gi.test(navigator.userAgent)?10:12;i="b2t"===r.direction?Math.floor(r.width/o):Math.floor(r.height/o);for(var s=[],l=0;l<i;l++)s[l]={id:l,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};r.channels=s,r.channelHeight=o,e&&e(!0,t)}}]),e}();t.default=a,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(r=n(0))&&r.__esModule?r:{default:r},o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.duration=n.duration,this.id=n.id,this.container=t.container,this.start=n.start,this.prior=n.prior,this.color=n.color,this.bookChannelId=n.bookChannelId,this.direction=t.direction;var r=this;this.danmu.on("changeDirection",function(e){r.direction=e});var a=void 0;if(this.domObj=i.default.domObj,n.el&&1===n.el.nodeType)(a=this.domObj.use()).appendChild(i.default.copyDom(n.el));else if((a=this.domObj.use()).textContent=n.txt,n.style){var o=n.style;Object.keys(o).forEach(function(e){a.style[e]=o[e]})}"top"===n.mode||"bottom"===n.mode?this.mode=n.mode:this.mode="scroll",this.el=a,this.status="waiting";var s=this.container.getBoundingClientRect();this.el.style.left=s.width+"px"}return a(e,[{key:"attach",value:function(){this.container.appendChild(this.el),this.elPos=this.el.getBoundingClientRect(),"b2t"===this.direction?(this.width=this.elPos.height,this.height=this.elPos.width):(this.width=this.elPos.width,this.height=this.elPos.height)}},{key:"detach",value:function(){this.container&&this.el&&(this.domObj.unuse(this.el),this.container.removeChild(this.el));var e=this;this.danmu.off("changeDirection",function(t){e.direction=t}),this.el=null}},{key:"topInit",value:function(){if("b2t"===this.direction){var e=this.container.getBoundingClientRect();this.el.style.transformOrigin="left top",this.el.style.transform="translateX(-"+this.top+"px) translateY("+e.height+"px) translateZ(0px) rotate(90deg)",this.el.style.transition="transform 0s linear 0s"}else this.el.style.top=this.top+"px"}},{key:"pauseMove",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("paused"!==this.status&&(this.status="paused",clearTimeout(this.removeTimer),this.el))if(this.el.style.willChange="auto","scroll"===this.mode){if(t){var n,r=((new Date).getTime()-this.moveTime)/1e3*this.moveV;n=this.moveMoreS-r>=0?"b2t"===this.direction?(this.moveMoreS-r)/this.moveContainerHeight*e.height:(this.moveMoreS-r)/this.moveContainerWidth*e.width:this.moveMoreS-r,"b2t"===this.direction?this.el.style.transform="translateX(-"+this.top+"px) translateY("+n+"px) translateZ(0px) rotate(90deg)":this.el.style.left=n+"px"}else"b2t"===this.direction?this.el.style.transform="translateX(-"+this.top+"px) translateY("+(this.el.getBoundingClientRect().top-e.top)+"px) translateZ(0px) rotate(90deg)":this.el.style.left=this.el.getBoundingClientRect().left-e.left+"px";"b2t"===this.direction?this.el.style.transition="transform 0s linear 0s":(this.el.style.transform="translateX(0px) translateY(0px) translateZ(0px)",this.el.style.transition="transform 0s linear 0s")}else this.pastDuration&&this.startTime?this.pastDuration=this.pastDuration+(new Date).getTime()-this.startTime:this.pastDuration=1}},{key:"startMove",value:function(e){var t=this;if(this.el&&"start"!==this.status)if(this.status="start",this.el.style.willChange="transform","scroll"===this.mode)if("b2t"===this.direction){this.moveV=(e.height+this.height)/this.duration*1e3;var n=(t.el.getBoundingClientRect().bottom-e.top)/this.moveV;this.el.style.transition="transform "+n+"s linear 0s",setTimeout(function(){t.el&&(t.el.style.transform="translateX(-"+t.top+"px) translateY(-"+t.height+"px) translateZ(0px) rotate(90deg)",t.moveTime=(new Date).getTime(),t.moveMoreS=t.el.getBoundingClientRect().top-e.top,t.moveContainerHeight=e.height,t.removeTimer=setTimeout(i,1e3*n))},20)}else{this.moveV=(e.width+this.width)/this.duration*1e3;var r=(t.el.getBoundingClientRect().right-e.left)/this.moveV;this.el.style.transition="transform "+r+"s linear 0s",setTimeout(function(){t.el&&(t.el.style.transform="translateX(-"+(t.el.getBoundingClientRect().right-e.left)+"px) translateY(0px) translateZ(0px)",t.moveTime=(new Date).getTime(),t.moveMoreS=t.el.getBoundingClientRect().left-e.left,t.moveContainerWidth=e.width,t.removeTimer=setTimeout(i,1e3*r))},20)}else{this.el.style.left="50%",this.el.style.margin="0 0 0 -"+this.width/2+"px",this.pastDuration||(this.pastDuration=1);var a=this.duration>=this.pastDuration?this.duration-this.pastDuration:0;this.removeTimer=setTimeout(i,a),this.startTime=(new Date).getTime()}function i(){if(t.el)if("scroll"===t.mode){var e=t.danmu.container.getBoundingClientRect(),n=t.el.getBoundingClientRect();"b2t"===t.direction?n&&n.bottom<=e.top+100?(t.status="end",t.remove()):(t.pauseMove(e),t.startMove(e)):n&&n.right<=e.left+100?(t.status="end",t.remove()):(t.pauseMove(e),t.startMove(e))}else t.status="end",t.remove()}}},{key:"remove",value:function(){var e=this;this.removeTimer&&clearTimeout(this.removeTimer),e.el&&e.el.parentNode&&(e.el.style.willChange="auto",this.danmu.off("changeDirection",function(t){e.direction=t}),this.domObj.unuse(e.el),e.el.parentNode.removeChild(e.el),e.el=null,e.danmu.emit("bullet_remove",{bullet:e}))}}]),e}();t.default=o,e.exports=t.default},function(e,t,n){var r=n(27);"string"==typeof r&&(r=[[e.i,r,""]]);n(29)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(28)(!1)).push([e.i,".danmu{overflow:hidden;-webkit-user-select:none;-moz-user-select:none;user-select:none;-ms-user-select:none}.danmu>*{position:absolute;white-space:nowrap}.danmu-switch{width:32px;height:20px;border-radius:100px;background-color:#ccc;-webkit-box-sizing:border-box;box-sizing:border-box;outline:none;cursor:pointer;position:relative;text-align:center;margin:10px auto}.danmu-switch.danmu-switch-active{padding-left:12px;background-color:#f85959}.danmu-switch span.txt{width:20px;height:20px;line-height:20px;text-align:center;display:block;border-radius:100px;background-color:#ffffff;-webkit-box-shadow:-2px 0 0 0 rgba(0, 0, 0, .04);box-shadow:-2px 0 0 0 rgba(0, 0, 0, .04);font-family:PingFangSC;font-size:10px;font-weight:500;color:#f44336}\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n,r=e[1]||"",a=e[3];if(!a)return r;if(t&&"function"==typeof btoa){var i=(n=a,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),o=a.sources.map(function(e){return"/*# sourceURL="+a.sourceRoot+e+" */"});return[r].concat(o).concat([i]).join("\n")}return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];"number"==typeof i&&(r[i]=!0)}for(a=0;a<e.length;a++){var o=e[a];"number"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){var r,a,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,d=[],p=n(30);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(v(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(v(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function g(e,t){for(var n=[],r={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function y(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=i(e.insertAt)||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,a)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function x(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),y(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,a,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var o=u++;n=c||(c=x(t)),r=w.bind(null,n,o,!1),a=w.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),y(e,t),t}(t),r=function(e,t,n){var r=n.css,a=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||i)&&(r=p(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,n,t),a=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=x(t),r=function(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=("undefined"==typeof document?"undefined":i(document)))throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==i(t.attrs)?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=g(e,t);return f(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a];(s=o[i.id]).refs--,r.push(s)}for(e&&f(g(e,t),t),a=0;a<r.length;a++){var s;if(0===(s=r[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete o[s.id]}}}};var b,k=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=k(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}}])})}).call(this,n(/*! ./../../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/downloadjs/download.js":
/*!*********************************************!*\
  !*** ./node_modules/downloadjs/download.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a,i;"function"==typeof Symbol&&Symbol.iterator;a=[],void 0===(i="function"==typeof(r=function(){return function e(t,n,r){var a,i,o=window,s="application/octet-stream",l=r||s,c=t,u=!n&&!r&&c,d=document.createElement("a"),p=function(e){return String(e)},f=o.Blob||o.MozBlob||o.WebKitBlob||p,g=n||"download";if(f=f.call?f.bind(o):Blob,"true"===String(this)&&(l=(c=[c,l])[0],c=c[1]),u&&u.length<2048&&(g=u.split("/").pop().split("?")[0],d.href=u,-1!==d.href.indexOf(u))){var y=new XMLHttpRequest;return y.open("GET",u,!0),y.responseType="blob",y.onload=function(t){e(t.target.response,g,s)},setTimeout(function(){y.send()},0),y}if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(c)){if(!(c.length>2096103.424&&f!==p))return navigator.msSaveBlob?navigator.msSaveBlob(v(c),g):b(c);c=v(c),l=c.type||s}else if(/([\x80-\xff])/.test(c)){for(var h=0,x=new Uint8Array(c.length),m=x.length;h<m;++h)x[h]=c.charCodeAt(h);c=new f([x],{type:l})}function v(e){for(var t=e.split(/[:;,]/),n=t[1],r="base64"==t[2]?atob:decodeURIComponent,a=r(t.pop()),i=a.length,o=0,s=new Uint8Array(i);o<i;++o)s[o]=a.charCodeAt(o);return new f([s],{type:n})}function b(e,t){if("download"in d)return d.href=e,d.setAttribute("download",g),d.className="download-js-link",d.innerHTML="downloading...",d.style.display="none",document.body.appendChild(d),setTimeout(function(){d.click(),document.body.removeChild(d),!0===t&&setTimeout(function(){o.URL.revokeObjectURL(d.href)},250)},66),!0;if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent))return/^data:/.test(e)&&(e="data:"+e.replace(/^data:([\w\/\-\+]+)/,s)),window.open(e)||confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")&&(location.href=e),!0;var n=document.createElement("iframe");document.body.appendChild(n),!t&&/^data:/.test(e)&&(e="data:"+e.replace(/^data:([\w\/\-\+]+)/,s)),n.src=e,setTimeout(function(){document.body.removeChild(n)},333)}if(a=c instanceof f?c:new f([c],{type:l}),navigator.msSaveBlob)return navigator.msSaveBlob(a,g);if(o.URL)b(o.URL.createObjectURL(a),!0);else{if("string"==typeof a||a.constructor===p)try{return b("data:"+l+";base64,"+o.btoa(a))}catch(e){return b("data:"+l+","+encodeURIComponent(a))}(i=new FileReader).onload=function(e){b(this.result)},i.readAsDataURL(a)}return!0}})?r.apply(t,a):r)||(e.exports=i)},"./node_modules/draggabilly/draggabilly.js":
/*!*************************************************!*\
  !*** ./node_modules/draggabilly/draggabilly.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Draggabilly v2.2.0
 * Make that shiz draggable
 * https://draggabilly.desandro.com
 * MIT license
 */
!function(i,o){r=[n(/*! get-size/get-size */"./node_modules/get-size/get-size.js"),n(/*! unidragger/unidragger */"./node_modules/unidragger/unidragger.js")],void 0===(a=function(e,t){return function(e,t,n){function r(e,t){for(var n in t)e[n]=t[n];return e}var a=e.jQuery;function i(e,t){this.element="string"==typeof e?document.querySelector(e):e,a&&(this.$element=a(this.element)),this.options=r({},this.constructor.defaults),this.option(t),this._create()}var o=i.prototype=Object.create(n.prototype);i.defaults={},o.option=function(e){r(this.options,e)};var s={relative:!0,absolute:!0,fixed:!0};function l(e,t,n){return n=n||"round",t?Math[n](e/t)*t:e}o._create=function(){this.position={},this._getPosition(),this.startPoint={x:0,y:0},this.dragPoint={x:0,y:0},this.startPosition=r({},this.position);var e=getComputedStyle(this.element);s[e.position]||(this.element.style.position="relative"),this.on("pointerDown",this.onPointerDown),this.on("pointerMove",this.onPointerMove),this.on("pointerUp",this.onPointerUp),this.enable(),this.setHandles()},o.setHandles=function(){this.handles=this.options.handle?this.element.querySelectorAll(this.options.handle):[this.element],this.bindHandles()},o.dispatchEvent=function(e,t,n){var r=[t].concat(n);this.emitEvent(e,r),this.dispatchJQueryEvent(e,t,n)},o.dispatchJQueryEvent=function(t,n,r){var a=e.jQuery;if(a&&this.$element){var i=a.Event(n);i.type=t,this.$element.trigger(i,r)}},o._getPosition=function(){var e=getComputedStyle(this.element),t=this._getPositionCoord(e.left,"width"),n=this._getPositionCoord(e.top,"height");this.position.x=isNaN(t)?0:t,this.position.y=isNaN(n)?0:n,this._addTransformPosition(e)},o._getPositionCoord=function(e,n){if(-1!=e.indexOf("%")){var r=t(this.element.parentNode);return r?parseFloat(e)/100*r[n]:0}return parseInt(e,10)},o._addTransformPosition=function(e){var t=e.transform;if(0===t.indexOf("matrix")){var n=t.split(","),r=0===t.indexOf("matrix3d")?12:4,a=parseInt(n[r],10),i=parseInt(n[r+1],10);this.position.x+=a,this.position.y+=i}},o.onPointerDown=function(e,t){this.element.classList.add("is-pointer-down"),this.dispatchJQueryEvent("pointerDown",e,[t])},o.dragStart=function(e,t){this.isEnabled&&(this._getPosition(),this.measureContainment(),this.startPosition.x=this.position.x,this.startPosition.y=this.position.y,this.setLeftTop(),this.dragPoint.x=0,this.dragPoint.y=0,this.element.classList.add("is-dragging"),this.dispatchEvent("dragStart",e,[t]),this.animate())},o.measureContainment=function(){var e=this.getContainer();if(e){var n=t(this.element),r=t(e),a=this.element.getBoundingClientRect(),i=e.getBoundingClientRect(),o=r.borderLeftWidth+r.borderRightWidth,s=r.borderTopWidth+r.borderBottomWidth,l=this.relativeStartPosition={x:a.left-(i.left+r.borderLeftWidth),y:a.top-(i.top+r.borderTopWidth)};this.containSize={width:r.width-o-l.x-n.width,height:r.height-s-l.y-n.height}}},o.getContainer=function(){var e=this.options.containment;if(e)return e instanceof HTMLElement?e:"string"==typeof e?document.querySelector(e):this.element.parentNode},o.onPointerMove=function(e,t,n){this.dispatchJQueryEvent("pointerMove",e,[t,n])},o.dragMove=function(e,t,n){if(this.isEnabled){var r=n.x,a=n.y,i=this.options.grid,o=i&&i[0],s=i&&i[1];r=l(r,o),a=l(a,s),r=this.containDrag("x",r,o),a=this.containDrag("y",a,s),r="y"==this.options.axis?0:r,a="x"==this.options.axis?0:a,this.position.x=this.startPosition.x+r,this.position.y=this.startPosition.y+a,this.dragPoint.x=r,this.dragPoint.y=a,this.dispatchEvent("dragMove",e,[t,n])}},o.containDrag=function(e,t,n){if(!this.options.containment)return t;var r="x"==e?"width":"height",a=l(-this.relativeStartPosition[e],n,"ceil"),i=this.containSize[r];return i=l(i,n,"floor"),Math.max(a,Math.min(i,t))},o.onPointerUp=function(e,t){this.element.classList.remove("is-pointer-down"),this.dispatchJQueryEvent("pointerUp",e,[t])},o.dragEnd=function(e,t){this.isEnabled&&(this.element.style.transform="",this.setLeftTop(),this.element.classList.remove("is-dragging"),this.dispatchEvent("dragEnd",e,[t]))},o.animate=function(){if(this.isDragging){this.positionDrag();var e=this;requestAnimationFrame(function(){e.animate()})}},o.setLeftTop=function(){this.element.style.left=this.position.x+"px",this.element.style.top=this.position.y+"px"},o.positionDrag=function(){this.element.style.transform="translate3d( "+this.dragPoint.x+"px, "+this.dragPoint.y+"px, 0)"},o.staticClick=function(e,t){this.dispatchEvent("staticClick",e,[t])},o.setPosition=function(e,t){this.position.x=e,this.position.y=t,this.setLeftTop()},o.enable=function(){this.isEnabled=!0},o.disable=function(){this.isEnabled=!1,this.isDragging&&this.dragEnd()},o.destroy=function(){this.disable(),this.element.style.transform="",this.element.style.left="",this.element.style.top="",this.element.style.position="",this.unbindHandles(),this.$element&&this.$element.removeData("draggabilly")},o._init=function(){},a&&a.bridget&&a.bridget("draggabilly",i);return i}(i,e,t)}.apply(t,r))||(e.exports=a)}(window)},"./node_modules/es5-ext/function/noop.js":
/*!***********************************************!*\
  !*** ./node_modules/es5-ext/function/noop.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){}},"./node_modules/es5-ext/object/assign/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/assign/is-implemented.js")()?Object.assign:n(/*! ./shim */"./node_modules/es5-ext/object/assign/shim.js")},"./node_modules/es5-ext/object/assign/is-implemented.js":
/*!**************************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/is-implemented.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},"./node_modules/es5-ext/object/assign/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/shim.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../keys */"./node_modules/es5-ext/object/keys/index.js"),a=n(/*! ../valid-value */"./node_modules/es5-ext/object/valid-value.js"),i=Math.max;e.exports=function(e,t){var n,o,s,l=i(arguments.length,2);for(e=Object(a(e)),s=function(r){try{e[r]=t[r]}catch(e){n||(n=e)}},o=1;o<l;++o)t=arguments[o],r(t).forEach(s);if(void 0!==n)throw n;return e}},"./node_modules/es5-ext/object/is-callable.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/is-callable.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return"function"==typeof e}},"./node_modules/es5-ext/object/is-value.js":
/*!*************************************************!*\
  !*** ./node_modules/es5-ext/object/is-value.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../function/noop */"./node_modules/es5-ext/function/noop.js")();e.exports=function(e){return e!==r&&null!==e}},"./node_modules/es5-ext/object/keys/index.js":
/*!***************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/keys/is-implemented.js")()?Object.keys:n(/*! ./shim */"./node_modules/es5-ext/object/keys/shim.js")},"./node_modules/es5-ext/object/keys/is-implemented.js":
/*!************************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/is-implemented.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},"./node_modules/es5-ext/object/keys/shim.js":
/*!**************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/shim.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../is-value */"./node_modules/es5-ext/object/is-value.js"),a=Object.keys;e.exports=function(e){return a(r(e)?Object(e):e)}},"./node_modules/es5-ext/object/normalize-options.js":
/*!**********************************************************!*\
  !*** ./node_modules/es5-ext/object/normalize-options.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js"),a=Array.prototype.forEach,i=Object.create;e.exports=function(e){var t=i(null);return a.call(arguments,function(e){r(e)&&function(e,t){var n;for(n in e)t[n]=e[n]}(Object(e),t)}),t}},"./node_modules/es5-ext/object/valid-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-callable.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},"./node_modules/es5-ext/object/valid-value.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-value.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js");e.exports=function(e){if(!r(e))throw new TypeError("Cannot use null or undefined");return e}},"./node_modules/es5-ext/string/#/contains/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/string/#/contains/is-implemented.js")()?String.prototype.contains:n(/*! ./shim */"./node_modules/es5-ext/string/#/contains/shim.js")},"./node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!******************************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r="razdwatrzy";e.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},"./node_modules/es5-ext/string/#/contains/shim.js":
/*!********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/shim.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=String.prototype.indexOf;e.exports=function(e){return r.call(this,e,arguments[1])>-1}},"./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a;"function"==typeof Symbol&&Symbol.iterator;"undefined"!=typeof window&&window,void 0===(a="function"==typeof(r=function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},r=n[e]=n[e]||[];return-1==r.indexOf(t)&&r.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{};return(n[e]=n[e]||{})[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var r=n.indexOf(t);return-1!=r&&n.splice(r,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),t=t||[];for(var r=this._onceEvents&&this._onceEvents[e],a=0;a<n.length;a++){var i=n[a];r&&r[i]&&(this.off(e,i),delete r[i]),i.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e})?r.call(t,n,t,e):r)||(e.exports=a)},"./node_modules/event-emitter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/event-emitter/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a,i,o,s,l,c,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d=n(/*! d */"./node_modules/d/index.js"),p=n(/*! es5-ext/object/valid-callable */"./node_modules/es5-ext/object/valid-callable.js"),f=Function.prototype.apply,g=Function.prototype.call,y=Object.create,h=Object.defineProperty,x=Object.defineProperties,m=Object.prototype.hasOwnProperty,v={configurable:!0,enumerable:!1,writable:!0};s={on:r=function(e,t){var n;return p(t),m.call(this,"__ee__")?n=this.__ee__:(n=v.value=y(null),h(this,"__ee__",v),v.value=null),n[e]?"object"===u(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:a=function(e,t){var n,a;return p(t),a=this,r.call(this,e,n=function(){i.call(a,e,n),f.call(t,this,arguments)}),n.__eeOnceListener__=t,this},off:i=function(e,t){var n,r,a,i;if(p(t),!m.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"===(void 0===(r=n[e])?"undefined":u(r)))for(i=0;a=r[i];++i)a!==t&&a.__eeOnceListener__!==t||(2===r.length?n[e]=r[i?0:1]:r.splice(i,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},emit:o=function(e){var t,n,r,a,i;if(m.call(this,"__ee__")&&(a=this.__ee__[e]))if("object"===(void 0===a?"undefined":u(a))){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(a=a.slice(),t=0;r=a[t];++t)f.call(r,this,i)}else switch(arguments.length){case 1:g.call(a,this);break;case 2:g.call(a,this,arguments[1]);break;case 3:g.call(a,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];f.call(a,this,i)}}},l={on:d(r),once:d(a),off:d(i),emit:d(o)},c=x({},l),e.exports=t=function(e){return null==e?y(c):x(Object(e),l)},t.methods=s},"./node_modules/get-size/get-size.js":
/*!*******************************************!*\
  !*** ./node_modules/get-size/get-size.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};window,void 0===(a="function"==typeof(r=function(){function e(e){var t=parseFloat(e),n=-1==e.indexOf("%")&&!isNaN(t);return n&&t}var t="undefined"==typeof console?function(){}:function(e){console.error(e)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],r=n.length;function a(e){var n=getComputedStyle(e);return n||t("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),n}var o,s=!1;function l(t){if(function(){if(!s){s=!0;var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(t);var r=a(t);o=200==Math.round(e(r.width)),l.isBoxSizeOuter=o,n.removeChild(t)}}(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==(void 0===t?"undefined":i(t))&&t.nodeType){var c=a(t);if("none"==c.display)return function(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;t<r;t++){var a=n[t];e[a]=0}return e}();var u={};u.width=t.offsetWidth,u.height=t.offsetHeight;for(var d=u.isBorderBox="border-box"==c.boxSizing,p=0;p<r;p++){var f=n[p],g=c[f],y=parseFloat(g);u[f]=isNaN(y)?0:y}var h=u.paddingLeft+u.paddingRight,x=u.paddingTop+u.paddingBottom,m=u.marginLeft+u.marginRight,v=u.marginTop+u.marginBottom,b=u.borderLeftWidth+u.borderRightWidth,k=u.borderTopWidth+u.borderBottomWidth,w=d&&o,_=e(c.width);!1!==_&&(u.width=_+(w?0:h+b));var E=e(c.height);return!1!==E&&(u.height=E+(w?0:x+k)),u.innerWidth=u.width-(h+b),u.innerHeight=u.height-(x+k),u.outerWidth=u.width+m,u.outerHeight=u.height+v,u}}return l})?r.call(t,n,t,e):r)||(e.exports=a)},"./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var r={},a=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),o=null,s=0,l=[],c=n(/*! ./urls */"./node_modules/style-loader/lib/urls.js");function u(e,t){for(var n=0;n<e.length;n++){var a=e[n],i=r[a.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](a.parts[o]);for(;o<a.parts.length;o++)i.parts.push(h(a.parts[o],t))}else{var s=[];for(o=0;o<a.parts.length;o++)s.push(h(a.parts[o],t));r[a.id]={id:a.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function p(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=i(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,a)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function g(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),p(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function h(e,t){var n,r,a,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var l=s++;n=o||(o=g(t)),r=m.bind(null,n,l,!1),a=m.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,a=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||i)&&(r=c(r));a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,n,t),a=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){f(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return u(n,t),function(e){for(var a=[],i=0;i<n.length;i++){var o=n[i];(s=r[o.id]).refs--,a.push(s)}e&&u(d(e,t),t);for(i=0;i<a.length;i++){var s;if(0===(s=a[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var x=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function m(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}},"./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},"./node_modules/unidragger/unidragger.js":
/*!***********************************************!*\
  !*** ./node_modules/unidragger/unidragger.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Unidragger v2.3.0
 * Draggable base class
 * MIT license
 */
!function(i,o){r=[n(/*! unipointer/unipointer */"./node_modules/unipointer/unipointer.js")],void 0===(a=function(e){return function(e,t){function n(){}var r=n.prototype=Object.create(t.prototype);r.bindHandles=function(){this._bindHandles(!0)},r.unbindHandles=function(){this._bindHandles(!1)},r._bindHandles=function(t){for(var n=(t=void 0===t||t)?"addEventListener":"removeEventListener",r=t?this._touchActionValue:"",a=0;a<this.handles.length;a++){var i=this.handles[a];this._bindStartEvent(i,t),i[n]("click",this),e.PointerEvent&&(i.style.touchAction=r)}},r._touchActionValue="none",r.pointerDown=function(e,t){var n=this.okayPointerDown(e);n&&(this.pointerDownPointer=t,e.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t]))};var a={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},i={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return r.okayPointerDown=function(e){var t=a[e.target.nodeName],n=i[e.target.type],r=!t||n;return r||this._pointerReset(),r},r.pointerDownBlur=function(){var e=document.activeElement;e&&e.blur&&e!=document.body&&e.blur()},r.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,n]),this._dragMove(e,t,n)},r._dragPointerMove=function(e,t){var n={x:t.pageX-this.pointerDownPointer.pageX,y:t.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(n)&&this._dragStart(e,t),n},r.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},r.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},r._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},r._dragStart=function(e,t){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(e,t)},r.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},r._dragMove=function(e,t,n){this.isDragging&&this.dragMove(e,t,n)},r.dragMove=function(e,t,n){e.preventDefault(),this.emitEvent("dragMove",[e,t,n])},r._dragEnd=function(e,t){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(e,t)},r.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},r.onclick=function(e){this.isPreventingClicks&&e.preventDefault()},r._staticClick=function(e,t){this.isIgnoringMouseUp&&"mouseup"==e.type||(this.staticClick(e,t),"mouseup"!=e.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},r.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},n.getPointerPoint=t.getPointerPoint,n}(i,e)}.apply(t,r))||(e.exports=a)}(window)},"./node_modules/unipointer/unipointer.js":
/*!***********************************************!*\
  !*** ./node_modules/unipointer/unipointer.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,a;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */
!function(i,o){r=[n(/*! ev-emitter/ev-emitter */"./node_modules/ev-emitter/ev-emitter.js")],void 0===(a=function(e){return function(e,t){function n(){}var r=n.prototype=Object.create(t.prototype);r.bindStartEvent=function(e){this._bindStartEvent(e,!0)},r.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},r._bindStartEvent=function(t,n){var r=(n=void 0===n||n)?"addEventListener":"removeEventListener",a="mousedown";e.PointerEvent?a="pointerdown":"ontouchstart"in e&&(a="touchstart"),t[r](a,this)},r.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},r.getTouch=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.identifier==this.pointerIdentifier)return n}},r.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},r.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},r.onpointerdown=function(e){this._pointerDown(e,e)},r._pointerDown=function(e,t){e.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},r.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var a={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return r._bindPostStartEvents=function(t){if(t){var n=a[t.type];n.forEach(function(t){e.addEventListener(t,this)},this),this._boundPointerEvents=n}},r._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach(function(t){e.removeEventListener(t,this)},this),delete this._boundPointerEvents)},r.onmousemove=function(e){this._pointerMove(e,e)},r.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},r.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},r._pointerMove=function(e,t){this.pointerMove(e,t)},r.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},r.onmouseup=function(e){this._pointerUp(e,e)},r.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},r.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},r._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},r.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},r._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},r._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},r.pointerDone=function(){},r.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},r.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},r._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},r.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},n.getPointerPoint=function(e){return{x:e.pageX,y:e.pageY}},n}(i,e)}.apply(t,r))||(e.exports=a)}(window)},"./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, main, bin, scripts, keywords, babel, repository, author, license, dependencies, browserslist, devDependencies, default */function(e){e.exports={name:"xgplayer",version:"2.2.0",description:"video player",main:"./dist/index.js",bin:{xgplayer:"bin/xgplayer.js"},scripts:{prepare:"npm run build",build:"webpack --progress --display-chunks -p",watch:"webpack --progress --display-chunks -p --watch --mode development"},keywords:["video","player"],babel:{presets:["es2015"],plugins:["add-module-exports","babel-plugin-bulk-import"]},repository:{type:"git",url:"git+https://github.com/bytedance/xgplayer.git"},author:"yinguohui@bytedance.com",license:"MIT",dependencies:{chalk:"^2.3.2",commander:"^2.15.1","danmu.js":"0.1.0",deepmerge:"^1.5.0",downloadjs:"1.4.7",draggabilly:"^2.2.0","event-emitter":"^0.3.5","fs-extra":"^5.0.0",pasition:"^1.0.1","request-frame":"^1.5.3"},browserslist:["> 5%","IE 9","iOS 7","Firefox > 20"],devDependencies:{autoprefixer:"^9.1.5","babel-core":"^6.26.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-bulk-import":"^1.0.2","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-plugin-transform-runtime":"^6.23.0","babel-preset-es2015":"^6.24.1",chai:"^4.1.2","core-js":"^2.5.4","css-loader":"^0.28.11","json-loader":"^0.5.7","node-sass":"^4.8.3","postcss-cssnext":"^3.1.0","postcss-loader":"^2.1.5","raw-loader":"^2.0.0","sass-loader":"^6.0.7","style-loader":"^0.20.3",sugarss:"^1.0.1",webpack:"^4.11.0","webpack-cli":"^3.0.2",zlib:"^1.0.5"}}},"./src/controls/collect.js":
/*!*********************************!*\
  !*** ./src/controls/collect.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var i=void 0,o=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.set=function(e,n){var r=e,a=n;if(null===a)return!1;var i="";if(r.indexOf(".")>-1){var o=r.split(".");i=o[0],r=o[1]}"os_version"===r&&(a=""+a),i?"user"===i||"header"===i?t.envInfo[i][r]=a:"headers"===i?t.envInfo.header.headers[r]=a:t.envInfo.header.headers.custom[r]=a:t.envInfo.user.hasOwnProperty(r)?["user_type","device_id","ip_addr_id"].indexOf(r)>-1?t.envInfo.user[r]=Number(a):["user_id","web_id","user_unique_id","ssid"].indexOf(r)>-1?t.envInfo.user[r]=String(a):["user_is_auth","user_is_login"].indexOf(r)>-1&&(t.envInfo.user[r]=Boolean(a)):t.envInfo.header.hasOwnProperty(r)?t.envInfo.header[r]=a:t.envInfo.header.headers.hasOwnProperty(r)?t.envInfo.header.headers[r]=a:t.envInfo.header.headers.custom[r]=a},this.get=function(){var e={user:{},header:{headers:{custom:{}}}},n=t.envInfo,r=n.user,o=Object.keys(r),s=Array.isArray(o),l=0;for(o=s?o:o[Symbol.iterator]();;){var c;if(s){if(l>=o.length)break;c=o[l++]}else{if((l=o.next()).done)break;c=l.value}var u=c;r[u]!==i&&(e.user[u]=r[u])}var d=n.header,p=Object.keys(d),f=Array.isArray(p),g=0;for(p=f?p:p[Symbol.iterator]();;){var y;if(f){if(g>=p.length)break;y=p[g++]}else{if((g=p.next()).done)break;y=g.value}var h=y;d[h]!==i&&"headers"!==h&&(e.header[h]=d[h])}var x=n.header.headers,m=Object.keys(x),v=Array.isArray(m),b=0;for(m=v?m:m[Symbol.iterator]();;){var k;if(v){if(b>=m.length)break;k=m[b++]}else{if((b=m.next()).done)break;k=b.value}var w=k;"custom"!==w&&x[w]!==i&&(e.header.headers[w]=x[w])}var _=n.header.headers.custom,E=Object.keys(_);if(E.length){var C=E,S=Array.isArray(C),P=0;for(C=S?C:C[Symbol.iterator]();;){var j;if(S){if(P>=C.length)break;j=C[P++]}else{if((P=C.next()).done)break;j=P.value}var T=j;e.header.headers.custom[T]=_[T]}}return{user:e.user,header:a({},e.header,{headers:e.header.headers})}},this.envInfo={user:{user_unique_id:i,user_type:i,user_id:i,user_is_auth:i,user_is_login:i,device_id:i,web_id:i,ip_addr_id:i,ssid:i},header:{app_id:i,app_name:i,app_install_id:i,app_package:i,app_channel:i,app_version:i,os_name:i,os_version:i,device_model:i,ab_client:i,ab_version:i,traffic_type:i,utm_source:i,utm_medium:i,utm_campaign:i,client_ip:i,device_brand:i,os_api:i,access:i,language:i,region:i,app_language:i,app_region:i,creative_id:i,ad_id:i,campaign_id:i,log_type:i,rnd:i,platform:i,sdk_version:i,province:i,city:i,timezone:i,tz_offset:i,tz_name:i,sim_region:i,carrier:i,resolution:i,browser:i,browser_version:i,referrer:i,referrer_host:i,headers:{utm_term:i,utm_content:i,custom:{}}}}},s=function(e){var t=document.createElement("a");return t.href=e,t},l=screen.width||0,c=screen.height||0,u=l+" x "+c,d=navigator.appVersion,p=navigator.userAgent,f=navigator.language,g=document.referrer,y=s(g).hostname,h=function(e){var t=s(e).search,n={};return(t=t.slice(1)).split("&").forEach(function(e){var t=e.split("="),r=t[0],a=t[1];n[r]=decodeURIComponent(void 0===a?"":a)}),n}(location.href),x="",m="",v="",b=""+parseFloat(d),k=void 0,w=void 0;-1!==(k=p.indexOf("Opera"))&&(v="Opera",b=p.substring(k+6),-1!==(k=p.indexOf("Version"))&&(b=p.substring(k+8))),-1!==(k=p.indexOf("Edge"))?(v="Microsoft Edge",b=p.substring(k+5)):-1!==(k=p.indexOf("MSIE"))?(v="Microsoft Internet Explorer",b=p.substring(k+5)):-1!==(k=p.indexOf("Chrome"))?(v="Chrome",b=p.substring(k+7)):-1!==(k=p.indexOf("Safari"))?(v="Safari",b=p.substring(k+7),-1!==(k=p.indexOf("Version"))&&(b=p.substring(k+8))):-1!==(k=p.indexOf("Firefox"))&&(v="Firefox",b=p.substring(k+8)),-1!==(w=b.indexOf(";"))&&(b=b.substring(0,w)),-1!==(w=b.indexOf(" "))&&(b=b.substring(0,w)),-1!==(w=b.indexOf(")"))&&(b=b.substring(0,w));for(var _=/Mobile|htc|mini|Android|iP(ad|od|hone)/.test(d)?"wap":"web",E=[{s:"Windows 10",r:/(Windows 10.0|Windows NT 10.0)/},{s:"Windows 8.1",r:/(Windows 8.1|Windows NT 6.3)/},{s:"Windows 8",r:/(Windows 8|Windows NT 6.2)/},{s:"Windows 7",r:/(Windows 7|Windows NT 6.1)/},{s:"Android",r:/Android/},{s:"Sun OS",r:/SunOS/},{s:"Linux",r:/(Linux|X11)/},{s:"iOS",r:/(iPhone|iPad|iPod)/},{s:"Mac OS X",r:/Mac OS X/},{s:"Mac OS",r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/}],C=0;C<E.length;C++){var S=E[C];if(S.r.test(p)){x=S.s;break}}function P(e,t){var n=e.exec(t);return n&&n[1]?n[1]:""}switch(/Windows/.test(x)&&(m=P(/Windows (.*)/,x),x="windows"),x){case"Mac OS X":m=P(/Mac OS X (10[\.\_\d]+)/,p),x="mac";break;case"Android":m=function(e){var t=P(/Android ([\.\_\d]+)/,e);return t||(t=P(/Android\/([\.\_\d]+)/,e)),t}(p),x="android";break;case"iOS":m=(m=/OS (\d+)_(\d+)_?(\d+)?/.exec(d))?m[1]+"."+m[2]+"."+(0|m[3]):"",x="ios"}var j={screen_size:u,browser:v,browser_version:b,platform:_,os_name:x,os_version:m,userAgent:p,screen_width:l,screen_height:c,device_model:x,language:f,referrer:g,referrer_host:y,utm_source:h.utm_source,utm_medium:h.utm_medium,utm_campaign:h.utm_campaign,utm_term:h.utm_term,utm_content:h.utm_content},T={get:function(e){var t="no localStorage";localStorage&&localStorage.getItem&&(t=localStorage.getItem(e));var n=t;try{t&&"string"==typeof t&&(n=JSON.parse(t))}catch(e){}return n},set:function(e,t){try{var n="string"==typeof t?t:JSON.stringify(t);localStorage&&localStorage.setItem&&localStorage.setItem(e,n)}catch(e){}}},O="__tea_cache_",L=4001,D=4e3,M=4002,R=4003,z=500,A=5001,I="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};var B=function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init=function(e){t.isLog=e},this.info=function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];var i;t.isLog&&(i=console).log.apply(i,[t.prefix+e].concat(r))},this.warn=function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];var i;t.isLog&&(i=console).warn.apply(i,[t.prefix+e].concat(r))},this.error=function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];var i;t.isLog&&(i=console).error.apply(i,[t.prefix+e].concat(r))},this.dir=function(){var e;t.isLog&&(e=console).dir.apply(e,arguments)},this.table=function(e){t.isLog&&console.table(e)},this.logJSON=function(e){"object"===(void 0===e?"undefined":I(e))&&t.isLog&&t.info("",JSON.stringify(e,null,2))},this.deprecated=function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];t.warn.apply(t,["[DEPRECATED]"+e].concat(r))},this.throw=function(e){throw t.error(t.prefix),new Error(e)};var r=n?"["+n+"]":"";this.prefix="[tea-sdk]"+r},N=new B,q=function(e,t,n,r){var a=new XMLHttpRequest;a.open("POST",e,!0),a.setRequestHeader("Content-Type","application/json; charset=utf-8"),a.onload=function(){try{var e=JSON.parse(a.responseText);n&&n(e)}catch(e){r&&r()}},a.onerror=function(){r&&r()},a.send(JSON.stringify(t))};var F=(new Date).getTimezoneOffset(),U=parseInt(-F/60,10),H=60*F,W=void 0;try{W="3.2.7"}catch(e){W="2.x"}var V=new(function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,e.call(this));return n.initClientEnv=function(){n.set("os_name",j.os_name),n.set("os_version",j.os_version),n.set("device_model",j.device_model),n.set("platform",j.platform),n.set("sdk_version",W),n.set("browser",j.browser),n.set("browser_version",j.browser_version),n.set("language",j.language),n.set("timezone",U),n.set("tz_offset",H),n.set("resolution",j.screen_width+"x"+j.screen_height),n.set("screen_width",j.screen_width),n.set("screen_height",j.screen_height),n.set("referrer",j.referrer),n.set("referrer_host",j.referrer_host),n.set("utm_source",j.utm_source),n.set("utm_medium",j.utm_medium),n.set("utm_campaign",j.utm_campaign),n.set("utm_term",j.utm_term),n.set("utm_content",j.utm_content)},n.initClientEnv(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(o));var Y=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.isString=function(e){return"String"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isNumber=function(e){return"Number"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isBoolean=function(e){return"Boolean"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isFunction=function(e){return"Function"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isNull=function(e){return"Null"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isUndefined=function(e){return"Undefined"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isObj=function(e){return"Object"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isArray=function(e){return"Array"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isFalse=function(e){return""===e||void 0===e||null===e||"null"===e||"undefined"===e||0===e||!1===e||NaN===e},e.prototype.isTrue=function(e){return!this.isFalse(e)},e.prototype.isLowIE=function(){return window.XDomainRequest},e}());var K=function(e){return function(e,t,n){if("string"==typeof e&&"number"==typeof t&&"number"==typeof n){var r,a=[];n=n<=25?n:n%25;var i=String.fromCharCode(n+97);r=e.split(i);for(var o=0;o<r.length;o++){var s=parseInt(r[o],n);s=1*s^t;var l=String.fromCharCode(s);a.push(l)}return a.join("")}}(e,64,25)};function X(e){return e?(e^16*Math.random()>>e/4).toString(10):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,X)}var J=function(){return X().replace(/-/g,"").slice(0,19)},$=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Q={cn:"1fz22z22z1nz21z4mz4bz4bz1kz1az21z4az21z1lz21z21z1bz1iz4az1az1mz1k",sg:"1fz22z22z1nz21z4mz4bz4bz21z1ez18z1jz1gz49z1kz1az21z4az19z27z22z1cz1mz24z1cz20z21z1cz18z4az1az1mz1k",va:"1fz22z22z1nz21z4mz4bz4bz1kz18z1jz1gz24z18z49z1kz1az21z4az19z27z22z1cz1mz24z1cz20z21z1cz18z4az1az1mz1k"},G=function(e){try{var t=document.cookie.match(new RegExp("(?:^|;)\\s*"+e+"=([^;]+)"));return decodeURIComponent(t?t[1]:"")}catch(e){return""}},Z=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,e.call(this));return n.init=function(e){var t=e.app_id,r=e.channel,a=e.log,i=e.channel_domain,o=e.name;if("number"!=typeof t)throw new Error("app_id 必须是一个数字，注意检查是否是以`string`的方式传入的？");n.logger=new B(o),n.logger.init(a),n.initConfigs(e),n.initUrls(r,i),n.setEnv("app_id",t)},n.initConfigs=function(e){var t=e.app_id,r=e.disable_ssid,a=e.disable_webid,i=e.disable_sdk_monitor;n.app_id=t,n.evtDataCacheKey=O+"events_"+t,r&&(n.logger.info("ssid已禁用，设置user_unique_id不会请求ssid接口。"),n.isSsidDisabled=!0),a&&(n.logger.info("webid服务已禁用，ssid同时被禁用。将本地生成webid。"),n.isWebidDisabled=!0,n.isSsidDisabled=!0),i&&(n.logger.info("SDK监控已禁用。"),n.isSdkMonitorDisabled=!0)},n.initUrls=function(e,t){if("internal"===e&&(n.logger.warn("channel 的值 internal 已被废弃，已自动改为 cn。"),e="cn"),!t&&!Q[e])throw new Error("channel 变量只能是 `cn`, `sg`,`va`");var r=t||K(Q[e]);r=r.replace(/\/+$/,""),n.reportUrl=r+"/v1/list",n.userTokensPrefix=""+r},n.setEnv=function(e,t){if("app_id"===e&&n.checkUserToken(t),"user_unique_id"===e){if(n.blackUuid.some(function(e){return e===String(t)}))return void n.logger.warn('设置了无效的值 {user_unique_id："%s"}。该操作已忽略。',t);n.verifyTokens(t)}if("web_id"===e){if(!t)return;(!n.envInfo.user.user_unique_id||n.envInfo.user.user_unique_id&&n.envInfo.user.user_unique_id===n.envInfo.user.web_id)&&n.set("user_unique_id",t)}n.set(e,t)},n.transferFromCookie=function(){var e=n.tokensCacheKey,t=G("tt_webid"),r=G("__tea_sdk__ssid"),a=G("__tea_sdk__user_unique_id");if(Y.isLowIE()){if(t){var i={web_id:t,ssid:t,user_unique_id:t};T.set(e,JSON.stringify(i))}return!1}if(t&&r&&a){var o={web_id:t,ssid:r,user_unique_id:a};T.set(e,JSON.stringify(o))}},n.purifyBlackUuid=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(n.blackUuid.some(function(t){return t===e.user_unique_id})){var t={};return n.setUserTokens(t),n.logger.warn('检测到无效的用户标识，已重置用户状态。{user_unique_id: "%s"}',e.user_unique_id),t}return e},n.getUserTokens=function(){return T.get(n.tokensCacheKey)||{}},n.setUserTokens=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return T.set(n.tokensCacheKey,e)},n.checkUserToken=function(e){var t=O+"tokens_"+e;n.tokensCacheKey=t,n.transferFromCookie();var r=n.purifyBlackUuid(n.getUserTokens());r.user_unique_id&&r.web_id?(n.envInfo.user.user_unique_id=r.user_unique_id,n.envInfo.user.web_id=r.web_id,n.envInfo.user.ssid=r.ssid||"",n.logger.info("初始化已经检测到了 webid user_unique_id，一般情况下不需要再次验证 id 了"),n.unlock()):n.requestWebId(e)},n.saveTokenToStorage=function(e){var t=e.web_id,r=e.ssid,a=e.user_unique_id;n.setUserTokens({web_id:t,ssid:r,user_unique_id:a})},n.requestWebId=function(){n.isRequestWebId=!0;var e=function(e){var t=n.envInfo.user.web_id||e.web_id,r=e.ssid;n.isRequestWebId=!1,n.envInfo.user.ssid=r,n.envInfo.user.web_id=t,n.envInfo.user.user_unique_id=t,n.saveTokenToStorage({web_id:t,ssid:r,user_unique_id:t}),n.waitForVerifyTokens?(n.lock(),n.verifyTokens(n.realUuid)):(n.unlock(),n.callback&&n.callback())};n.isWebidDisabled?e({web_id:J(),ssid:""}):function(){var t=n.userTokensPrefix+"/v1/user/webid";q(t,{app_id:n.app_id,url:location.href,user_agent:j.userAgent,referer:j.referrer,user_unique_id:""},function(t){0!==t.e?n.logger.error("请求 webid 失败。请联系管理员。"):e(t)},function(){n.isRequestWebId=!1,n.logger.error("获取 webid 失败，数据将不会被上报")})}()},n.verifyTokens=function(e){var t=n.tokensCacheKey;if(n.waitForVerifyTokens=!1,n.realUuid=""+e,n.isRequestWebId)return n.waitForVerifyTokens=!0,n.logger.info("正在请求 webid，requestSsid 将会在前者请求完毕之后被调用"),!1;var r=n.getUserTokens();if(r.user_unique_id===n.realUuid&&r.ssid&&r.web_id)n.logger.info("传入的 user_id/user_unique_id 与 缓存中的完全一致，无需再次请求"),n.unlock();else{n.lock(),n.envInfo.user.user_unique_id=n.realUuid;var a=$({},n.getUserTokens(),{user_unique_id:n.realUuid});if(T.set(t,JSON.stringify(a)),Y.isLowIE())return n.unlock(),!1;n.isSsidDisabled?(n.unlock(),n.callback&&n.callback()):n.requestSsid()}},n.requestSsid=function(){var e=n.getUserTokens(),t=n.userTokensPrefix+"/v1/user/ssid";q(t,{app_id:n.app_id,web_id:e.web_id,user_unique_id:""+e.user_unique_id},function(t){if(n.unlock(),0!==t.e)n.logger.error("请求 ssid 失败~");else{n.envInfo.user.ssid=t.ssid;var r=$({},e,{ssid:t.ssid});n.setUserTokens(r),n.logger.info("根据 user_unique_id 更新 ssid 成功！注意：在这之前不应该有数据被发出去"),n.callback&&n.callback()}},function(){n.unlock(),n.logger.error("根据 user_unique_id 获取新 ssid 失败")})},n.setEvtParams=function(e){var t=$({},e);Object.keys(t).forEach(function(e){n.evtParams[e]=t[e]})},n.mergeEnvToEvents=function(e){var t=n.mergeEnv(),r=[],a=0,i=void 0;return e.forEach(function(e){var t=!!e.params.__disable_storage__;void 0===i?i=t:(t!==i||r[a].length>=5)&&(a+=1,i=!i),r[a]=r[a]||[],r[a].push(e)}),r.map(function(e){return{events:e.map(function(e){var t=$({},n.evtParams,e.params);return delete t.__disable_storage__,$({},e,{params:JSON.stringify(t)})}),user:t.user,header:t.header,verbose:n.debugMode?1:void 0,__disable_storage__:e[0].params.__disable_storage__}})},n.mergeEnv=function(){var e=n.get(),t=V.get(),r=$({},e.user),a=$({},t.header.headers.custom,e.header.headers.custom),i=$({},t.header.headers,e.header.headers,{custom:a}),o=$({},t.header,e.header);return{user:r,header:$({},o,{headers:JSON.stringify(i)})}},n.evtParams={},n.reportUrl="",n.userTokensPrefix="",n.isSsidDisabled=!1,n.isWebidDisabled=!1,n.isSdkMonitorDisabled=!1,n.debugMode=!1,n.blackUuid=["null","undefined","0","","None"],n.logger=function(){},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.lock=function(){this.isUserTokensReady=!1},t.prototype.unlock=function(){this.isUserTokensReady=!0},t.prototype.enableDebugMode=function(e){this.debugMode=e},t}(o);var ee=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.set=function(e,n){t.cache[e]=n},this.get=function(e){return t.cache[e]},this.clean=function(e){t.cache[e]=void 0},this.cache={}},te=new ee;var ne=function(){function e(t){var n=t.disable_storage,r=void 0!==n&&n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._isPersistent=!r,this._storage=this._isPersistent?T:new ee,this._storageKey="",this._data=void 0}return e.prototype.setStorageKey=function(e){this._storageKey=e},e.prototype.getAllEvents=function(){var e=this.getData();Object.keys(e).reduce(function(t,n){return t.concat(e[n]||[])},[])},e.prototype.getData=function(){return this._checkIsDataInit(),this._data},e.prototype.add=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];this._checkIsDataInit(),0!==t.length&&(this._data[e]=t,this._save())},e.prototype.delete=function(e){this._checkIsDataInit(),this._data[e]&&(delete this._data[e],this._save())},e.prototype._checkIsDataInit=function(){if(void 0===this._data)try{var e,t=this._getDataFromStorage();if(Y.isArray(t))this._data=((e={})[J()]=t,e),this._save();else this._data=t}catch(e){this._data={}}},e.prototype._checkStorageKey=function(){if(!this._storageKey)throw new Error("must call setStorageKey('xxx') first")},e.prototype._getDataFromStorage=function(){return this._checkStorageKey(),this._storage.get(this._storageKey)||{}},e.prototype._save=function(){this._checkStorageKey(),this._storage.set(this._storageKey,this._data)},e}(),re=function(e,t){try{var n=e.split("v1")[0];t.forEach(function(e){var t=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+="&"+n+"="+encodeURIComponent(JSON.stringify(e[n])));return t="&"===t[0]?t.slice(1):t}(e),r=new Image(1,1);r.onload=function(){r=null},r.onerror=function(){r=null},r.src=n+"/v1/gif?"+t})}catch(e){}},ae=function(e,t){if(window.XDomainRequest)return re(e,t);var n=new XMLHttpRequest;n.open("POST",e+"?rdn="+Math.random(),!0),n.onload=function(){},n.onerror=function(){n.abort()},n.send(JSON.stringify(t))},ie=function e(t,n,r,a){try{var i=t.split("v1")[0];if(!i)return void a(t,n,L);n.forEach(function(e){var o=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+="&"+n+"="+encodeURIComponent(JSON.stringify(e[n])));return t="&"===t[0]?t.slice(1):t}(e),s=new Image(1,1);s.onload=function(){s=null,r()},s.onerror=function(){s=null,a(t,n,D)},s.src=i+"/v1/gif?"+o})}catch(e){a(t,n,M,e.message)}};var oe=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.send=function(e){var t=e.url,r=e.data,a=e.success,i=e.fail,o=e.eventError;if(function(e){var t=e.url,n=e.data,r=e.success,a=e.fail,i=e.notSure,o=e.isUnload,s=n;if(window.XDomainRequest)ie(t,s,r,a);else{if(o)return window.navigator&&window.navigator.sendBeacon?(i(),void(window.navigator.sendBeacon(t,JSON.stringify(s))?r():a(t,n,R))):void ie(t,s,r,a);var l=new XMLHttpRequest;l.open("POST",t+"?rdn="+Math.random(),!0),l.onload=function(){r(t,s,l.responseText)},l.onerror=function(){l.abort(),a(t,s,z)},l.send(JSON.stringify(s))}}({url:t,data:r,success:function(e,t,r){a();try{var i=JSON.parse(r).e;if(0!==i){var s="未知错误";-2===i&&(s="事件格式错误！请检查字段类型是否正确。"),n.logger.error("数据上报失败！","错误码："+i+"。错误信息："+s),o(t,i),le(e,t,i)}}catch(n){le(e,t,A)}},fail:function(e,t,r){n.logger.error("数据上报失败！","错误码："+r),i(t,r),le(e,t,r)},notSure:e.notSure,isUnload:e.isUnload}),!n.isSdkMonitorDisabled&&!n.isSdkOnLoadEventReady){n.isSdkOnLoadEventReady=!0;try{var s=r[0].header,l=r[0].user;se(t,{app_id:s.app_id,app_name:s.app_name,sdk_version:s.sdk_version,web_id:l.web_id})}catch(e){}}},this.logger=t.logger||N,this.isSdkOnLoadEventReady=!1,this.isSdkMonitorDisabled=!1},se=function(e,t){try{var n={events:[{event:"onload",params:JSON.stringify({app_id:t.app_id,app_name:t.app_name||"",sdk_version:t.sdk_version}),local_time_ms:Date.now()}],user:{user_unique_id:t.web_id},header:{app_id:1338}};setTimeout(function(){ae(e,[n])},16)}catch(e){}},le=function(e,t,n){try{var r=t[0].user,a=t[0].header,i=[];t.forEach(function(e){e.events.forEach(function(e){i.push(e)})});var o={events:i.map(function(e){return{event:"on_error",params:JSON.stringify({error_code:n,app_id:a.app_id,app_name:a.app_name||"",error_event:e.event,local_time_ms:e.local_time_ms,tea_event_index:Date.now(),params:e.params,header:JSON.stringify(a),user:JSON.stringify(r)}),local_time_ms:Date.now()}}),user:{user_unique_id:r.user_unique_id},header:{app_id:1338}};setTimeout(function(){ae(e,[o])},16)}catch(e){}};var ce=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,e.call(this));a.addListener=function(){window.addEventListener("unload",function(){a.report(!0)},!1),window.addEventListener("beforeunload",function(){a.report(!0)},!1),document.addEventListener("visibilitychange",function(){"hidden"===document.visibilityState&&a.report(!0)},!1)},a.setReady=function(e){a.isReady=e,a.eventSender.isSdkMonitorDisabled=a.isSdkMonitorDisabled,a.checkAndSendCachedStorageEvents(),a.report()},a.eventReportTimer=null,a.event=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=te.get(a.evtDataCacheKey)||[],r=t?[].concat(e,n):[].concat(n,e);te.set(a.evtDataCacheKey,r),r.length>=5?a.report():(a.eventReportTimer&&clearTimeout(a.eventReportTimer),a.eventReportTimer=setTimeout(function(){a.report(),a.eventReportTimer=null},a.waitForBatchTime))},a.report=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!a.isUserTokensReady)return!1;if(!a.isReady)return!1;var t=te.get(a.evtDataCacheKey)||[];te.clean(a.evtDataCacheKey);var n=a.mergeEnvToEvents(t);a.sendData(n,e)},a.sendData=function(e,t){var n=[],r=0,i=void 0;e.forEach(function(e){var t=!!e.__disable_storage__;void 0===i?i=t:(t!==i||n[r].length>=5)&&(r+=1,i=!i),n[r]=n[r]||[],n[r].push(e)}),n.forEach(function(e){var n=J();e[0].__disable_storage__||a.eventStorage.add(n,e),a._sendData(n,e,t)})},a.checkAndSendCachedStorageEvents=function(){var e=a.eventStorage.getData(),t=Object.keys(e);t.length>0&&t.forEach(function(t){a._sendData(t,e[t])})},a._sendData=function(e,t,n){a.isReporting=!0;var r=function(){a.isReporting=!1};a.eventSender.send({url:a.reportUrl,data:t,success:function(){r(),a.sendDataSuccess(e)},fail:function(e,t){r(),a.reportErrorCallback(e,t),setTimeout(function(){a.report()},3e3)},eventError:function(e,t){a.reportErrorCallback(e,t)},notSure:r,isUnload:n})},a.sendDataSuccess=function(e){a.eventStorage.delete(e),a.report()};var i=n.log,o=n.disable_storage,s=n.max_batch_num,l=void 0===s?5:s,c=n.batch_time,u=void 0===c?30:c;return a.init(n),a.maxBatchNum=l,a.waitForBatchTime=u,a.isReady=!1,a.addListener(),a.enableDebugMode(!!i),a.eventStorage=new ne({disable_storage:o}),a.eventStorage.setStorageKey(a.evtDataCacheKey),a.eventSender=new oe({logger:a.logger}),a.reportErrorCallback=function(){},a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(Z),ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var de=function(){var e=+Date.now()+Number((""+Math.random()).slice(2,8));return function(){return e+=1}}(),pe=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init=function(e){if(!Y.isObj(e))throw new Error("init 的参数必须是Object类型");n.logger.init(e.log),n.channel=new ce(ue({},e,{name:n.name})),n.channel.callback=function(){n.callbackSend&&n.start()}},this.config=function(e){Y.isObj(e)||n.logger.throw("config 参数必须是 {} 的格式"),e.log&&(n.logger.init(!0),n.channel.enableDebugMode(!0),e.log=null);var t=Object.keys(e);if(!t.length)return!1;var r=t,a=Array.isArray(r),i=0;for(r=a?r:r[Symbol.iterator]();;){var o;if(a){if(i>=r.length)break;o=r[i++]}else{if((i=r.next()).done)break;o=i.value}var s=o,l=e[s];switch(s){case"evtParams":n.channel.setEvtParams(l);break;case"disable_ssid":n.logger.deprecated("(disable_ssid)请通过init函数来设置。"),l&&(n.logger.info("ssid已禁用，设置user_unique_id不会请求ssid接口。"),n.channel.isSsidDisabled=l);break;case"disable_auto_pv":l&&(n.logger.info("已禁止默认上报predefine_pageview事件，需手动上报。"),n._autoSendPV=!1);break;case"_staging_flag":""+l=="1"&&n.logger.info("根据_staging_flag设置，数据将会上报到stag 表。"),n.channel.setEvtParams({_staging_flag:Number(l)});break;case"reportErrorCallback":"function"==typeof l&&(n.channel.reportErrorCallback=l);break;default:n.channel.setEnv(s,l)}}},this.send=function(){n.start()},this.start=function(){if(n.channel.isUserTokensReady){if(n._isSendFuncCalled)return;n._isSendFuncCalled=!0,n.logger.info("看到本提示，意味着用户信息已完全就绪，上报通道打开。用户标识如下："),n.logger.logJSON(n.channel.get().user),n._autoSendPV&&n.predefinePageView(),n.channel.setReady(!0)}else n.callbackSend=!0},this.predefinePageView=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={title:document.title||location.pathname,url:location.href,url_path:location.pathname},r=ue({},t,e);n.event("predefine_pageview",r,!0)},this.event=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var a=Y.isBoolean(t[t.length-1]),i=!!a&&t[t.length-1],o=a?t.slice(0,t.length-1):t,s=o[0],l=[];Y.isArray(s)?l=o:l[0]=o,l=l.map(function(e){return function(e,t){var n=e;/^event\./.test(e)&&(n=e.slice(6));var r=t;return Y.isObj(r)||(r={}),r.event_index=de(),{event:n,params:r,local_time_ms:+new Date}}.apply(void 0,e)}),n.channel.event(l,i)},this._isSendFuncCalled=!1,this._autoSendPV=!0,this.name=t,this.logger=new B(t)};pe.exportMethods=["init","config","send","start","predefinePageView"];t.default=function e(t){var n=this;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._exportCollect=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];n._isQueueProcessed?n._executeCmd.apply(n,t):(n.cmdQueue.push(t),n._processCmdQueue())},this._processCmdQueue=function(){if(0!==n.cmdQueue.length){var e=function(e,t,n){var r=-1;return e.forEach(function(e,a){(void 0!==n?e[n]:e)===t&&(r=a)}),r}(n.cmdQueue,"init","0");-1!==e&&(n._isQueueProcessed=!0,n._executeCmd.apply(n,n.cmdQueue[e]),n.cmdQueue.forEach(function(t,r){r!==e&&n._executeCmd.apply(n,t)}),n.cmdQueue=[])}},this._executeCmd=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var a,i,o=t[0];pe.exportMethods.indexOf(o)>-1?(a=n.colloctor)[o].apply(a,t.slice(1)):(i=n.colloctor).event.apply(i,t)},this.name=t||"Collector"+ +new Date,this.cmdQueue=[],this.colloctor=new pe(this.name),this._isQueueProcessed=!1,this._processCmdQueue(),this._exportCollect.init=this._exportCollect.bind(this,"init"),this._exportCollect.config=this._exportCollect.bind(this,"config"),this._exportCollect.send=this._exportCollect.bind(this,"send"),this._exportCollect.start=this._exportCollect.bind(this,"start"),this._exportCollect.predefinePageView=this._exportCollect.bind(this,"predefinePageView"),this._exportCollect},e.exports=t.default},"./src/controls/cssFullscreen.js":
/*!***************************************!*\
  !*** ./src/controls/cssFullscreen.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("cssFullscreen",function(){var e=this,t=e.root,n=r.default.util;function a(){n.hasClass(t,"xgplayer-is-cssfullscreen")?e.exitCssFullscreen():e.getCssFullscreen()}e.on("cssFullscreenBtnClick",a),e.on("exitFullscreen",function(){n.removeClass(t,"xgplayer-is-cssfullscreen")}),e.once("destroy",function t(){e.off("cssFullscreenBtnClick",a),e.off("destroy",t)})})},"./src/controls/danmu.js":
/*!*******************************!*\
  !*** ./src/controls/danmu.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("danmu",function(){var e=this,t=(e.root,r.default.util);e.on("initDefaultDanmu",function(n){var r=e.root.querySelector("xg-danmu");if(t.addClass(r,"xgplayer-has-danmu"),!e.config.danmu.closeDefaultBtn){var a=function(){n.start()},i=function(){t.hasClass(e.danmuBtn,"danmu-switch-active")&&n.pause()},o=function(){t.hasClass(e.danmuBtn,"danmu-switch-active")&&n.play()},s=function(){t.hasClass(e.danmuBtn,"danmu-switch-active")&&(n.stop(),n.start())};e.danmuBtn=t.copyDom(n.bulletBtn.createSwitch(!0)),e.controls.appendChild(e.danmuBtn),["click","touchend"].forEach(function(i){e.danmuBtn.addEventListener(i,function(i){i.preventDefault(),i.stopPropagation(),t.toggleClass(e.danmuBtn,"danmu-switch-active"),t.hasClass(e.danmuBtn,"danmu-switch-active")?(t.addClass(r,"xgplayer-has-danmu"),e.once("timeupdate",a)):(t.removeClass(r,"xgplayer-has-danmu"),n.stop())})}),e.onElementClick&&r.addEventListener("click",function(t){e.onElementClick(t,r)},!1),e.onElementDblclick&&r.addEventListener("dblclick",function(t){e.onElementDblclick(t,r)},!1),e.on("pause",i),e.on("play",o),e.on("seeked",s),e.once("destroy",function t(){e.off("timeupdate",a),e.off("pause",i),e.off("play",o),e.off("seeked",s),e.off("destroy",t)})}})})},"./src/controls/definition.js":
/*!************************************!*\
  !*** ./src/controls/definition.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("definition",function(){var e=this;e.root;e.once("destroy",function t(){e.off("destroy",t)})})},"./src/controls/download.js":
/*!**********************************!*\
  !*** ./src/controls/download.js ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("download",function(){var e=this;function t(){e.download()}e.on("downloadBtnClick",t),e.once("destroy",function n(){e.off("downloadBtnClick",t),e.off("destroy",n)})})},"./src/controls/fullscreen.js":
/*!************************************!*\
  !*** ./src/controls/fullscreen.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("fullscreen",function(){var e=this,t=e.root,n=r.default.util;function a(){n.hasClass(t,"xgplayer-is-fullscreen")?e.exitFullscreen(t):e.getFullscreen(t)}function i(){var r=document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement;r&&r===t?(n.addClass(t,"xgplayer-is-fullscreen"),e.emit("requestFullscreen")):(n.removeClass(t,"xgplayer-is-fullscreen"),e.emit("exitFullscreen"))}e.on("fullscreenBtnClick",a),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach(function(e){document.addEventListener(e,i)}),e.once("destroy",function t(){e.off("fullscreenBtnClick",a),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach(function(e){document.removeEventListener(e,i)}),e.off("destroy",t)})})},"./src/controls/i18n.js":
/*!******************************!*\
  !*** ./src/controls/i18n.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("i18n",function(){var e=this,t={},n=e.constructor.util;t.en={HAVE_NOTHING:"There is no information on whether audio/video is ready",HAVE_METADATA:"Audio/video metadata is ready ",HAVE_CURRENT_DATA:"Data about the current play location is available, but there is not enough data to play the next frame/millisecond",HAVE_FUTURE_DATA:"Current and at least one frame of data is available",HAVE_ENOUGH_DATA:"The available data is sufficient to start playing",NETWORK_EMPTY:"Audio/video has not been initialized",NETWORK_IDLE:"Audio/video is active and has been selected for resources, but no network is used",NETWORK_LOADING:"The browser is downloading the data",NETWORK_NO_SOURCE:"No audio/video source was found",MEDIA_ERR_ABORTED:"The fetch process is aborted by the user",MEDIA_ERR_NETWORK:"An error occurred while downloading",MEDIA_ERR_DECODE:"An error occurred while decoding",MEDIA_ERR_SRC_NOT_SUPPORTED:"Audio/video is not supported",REPLAY:"Replay",ERROR:"Network is offline",PLAY_TIPS:"Play",PAUSE_TIPS:"Pause",PLAYNEXT_TIPS:"Play next",DOWNLOAD_TIPS:"Download",ROTATE_TIPS:"Rotate",FULLSCREEN_TIPS:"Fullscreen",EXITFULLSCREEN_TIPS:"Exit fullscreen",CSSFULLSCREEN_TIPS:"Cssfullscreen",EXITCSSFULLSCREEN_TIPS:"Exit cssfullscreen",TEXTTRACK:"Caption",PIP:"Pip",SCREENSHOT:"Screenshot"},t["zh-cn"]={HAVE_NOTHING:"没有关于音频/视频是否就绪的信息",HAVE_METADATA:"音频/视频的元数据已就绪",HAVE_CURRENT_DATA:"关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒",HAVE_FUTURE_DATA:"当前及至少下一帧的数据是可用的",HAVE_ENOUGH_DATA:"可用数据足以开始播放",NETWORK_EMPTY:"音频/视频尚未初始化",NETWORK_IDLE:"音频/视频是活动的且已选取资源，但并未使用网络",NETWORK_LOADING:"浏览器正在下载数据",NETWORK_NO_SOURCE:"未找到音频/视频来源",MEDIA_ERR_ABORTED:"取回过程被用户中止",MEDIA_ERR_NETWORK:"当下载时发生错误",MEDIA_ERR_DECODE:"当解码时发生错误",MEDIA_ERR_SRC_NOT_SUPPORTED:"不支持的音频/视频格式",REPLAY:"重播",ERROR:"网络连接似乎出现了问题",PLAY_TIPS:"播放",PAUSE_TIPS:"暂停",PLAYNEXT_TIPS:"下一集",DOWNLOAD_TIPS:"下载",ROTATE_TIPS:"旋转",FULLSCREEN_TIPS:"进入全屏",EXITFULLSCREEN_TIPS:"退出全屏",CSSFULLSCREEN_TIPS:"进入样式全屏",EXITCSSFULLSCREEN_TIPS:"退出样式全屏",TEXTTRACK:"字幕",PIP:"画中画",SCREENSHOT:"截图"},t.jp={HAVE_NOTHING:"オーディオ/ビデオが準備できているか情報がありません",HAVE_METADATA:"オーディオ/ビデオのメタデータは準備できています",HAVE_CURRENT_DATA:"現在の再生位置に関するデータは利用可能ですが、次のフレーム/ミリ秒を再生するのに十分なデータがありません",HAVE_FUTURE_DATA:"現在、少なくとも次のフレームのデータが利用可能です",HAVE_ENOUGH_DATA:"利用可能なデータは再生を開始するのに十分です",NETWORK_EMPTY:"オーディオ/ビデオが初期化されていません",NETWORK_IDLE:"オーディオ/ビデオはアクティブでリソースが選択されていますが、ネットワークが使用されていません",NETWORK_LOADING:"ブラウザーはデータをダウンロードしています",NETWORK_NO_SOURCE:"オーディオ/ビデオ のソースが見つかりません",MEDIA_ERR_ABORTED:"ユーザーによってフェッチプロセスが中止されました",MEDIA_ERR_NETWORK:"ダウンロード中にエラーが発生しました",MEDIA_ERR_DECODE:"デコード中にエラーが発生しました",MEDIA_ERR_SRC_NOT_SUPPORTED:"オーディオ/ビデオ の形式がサポートされていません",REPLAY:"リプレイ",ERROR:"ネットワークの接続に問題が発生しました",PLAY_TIPS:"プレイ",PAUSE_TIPS:"一時停止",PLAYNEXT_TIPS:"次をプレイ",DOWNLOAD_TIPS:"ダウンロード",ROTATE_TIPS:"回転",FULLSCREEN_TIPS:"フルスクリーン",EXITFULLSCREEN_TIPS:"フルスクリーンを終了",CSSFULLSCREEN_TIPS:"シアターモード",EXITCSSFULLSCREEN_TIPS:"シアターモードを終了",TEXTTRACK:"字幕",PIP:"ミニプレーヤー",SCREENSHOT:"スクリーンショット"},Object.defineProperty(e,"lang",{get:function(){return e.config&&t[e.config.lang]||t.en},set:function(e){"Object"===n.typeOf(e)&&Object.keys(e).forEach(function(n){t[n]=e[n]})}})})},"./src/controls/localPreview.js":
/*!**************************************!*\
  !*** ./src/controls/localPreview.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("localPreview",function(){var e=this,t=e.root;function n(n){e.uploadFile=n.files[0];var r=URL.createObjectURL(e.uploadFile);util.hasClass(t,"xgplayer-nostart")?(e.config.url=r,e.start()):(e.src=r,e.play())}e.on("upload",n),e.once("destroy",function t(){e.off("upload",n),e.off("destroy",t)})})},"./src/controls/logger.js":
/*!********************************!*\
  !*** ./src/controls/logger.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! ../player */"./src/player.js")),a=o(n(/*! ../utils/sniffer */"./src/utils/sniffer.js")),i=o(n(/*! ./collect */"./src/controls/collect.js"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("logger",function(){var e=this,t=r.default.util;if(!0!==e.config.noLog){var n=function(){e.video.played;var t=l(e.logParams.played),n=(new Date).getTime();c();var r={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*t).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),et:n};window.__xigua_log_sdk__("c",r)},o=function(){e.video.played;var t=l(e.logParams.played),n=(new Date).getTime();c();var r={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*t).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),lt:n};window.__xigua_log_sdk__("d",r)},s=function(t){e.video.played;var n=l(e.logParams.played);c();var r=(new Date).getTime();if(!(e.logParams.lastErrLog&&r-e.logParams.lastErrLog<=3e3)){e.logParams.lastErrLog=r;var a={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*n).toFixed(3)),err_msg:t.errd.msg,line:t.errd.line,et:r,cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3))};if(e.logParams.nologFunc&&e.logParams.nologFunc(e))return!0;window.__xigua_log_sdk__("e",a)}};window.__xigua_log_sdk__||(window.__xigua_log_sdk__=new i.default("tracker"),window.__xigua_log_sdk__.init({app_id:1300,channel:"cn",log:!1,disable_sdk_monitor:!0}),window.__xigua_log_sdk__("config",{evtParams:{log_type:"logger",page_url:document.URL,domain:window.location.host,pver:e.version,ua:navigator.userAgent.toLowerCase()},disable_auto_pv:!0}),window.__xigua_log_sdk__.start()),e.config.uid&&window.__xigua_log_sdk__("config",{user_unique_id:e.config.uid});var l=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=[],n=0;n<e.length;n++)if(!(!e[n].end||e[n].begin<0||e[n].end<0||e[n].end<e[n].begin))if(t.length<1)t.push({begin:e[n].begin,end:e[n].end});else for(var r=0;r<t.length;r++){var a=e[n].begin,i=e[n].end;if(i<t[r].begin){t.splice(r,0,{begin:a,end:i});break}if(!(a>t[r].end)){var o=t[r].begin,s=t[r].end;t[r].begin=Math.min(a,o),t[r].end=Math.max(i,s);break}if(r>t.length-2){t.push({begin:a,end:i});break}}for(var l=0,c=0;c<t.length;c++)l+=t[c].end-t[c].begin;return l},c=function(){e.logParams.pt&&e.logParams.vt||(e.logParams.pt=(new Date).getTime(),e.logParams.vt=e.logParams.pt),e.logParams.pt>e.logParams.vt&&(e.logParams.pt=e.logParams.vt)},u=function(n){if(t.hasClass(e.root,"xgplayer-is-enter")){var r=(new Date).getTime(),a={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,pt:e.logParams.pt,lt:r};window.__xigua_log_sdk__("b",a)}else if(t.hasClass(e.root,"xgplayer-playing")){var i=l(e.logParams.played),o=(new Date).getTime();c();var s={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*i).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),lt:o};window.__xigua_log_sdk__("d",s)}};"pc"===a.default.device?window.addEventListener("beforeunload",u,!1):"mobile"===a.default.device&&window.addEventListener("pagehide",u,!1),e.on("routechange",u),e.on("ended",n),e.on("urlchange",o),e.on("error",s),e.once("destroy",function t(){"pc"===a.default.device?window.removeEventListener("beforeunload",u):"mobile"===a.default.device&&window.removeEventListener("pagehide",u),e.off("routechange",u),e.off("ended",n),e.off("urlchange",o),e.off("error",s),e.off("destroy",t)})}})},"./src/controls/memoryPlay.js":
/*!************************************!*\
  !*** ./src/controls/memoryPlay.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("memoryPlay",function(){var e=this;e.on("memoryPlayStart",function(t){e.currentTime=t})})},"./src/controls/mobile.js":
/*!********************************!*\
  !*** ./src/controls/mobile.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("mobile",function(){var e=this,t=r.default.util,n=(e.controls,e.root);function a(t){e.config.autoplay&&e.start()}e.onElementTouchend=function(e,r){if(e.preventDefault(),e.stopPropagation(),t.hasClass(n,"xgplayer-inactive")?this.emit("focus"):this.emit("blur"),!this.config.closeVideoTouch&&!this.isTouchMove){if(t.hasClass(this.root,"xgplayer-nostart"))return!1;this.ended||(this.paused?this.play():this.pause())}},e.video.addEventListener("touchend",function(t){e.onElementTouchend(t,e.video)},!1),e.video.addEventListener("touchstart",function(){e.isTouchMove=!1}),e.video.addEventListener("touchmove",function(){e.isTouchMove=!0}),e.once("ready",a),e.once("destroy",function t(){e.off("ready",a),e.off("destroy",t)})})},"./src/controls/pc.js":
/*!****************************!*\
  !*** ./src/controls/pc.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("pc",function(){var e=this,t=r.default.util,n=e.controls,a=e.root,i=0,o=void 0;function s(){clearTimeout(e.leavePlayerTimer),e.emit("focus",e)}function l(){e.config.closePlayerBlur||(e.leavePlayerTimer=setTimeout(function(){e.emit("blur",e)},e.config.leavePlayerTime||0))}function c(t){e.config.autoplay&&e.start()}e.onElementClick=function(e,n){e.preventDefault(),e.stopPropagation();var r=this;r.config.closeVideoClick||(i++,o&&clearTimeout(o),1===i?o=setTimeout(function(){if(t.hasClass(r.root,"xgplayer-nostart"))return!1;r.ended||(r.paused?r.play():r.pause()),i=0},200):i=0)},e.video.addEventListener("click",function(t){e.onElementClick(t,e.video)},!1),e.onElementDblclick=function(e,t){if(e.preventDefault(),e.stopPropagation(),!this.config.closeVideoDblclick){var r=n.querySelector(".xgplayer-fullscreen");if(r){var a=void 0;document.createEvent?(a=document.createEvent("Event")).initEvent("click",!0,!0):a=new Event("click"),r.dispatchEvent(a)}}},e.video.addEventListener("dblclick",function(t){e.onElementDblclick(t,e.video)},!1),a.addEventListener("mouseenter",s),a.addEventListener("mouseleave",l),n.addEventListener("mouseenter",function(t){e.userTimer&&clearTimeout(e.userTimer)},!1),n.addEventListener("mouseleave",function(t){e.config.closeControlsBlur||e.emit("focus",e)},!1),e.once("ready",c),e.once("destroy",function t(){a.removeEventListener("mouseenter",s),a.removeEventListener("mouseleave",l),e.off("ready",c),e.off("destroy",t)})})},"./src/controls/pip.js":
/*!*****************************!*\
  !*** ./src/controls/pip.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("pip",function(){var e=this,t=r.default.util,n=e.root;function a(){t.hasClass(n,"xgplayer-pip-active")?e.exitPIP():e.getPIP()}e.on("pipBtnClick",a),e.once("destroy",function t(){e.off("pipBtnClick",a),e.off("destroy",t)})})},"./src/controls/play.js":
/*!******************************!*\
  !*** ./src/controls/play.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("play",function(){var e=this;function t(){e.ended||(e.paused?e.play():e.pause())}e.on("playBtnClick",t),e.once("destroy",function n(){e.off("playBtnClick",t),e.off("destroy",n)})})},"./src/controls/playNext.js":
/*!**********************************!*\
  !*** ./src/controls/playNext.js ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("playNext",function(){var e=this,t=(e.root,e.config.playNext);function n(){e.currentVideoIndex+1<t.urlList.length?(e.currentVideoIndex++,e.video.autoplay=!0,e.src=t.urlList[e.currentVideoIndex],e.emit("playerNext",e.currentVideoIndex+1)):e.emit("urlList last")}e.currentVideoIndex=-1,e.on("playNextBtnClick",n),e.once("destroy",function t(){e.off("playNextBtnClick",n),e.off("destroy",t)})})},"./src/controls/replay.js":
/*!********************************!*\
  !*** ./src/controls/replay.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("replay",function(){var e=this,t=r.default.util,n=e.root;function a(){t.removeClass(n,"replay"),e.replay()}e.on("replayBtnClick",a),e.on("ended",function(){e.config.loop||t.addClass(n,"replay")}),e.once("destroy",function t(){e.off("replayBtnClick",a),e.off("destroy",t)})})},"./src/controls/rotate.js":
/*!********************************!*\
  !*** ./src/controls/rotate.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("rotate",function(){var e=this,t=e.config.rotate;function n(){e.rotate(t.clockwise,t.innerRotate)}t&&(e.on("rotateBtnClick",n),e.once("destroy",function t(){e.off("rotateBtnClick",n),e.off("destroy",t)}))})},"./src/controls/screenShot.js":
/*!************************************!*\
  !*** ./src/controls/screenShot.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){return e&&e.__esModule?e:{default:e}})(n(/*! ../player */"./src/player.js")).default.install("screenShot",function(){var e=this;e.root;if(e.config.screenShot){var t=document.createElement("canvas"),n=t.getContext("2d"),r=new Image;t.width=this.config.width||600,t.height=this.config.height||337.5;var a=function(e,t){var n=document.createElement("a");n.href=e,n.download=t;var r=document.createEvent("MouseEvents");r.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(r)};e.on("screenShotBtnClick",i),e.once("destroy",function t(){e.off("screenShotBtnClick",i),e.off("destroy",t)})}function i(){r.onload=function(){n.drawImage(e.video,0,0,t.width,t.height),r.setAttribute("crossOrigin","anonymous"),r.src=t.toDataURL("image/png").replace("image/png","image/octet-stream");var i=r.src.replace(/^data:image\/[^;]+/,"data:application/octet-stream");a(i,"截图.png")}()}})},"./src/controls/start.js":
/*!*******************************!*\
  !*** ./src/controls/start.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("start",function(){var e=this,t=e.root,n=r.default.util;function a(){n.removeClass(t,"xgplayer-is-enter")}function i(){n.removeClass(t,"xgplayer-is-enter")}function o(){n.hasClass(t,"xgplayer-nostart")?(n.removeClass(t,"xgplayer-nostart"),n.addClass(t,"xgplayer-is-enter"),e.on("canplay",a),e.once("playing",i),t.querySelector("video")||e.start(),e.play()):e.paused&&(n.removeClass(t,"xgplayer-nostart xgplayer-isloading"),setTimeout(function(){e.play()},10))}e.on("startBtnClick",o),e.once("destroy",function t(){e.off("canplay",a),e.off("playing",i),e.off("startBtnClick",o),e.off("destroy",t)})})},"./src/controls/volume.js":
/*!********************************!*\
  !*** ./src/controls/volume.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../player */"./src/player.js"));r.default.install("volume",function(){var e=this,t=e.root,n=r.default.util,a=void 0,i=void 0,o=void 0,s=void 0;function l(){e.volume="mobile"===r.default.sniffer.device?1:e.config.volume,a=e.controls.querySelector(".xgplayer-volume"),i=a.querySelector(".xgplayer-slider"),o=a.querySelector(".xgplayer-bar"),s=a.querySelector(".xgplayer-drag"),a.querySelector(".xgplayer-icon")}function c(t){e.video.muted=!1,i.focus(),n.event(t);var r=o.getBoundingClientRect(),a=(t.clientX,t.clientY),l=s.getBoundingClientRect().height,c=!1,u=function(t){t.preventDefault(),t.stopPropagation(),n.event(t),c=!0;var i=l-t.clientY+a,o=i/r.height;s.style.height=i+"px",e.volume=Math.max(Math.min(o,1),0)},d=function t(a){if(a.preventDefault(),a.stopPropagation(),n.event(a),window.removeEventListener("mousemove",u),window.removeEventListener("touchmove",u),window.removeEventListener("mouseup",t),window.removeEventListener("touchend",t),!c){var o=r.height-(a.clientY-r.top),l=o/r.height;s.style.height=o+"px",l<=0&&(e.volume>0?s.volume=e.video.volume:l=s.volume),e.volume=Math.max(Math.min(l,1),0)}i.volume=e.volume,c=!1};return window.addEventListener("mousemove",u),window.addEventListener("touchmove",u),window.addEventListener("mouseup",d),window.addEventListener("touchend",d),!1}function u(){"mobile"===r.default.sniffer.device?e.video.muted?e.video.muted=!1:e.video.muted=!0:(e.video.muted=!1,e.volume<.1?e.volume=i.volume:e.volume=0)}function d(){n.addClass(t,"xgplayer-volume-active"),a&&a.focus()}function p(){n.removeClass(t,"xgplayer-volume-active")}e.once("canplay",l),e.on("volumeBarClick",c),e.on("volumeIconClick",u),e.on("volumeIconEnter",d),e.on("volumeIconLeave",p);var f=null;function g(){f&&clearTimeout(f),f=setTimeout(function(){if("mobile"===r.default.sniffer.device)n.removeClass(t,"xgplayer-volume-muted"),n.removeClass(t,"xgplayer-volume-large"),e.video.muted?n.addClass(t,"xgplayer-volume-muted"):n.addClass(t,"xgplayer-volume-large");else{n.removeClass(t,"xgplayer-volume-muted"),n.removeClass(t,"xgplayer-volume-small"),n.removeClass(t,"xgplayer-volume-large"),0===e.volume?n.addClass(t,"xgplayer-volume-muted"):e.volume<.5?n.addClass(t,"xgplayer-volume-small"):n.addClass(t,"xgplayer-volume-large");var a=o.getBoundingClientRect().height||76;s.style.height=e.volume*a+"px"}},50)}e.on("volumechange",g),e.once("destroy",function t(){e.off("canplay",l),e.off("volumeBarClick",c),e.off("volumeIconClick",u),e.off("volumeIconEnter",d),e.off("volumeIconLeave",p),e.off("volumechange",g),e.off("destroy",t)})})},"./src/error.js":
/*!**********************!*\
  !*** ./src/error.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(/*! ../package.json */"./package.json");var a={network:{code:1,msg:"视频下载错误",remark:"只要视频下载错误就使用此类型，无论是video本身的超时还是xhr的分段请求超时或者资源不存在"},mse:{code:2,msg:"流追加错误",remark:"追加流的时候如果类型不对、无法被正确解码则会触发此类错误"},parse:{code:3,msg:"解析错误",remark:"mp4、hls、flv我们都是使用js进行格式解析，如果解析失败则会触发此类错误"},format:{code:4,msg:"格式错误",remark:"如果浏览器不支持的格式导致播放错误"},decoder:{code:5,msg:"解码错误",remark:"浏览器解码异常会抛出此类型错误"},runtime:{code:6,msg:"语法错误",remark:"播放器语法错误"},timeout:{code:7,msg:"播放超时",remark:"播放过程中无法正常请求下一个分段导致播放中断"},other:{code:8,msg:"其他错误",remark:"不可知的错误或被忽略的错误类型"}};t.default=function e(t,n,i,o,s,l,c,u){var d=arguments.length>8&&void 0!==arguments[8]?arguments[8]:{line:"",handle:"",msg:"",version:""};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var p={};return p.playerVersion=r.version,p.errorType=t,p.domain=document.domain,p.duration=i,p.currentTime=n,p.networkState=o,p.readyState=s,p.currentSrc=c,p.src=l,p.ended=u,p.errd=d,p.ex=(a[t]||{}).msg,p},e.exports=t.default},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=E(n(/*! ./player */"./src/player.js")),a=E(n(/*! ./controls/volume.js */"./src/controls/volume.js")),i=E(n(/*! ./controls/start.js */"./src/controls/start.js")),o=E(n(/*! ./controls/screenShot.js */"./src/controls/screenShot.js")),s=E(n(/*! ./controls/rotate.js */"./src/controls/rotate.js")),l=E(n(/*! ./controls/replay.js */"./src/controls/replay.js")),c=E(n(/*! ./controls/playNext.js */"./src/controls/playNext.js")),u=E(n(/*! ./controls/play.js */"./src/controls/play.js")),d=E(n(/*! ./controls/pip.js */"./src/controls/pip.js")),p=E(n(/*! ./controls/pc.js */"./src/controls/pc.js")),f=E(n(/*! ./controls/mobile.js */"./src/controls/mobile.js")),g=E(n(/*! ./controls/memoryPlay.js */"./src/controls/memoryPlay.js")),y=E(n(/*! ./controls/logger.js */"./src/controls/logger.js")),h=E(n(/*! ./controls/localPreview.js */"./src/controls/localPreview.js")),x=E(n(/*! ./controls/i18n.js */"./src/controls/i18n.js")),m=E(n(/*! ./controls/fullscreen.js */"./src/controls/fullscreen.js")),v=E(n(/*! ./controls/download.js */"./src/controls/download.js")),b=E(n(/*! ./controls/definition.js */"./src/controls/definition.js")),k=E(n(/*! ./controls/danmu.js */"./src/controls/danmu.js")),w=E(n(/*! ./controls/cssFullscreen.js */"./src/controls/cssFullscreen.js")),_=E(n(/*! ./controls/collect.js */"./src/controls/collect.js"));E(n(/*! ./skin */"./src/skin/index.js"));function E(e){return e&&e.__esModule?e:{default:e}}var C={};function S(e,t,n){var r=e;t.map(function(e,a){r[e]=a==t.length-1?n:r[e]||{},r=r[e]})}S(C,["controls","collect"],_.default),S(C,["controls","cssFullscreen"],w.default),S(C,["controls","danmu"],k.default),S(C,["controls","definition"],b.default),S(C,["controls","download"],v.default),S(C,["controls","fullscreen"],m.default),S(C,["controls","i18n"],x.default),S(C,["controls","localPreview"],h.default),S(C,["controls","logger"],y.default),S(C,["controls","memoryPlay"],g.default),S(C,["controls","mobile"],f.default),S(C,["controls","pc"],p.default),S(C,["controls","pip"],d.default),S(C,["controls","play"],u.default),S(C,["controls","playNext"],c.default),S(C,["controls","replay"],l.default),S(C,["controls","rotate"],s.default),S(C,["controls","screenShot"],o.default),S(C,["controls","start"],i.default),S(C,["controls","volume"],a.default),t.default=r.default,e.exports=t.default},"./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(/*! ./proxy */"./src/proxy.js")),i=f(n(/*! ./utils/util */"./src/utils/util.js")),o=f(n(/*! ./utils/database */"./src/utils/database.js")),s=f(n(/*! ./utils/sniffer */"./src/utils/sniffer.js")),l=f(n(/*! ./error */"./src/error.js")),c=f(n(/*! draggabilly */"./node_modules/draggabilly/draggabilly.js")),u=n(/*! ./utils/url */"./src/utils/url.js"),d=f(n(/*! downloadjs */"./node_modules/downloadjs/download.js")),p=n(/*! ../package.json */"./package.json");function f(e){return e&&e.__esModule?e:{default:e}}function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=g(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(n.config=i.default.deepCopy({width:600,height:337.5,ignores:[],whitelist:[],lang:(document.documentElement.getAttribute("lang")||navigator.language||"zh-cn").toLocaleLowerCase(),inactive:3e3,volume:.6,controls:!0,controlsList:["nodownload"]},e),n.version=p.version,n.userTimer=null,n.waitTimer=null,n.database=new o.default,n.history=[],n.isProgressMoving=!1,n.root=i.default.findDom(document,"#"+n.config.id),n.controls=i.default.createDom("xg-controls","",{unselectable:"on",onselectstart:"return false"},"xgplayer-controls"),!n.root){var r=n.config.el;if(!r||1!==r.nodeType)return n.emit("error",new l.default("use",n.config.vid,{line:32,handle:"Constructor",msg:"container id can't be empty"})),!1,g(n,!1);n.root=r}if(i.default.addClass(n.root,"xgplayer xgplayer-"+s.default.device+" xgplayer-nostart "+(n.config.controls?"":"no-controls")),n.root.appendChild(n.controls),n.config.fluid?(n.root.style["max-width"]="100%",n.root.style.width="100%",n.root.style.height="0",n.root.style["padding-top"]=100*n.config.height/n.config.width+"%",n.video.style.position="absolute",n.video.style.top="0",n.video.style.left="0"):(n.config.width&&("number"!=typeof n.config.width?n.root.style.width=n.config.width:n.root.style.width=n.config.width+"px"),n.config.height&&("number"!=typeof n.config.height?n.root.style.height=n.config.height:n.root.style.height=n.config.height+"px")),n.config.execBeforePluginsCall&&n.config.execBeforePluginsCall.forEach(function(e){e.call(n,n)}),n.config.controlStyle&&"String"===i.default.typeOf(n.config.controlStyle)){var a=n;fetch(a.config.controlStyle,{method:"GET",headers:{Accept:"application/json"}}).then(function(e){e.ok&&e.json().then(function(e){for(var t in e)e.hasOwnProperty(t)&&(a.config[t]=e[t]);a.pluginsCall()})}).catch(function(e){console.log("Fetch错误:"+e)})}else n.pluginsCall();n.ev.forEach(function(e){var t=Object.keys(e)[0],r=n[e[t]];r&&n.on(t,r)}),["focus","blur"].forEach(function(e){n.on(e,n["on"+e.charAt(0).toUpperCase()+e.slice(1)])});var c=n;return n.mousemoveFunc=function(){c.emit("focus"),c.config.closeFocusVideoFocus||c.video.focus()},n.root.addEventListener("mousemove",n.mousemoveFunc),n.playFunc=function(){c.emit("focus"),c.config.closePlayVideoFocus||c.video.focus()},c.once("play",n.playFunc),n.getVideoSize=function(){if(this.video.videoWidth&&this.video.videoHeight){var e=c.root.getBoundingClientRect();"auto"===c.config.fitVideoSize?e.width/e.height>this.video.videoWidth/this.video.videoHeight?c.root.style.height=this.video.videoHeight/this.video.videoWidth*e.width+"px":c.root.style.width=this.video.videoWidth/this.video.videoHeight*e.height+"px":"fixWidth"===c.config.fitVideoSize?c.root.style.height=this.video.videoHeight/this.video.videoWidth*e.width+"px":"fixHeight"===c.config.fitVideoSize&&(c.root.style.width=this.video.videoWidth/this.video.videoHeight*e.height+"px")}},c.once("loadeddata",n.getVideoSize),setTimeout(function(){n.emit("ready")},0),n.config.keyShortcut&&"on"!==n.config.keyShortcut||["video","controls"].forEach(function(e){c[e].addEventListener("keydown",function(e){c.onKeydown(e,c)})}),n.config.videoInit&&i.default.hasClass(n.root,"xgplayer-nostart")&&n.start(),c.config.rotate&&(c.on("requestFullscreen",n.updateRotateDeg),c.on("exitFullscreen",n.updateRotateDeg)),c.once("destroy",function e(){c.root.removeEventListener("mousemove",c.mousemoveFunc),c.off("destroy",e)}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"start",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.config.url,r=this.root,a=this;n&&""!==n||this.emit("urlNull"),this.logParams.playSrc=n,this.canPlayFunc=function(){var e=a.video.play();void 0!==e&&e&&e.then(function(){a.emit("autoplay started")}).catch(function(){a.emit("autoplay was prevented"),t.util.addClass(a.root,"xgplayer-is-autoplay")}),a.off("canplay",a.canPlayFunc)},"String"===i.default.typeOf(n)?this.video.src=n:n.forEach(function(t){e.video.appendChild(i.default.createDom("source","",{src:""+t.src,type:""+(t.type||"")}))}),this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.loadeddataFunc=function(){a.logParams.vt=(new Date).getTime(),a.logParams.pt>a.logParams.vt&&(a.logParams.pt=a.logParams.vt),a.logParams.vd=a.video.duration},this.once("loadeddata",this.loadeddataFunc),this.config.autoplay&&this.on("canplay",this.canPlayFunc),r.insertBefore(this.video,r.firstChild),setTimeout(function(){e.emit("complete")},1)}},{key:"reload",value:function(){this.video.load(),this.reloadFunc=function(){this.play()},this.once("loadeddata",this.reloadFunc)}},{key:"destroy",value:function(){var e=this,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],r=this;this.root.parentNode;for(var a in clearInterval(this.bulletResizeTimer),this._interval)clearInterval(this._interval[a]),this._interval[a]=null;function i(){if(this.emit("destroy"),this.video.removeAttribute("src"),this.video.load(),n){this.root.innerHTML="";var e=this.root.className.split(" ");e.length>0?this.root.className=e.filter(function(e){return e.indexOf("xgplayer")<0}).join(" "):this.root.className=""}for(var t in this)delete this[t];this.off("pause",i)}this.ev.forEach(function(t){var n=Object.keys(t)[0],r=e[t[n]];r&&e.off(n,r)}),this.loadeddataFunc&&this.off("loadeddata",this.loadeddataFunc),this.reloadFunc&&this.off("loadeddata",this.reloadFunc),this.replayFunc&&this.off("play",this.replayFunc),this.playFunc&&this.off("play",this.playFunc),this.getVideoSize&&this.off("loadeddata",this.getVideoSize),["focus","blur"].forEach(function(t){e.off(t,e["on"+t.charAt(0).toUpperCase()+t.slice(1)])}),this.config.keyShortcut&&"on"!==this.config.keyShortcut||["video","controls"].forEach(function(t){e[t]&&e[t].removeEventListener("keydown",function(e){r.onKeydown(e,r)})}),this.paused?i.call(this):(this.pause(),this.once("pause",i)),function e(t,n,r){null===t&&(t=Function.prototype);var a=Object.getOwnPropertyDescriptor(t,n);if(void 0===a){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in a)return a.value;var o=a.get;return void 0!==o?o.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"destroy",this).call(this)}},{key:"replay",value:function(){var e=this,t=this._replay;i.default.removeClass(this.root,"xgplayer-ended"),this.logParams={bc:0,bu_acu_t:0,played:[],pt:(new Date).getTime(),vt:(new Date).getTime(),vd:0},this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.replayFunc=function(){e.logParams.vt=(new Date).getTime(),e.logParams.pt>e.logParams.vt&&(e.logParams.pt=e.logParams.vt),e.logParams.vd=e.video.duration},this.once("play",this.replayFunc),this.logParams.playSrc=this.video.currentSrc,t&&t instanceof Function?t():(this.currentTime=0,this.play())}},{key:"getFullscreen",value:function(e){e.requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):this.video.webkitSupportsFullscreen?this.video.webkitEnterFullscreen():e.msRequestFullscreen?e.msRequestFullscreen():i.default.addClass(e,"xgplayer-is-cssfullscreen")}},{key:"exitFullscreen",value:function(e){document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen&&document.msExitFullscreen(),i.default.removeClass(e,"xgplayer-is-cssfullscreen")}},{key:"getCssFullscreen",value:function(){i.default.addClass(this.root,"xgplayer-is-cssfullscreen"),this.emit("requestCssFullscreen")}},{key:"exitCssFullscreen",value:function(){i.default.removeClass(this.root,"xgplayer-is-cssfullscreen"),this.emit("exitCssFullscreen")}},{key:"download",value:function(){var e=(0,u.getAbsoluteURL)(this.config.url);(0,d.default)(e)}},{key:"pluginsCall",value:function(){var e=this,n=this;if(t.plugins){var r=this.config.ignores;Object.keys(t.plugins).forEach(function(a){var i=t.plugins[a];r.some(function(e){return a===e||a==="s_"+e})||(["pc","tablet","mobile"].some(function(e){return e===a})?a===s.default.device&&setTimeout(function(){i.call(n,n)},0):i.call(e,e))})}}},{key:"getPIP",value:function(){var e=i.default.createDom("xg-pip-lay","<div></div>",{},"xgplayer-pip-lay");this.root.appendChild(e);var t=i.default.createDom("xg-pip-drag",'<div class="drag-handle"><span>点击按住可拖动视频</span></div>',{tabindex:9},"xgplayer-pip-drag");this.root.appendChild(t);new c.default(".xgplayer",{handle:".drag-handle"});i.default.addClass(this.root,"xgplayer-pip-active"),this.root.style.right=0,this.root.style.bottom="200px",this.root.style.top="",this.root.style.left="",this.root.style.width="320px",this.root.style.height="180px",this.config.pipConfig&&(void 0!==this.config.pipConfig.top&&(this.root.style.top=this.config.pipConfig.top+"px",this.root.style.bottom=""),void 0!==this.config.pipConfig.bottom&&(this.root.style.bottom=this.config.pipConfig.bottom+"px"),void 0!==this.config.pipConfig.left&&(this.root.style.left=this.config.pipConfig.left+"px",this.root.style.right=""),void 0!==this.config.pipConfig.right&&(this.root.style.right=this.config.pipConfig.right+"px"),void 0!==this.config.pipConfig.width&&(this.root.style.width=this.config.pipConfig.width+"px"),void 0!==this.config.pipConfig.height&&(this.root.style.height=this.config.pipConfig.height+"px")),this.config.fluid&&(this.root.style["padding-top"]="");var n=this;["click","touchend"].forEach(function(t){e.addEventListener(t,function(e){e.preventDefault(),e.stopPropagation(),n.exitPIP()})})}},{key:"exitPIP",value:function(){i.default.removeClass(this.root,"xgplayer-pip-active"),this.root.style.right="",this.root.style.bottom="",this.root.style.top="",this.root.style.left="",this.config.fluid?(this.root.style.width="100%",this.root.style.height="0",this.root.style["padding-top"]=100*this.config.height/this.config.width+"%"):(this.config.width&&("number"!=typeof this.config.width?this.root.style.width=this.config.width:this.root.style.width=this.config.width+"px"),this.config.height&&("number"!=typeof this.config.height?this.root.style.height=this.config.height:this.root.style.height=this.config.height+"px"));var e=i.default.findDom(this.root,".xgplayer-pip-lay");e&&e.parentNode&&e.parentNode.removeChild(e);var t=i.default.findDom(this.root,".xgplayer-pip-drag");t&&t.parentNode&&t.parentNode.removeChild(t)}},{key:"updateRotateDeg",value:function(){this.rotateDeg||(this.rotateDeg=0);var e=this.root.offsetWidth,t=this.root.offsetHeight,n=this.video.videoWidth,r=this.video.videoHeight;this.config.rotate.innerRotate;var a=void 0;if(.25===this.rotateDeg||.75===this.rotateDeg){if(this.config.rotate.innerRotate)if(n/r>t/e){a=t/(r/n>t/e?t*n/r:e)}else{a=e/(r/n>t/e?t:e*r/n)}else a=e>=t?e/t:t/e;a=parseFloat(a.toFixed(5))}else a=1;this.config.rotate.innerRotate?(this.video.style.transformOrigin="center center",this.video.style.transform="rotate("+this.rotateDeg+"turn) scale("+a+")",this.video.style.webKitTransform="rotate("+this.rotateDeg+"turn) scale("+a+")"):(this.root.style.transformOrigin="center center",this.root.style.transform="rotate("+this.rotateDeg+"turn) scale(1)",this.root.style.webKitTransform="rotate("+this.rotateDeg+"turn) scale(1)")}},{key:"rotate",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=(!(arguments.length>1&&void 0!==arguments[1])||arguments[1],arguments.length>2&&void 0!==arguments[2]?arguments[2]:1);this.rotateDeg||(this.rotateDeg=0);var n=e?1:-1;this.rotateDeg=(this.rotateDeg+1+.25*n*t)%1,this.updateRotateDeg(),this.emit("rotate",360*this.rotateDeg)}},{key:"onFocus",value:function(){var e=this;i.default.removeClass(this.root,"xgplayer-inactive"),e.userTimer&&clearTimeout(e.userTimer),e.userTimer=setTimeout(function(){e.emit("blur")},e.config.inactive)}},{key:"onBlur",value:function(){this.paused||this.ended||i.default.addClass(this.root,"xgplayer-inactive")}},{key:"onPlay",value:function(){i.default.addClass(this.root,"xgplayer-playing"),i.default.removeClass(this.root,"xgplayer-pause")}},{key:"onPause",value:function(){i.default.addClass(this.root,"xgplayer-pause"),this.userTimer&&clearTimeout(this.userTimer),this.emit("focus")}},{key:"onEnded",value:function(){i.default.addClass(this.root,"xgplayer-ended"),i.default.removeClass(this.root,"xgplayer-playing")}},{key:"onSeeking",value:function(){}},{key:"onSeeked",value:function(){this.waitTimer&&clearTimeout(this.waitTimer),i.default.removeClass(this.root,"xgplayer-isloading")}},{key:"onWaiting",value:function(){var e=this;e.waitTimer&&clearTimeout(e.waitTimer),e.waitTimer=setTimeout(function(){i.default.addClass(e.root,"xgplayer-isloading")},500)}},{key:"onPlaying",value:function(){this.waitTimer&&clearTimeout(this.waitTimer),i.default.removeClass(this.root,"xgplayer-isloading xgplayer-nostart xgplayer-pause xgplayer-ended xgplayer-is-error xgplayer-replay"),i.default.addClass(this.root,"xgplayer-playing")}},{key:"onKeydown",value:function(e,t){var n=e||window.event;if(!n||37!==n.keyCode&&38!==n.keyCode&&39!==n.keyCode&&40!==n.keyCode&&32!==n.keyCode||t.emit("focus"),!n||40!==n.keyCode&&38!==n.keyCode)n&&39===n.keyCode?t.currentTime+10<=t.duration?t.currentTime+=10:t.currentTime=t.duration-1:n&&37===n.keyCode?t.currentTime-10>=0?t.currentTime-=10:t.currentTime=0:n&&32===n.keyCode&&(t.paused?t.play():t.pause());else{if(t.controls){var r=t.controls.querySelector(".xgplayer-slider");r&&(i.default.hasClass(r,"xgplayer-none")&&i.default.removeClass(r,"xgplayer-none"),t.sliderTimer&&clearTimeout(t.sliderTimer),t.sliderTimer=setTimeout(function(){i.default.addClass(r,"xgplayer-none")},t.config.inactive))}n&&40===n.keyCode?t.volume-.1>=0?t.volume=parseFloat((t.volume-.1).toFixed(1)):t.volume=0:n&&38===n.keyCode&&(t.volume+.1<=1?t.volume=parseFloat((t.volume+.1).toFixed(1)):t.volume=1)}}}],[{key:"install",value:function(e,n){t.plugins||(t.plugins={}),t.plugins[e]||(t.plugins[e]=n)}},{key:"use",value:function(e,n){t.plugins||(t.plugins={}),t.plugins[e]=n}}]),t}();y.util=i.default,y.sniffer=s.default,y.Errors=l.default,t.default=y,e.exports=t.default},"./src/proxy.js":
/*!**********************!*\
  !*** ./src/proxy.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(/*! event-emitter */"./node_modules/event-emitter/index.js")),i=s(n(/*! ./utils/util */"./src/utils/util.js")),o=s(n(/*! ./error */"./src/error.js"));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logParams={bc:0,bu_acu_t:0,played:[]},this._hasStart=!1,this.videoConfig={controls:!1,autoplay:t.autoplay,playsinline:t.playsinline,"webkit-playsinline":t.playsinline,"x5-playsinline":t.playsinline,"x5-video-player-type":t["x5-video-player-type"],"x5-video-player-fullscreen":t["x5-video-player-fullscreen"],"x5-video-orientation":t["x5-video-orientation"],airplay:t.airplay,"webkit-airplay":t.airplay,tabindex:2,mediaType:t.mediaType||"video"},t.loop&&(this.videoConfig.loop="loop");var n="";if(t.textTrack&&Array.isArray(t.textTrack)&&(navigator.userAgent.indexOf("Chrome")>-1||navigator.userAgent.indexOf("Firefox")>-1)&&(t.textTrack.some(function(e){if(e.src&&e.label&&e.default)return n+='<track src="'+e.src+'" ',e.kind&&(n+='kind="'+e.kind+'" '),n+='label="'+e.label+'" ',e.srclang&&(n+='srclang="'+e.srclang+'" '),n+=(e.default?"default":"")+">",!0}),this.videoConfig.crossorigin="anonymous"),t.textTrackStyle){var r=document.createElement("style");this.textTrackStyle=r,document.head.appendChild(r);var s="";for(var l in t.textTrackStyle)s+=l+": "+t.textTrackStyle[l]+";";var c=t.id?"#"+t.id:t.el.id?"#"+t.el.id:"."+t.el.className;r.sheet.insertRule?r.sheet.insertRule(c+" video::cue { "+s+" }",0):r.sheet.addRule&&r.sheet.addRule(c+" video::cue",s)}this.video=i.default.createDom(this.videoConfig.mediaType,n,this.videoConfig,""),t.autoplay&&(this.video.autoplay=!0,t.autoplayMuted&&(this.video.muted=!0)),this.ev=["play","playing","pause","ended","error","seeking","seeked","timeupdate","waiting","canplay","canplaythrough","durationchange","volumechange","loadeddata"].map(function(e){return function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},e,"on"+e.charAt(0).toUpperCase()+e.slice(1))}),(0,a.default)(this),this._interval={};var u="0,0",d=this;this.ev.forEach(function(e){d.evItem=Object.keys(e)[0];var t=Object.keys(e)[0];d.video.addEventListener(Object.keys(e)[0],function(){d.logParams&&("play"===t?d.hasStart=!0:"waiting"===t?(d.logParams.bc++,d.inWaitingStart=(new Date).getTime()):"playing"===t?d.inWaitingStart&&(d.logParams.bu_acu_t+=(new Date).getTime()-d.inWaitingStart,d.inWaitingStart=void 0):"loadeddata"===t?d.logParams.played.push({begin:0,end:-1}):"seeking"===t?d.logParams.played.push({begin:d.video.currentTime,end:-1}):d&&d.logParams&&d.logParams.played&&"timeupdate"===t&&(d.logParams.played.length<1&&d.logParams.played.push({begin:d.video.currentTime,end:-1}),d.logParams.played[d.logParams.played.length-1].end=d.video.currentTime),"error"===t?d.video.error&&d.emit(t,new o.default("other",d.currentTime,d.duration,d.networkState,d.readyState,d.currentSrc,d.src,d.ended,{line:41,msg:d.error,handle:"Constructor"})):d.emit(t,d),d.hasOwnProperty("_interval")&&(["ended","error","timeupdate"].indexOf(t)<0?(clearInterval(d._interval.bufferedChange),i.default.setInterval(d,"bufferedChange",function(){for(var e=[],t=0,n=d.video.buffered.length;t<n;t++)e.push([d.video.buffered.start(t),d.video.buffered.end(t)]);e.toString()!==u&&(u=e.toString(),d.emit("bufferedChange",e))},200)):"timeupdate"!==t&&i.default.clearInterval(d,"bufferedChange")))},!1)})}return r(e,[{key:"destroy",value:function(){this.textTrackStyle&&this.textTrackStyle.parentNode.removeChild(this.textTrackStyle)}},{key:"play",value:function(){this.video.play()}},{key:"pause",value:function(){this.video.pause()}},{key:"canPlayType",value:function(){this.video.canPlayType()}},{key:"getBufferedRange",value:function(){var e=[0,0],t=this.video,n=t.buffered,r=t.currentTime;if(n)for(var a=0,i=n.length;a<i&&(e[0]=n.start(a),e[1]=n.end(a),!(e[0]<=r&&r<=e[1]));a++);return e[0]-r<=0&&r-e[1]<=0?e:[0,0]}},{key:"hasStart",get:function(){return this._hasStart},set:function(e){"boolean"!=typeof e||!0!==e||this._hasStart||(this._hasStart=!0,this.emit("hasstart"))}},{key:"autoplay",set:function(e){this.video.autoplay=e},get:function(){return this.video.autoplay}},{key:"buffered",get:function(){return this.video.buffered}},{key:"crossOrigin",get:function(){return this.video.crossOrigin},set:function(e){this.video.crossOrigin=e}},{key:"currentSrc",get:function(){return this.video.currentSrc},set:function(e){this.video.currentSrc=e}},{key:"currentTime",get:function(){return this.video.currentTime},set:function(e){this.video.currentTime=e}},{key:"defaultMuted",get:function(){return this.video.defaultMuted},set:function(e){this.video.defaultMuted=e}},{key:"duration",get:function(){return this.video.duration}},{key:"ended",get:function(){return this.video.ended}},{key:"error",get:function(){var e=this.video.error;if(!e)return null;var t=[{en:"MEDIA_ERR_ABORTED",cn:"取回过程被用户中止"},{en:"MEDIA_ERR_NETWORK",cn:"当下载时发生错误"},{en:"MEDIA_ERR_DECODE",cn:"当解码时发生错误"},{en:"MEDIA_ERR_SRC_NOT_SUPPORTED",cn:"不支持音频/视频"}];return this.lang?this.lang[t[e.code-1].en]:t[e.code-1].en}},{key:"loop",get:function(){return this.video.loop},set:function(e){this.video.loop=e}},{key:"muted",get:function(){return this.video.muted},set:function(e){this.video.muted=e}},{key:"networkState",get:function(){var e=[{en:"NETWORK_EMPTY",cn:"音频/视频尚未初始化"},{en:"NETWORK_IDLE",cn:"音频/视频是活动的且已选取资源，但并未使用网络"},{en:"NETWORK_LOADING",cn:"浏览器正在下载数据"},{en:"NETWORK_NO_SOURCE",cn:"未找到音频/视频来源"}];return this.lang?this.lang[e[this.video.networkState].en]:e[this.video.networkState].en}},{key:"paused",get:function(){return this.video.paused}},{key:"playbackRate",get:function(){return this.video.playbackRate},set:function(e){this.video.playbackRate=e}},{key:"played",get:function(){return this.video.played}},{key:"preload",get:function(){return this.video.preload},set:function(e){this.video.preload=e}},{key:"readyState",get:function(){var e=[{en:"HAVE_NOTHING",cn:"没有关于音频/视频是否就绪的信息"},{en:"HAVE_METADATA",cn:"关于音频/视频就绪的元数据"},{en:"HAVE_CURRENT_DATA",cn:"关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒"},{en:"HAVE_FUTURE_DATA",cn:"当前及至少下一帧的数据是可用的"},{en:"HAVE_ENOUGH_DATA",cn:"可用数据足以开始播放"}];return this.lang?this.lang[e[this.video.readyState].en]:e[this.video.readyState]}},{key:"seekable",get:function(){return this.video.seekable}},{key:"seeking",get:function(){return this.video.seeking}},{key:"src",get:function(){return this.video.src},set:function(e){var t=this;i.default.hasClass(this.root,"xgplayer-ended")||this.emit("urlchange",JSON.parse(JSON.stringify(t.logParams))),this.logParams={bc:0,bu_acu_t:0,played:[],pt:(new Date).getTime(),vt:(new Date).getTime(),vd:0},this.video.pause(),this.video.src=e,this.logParams.playSrc=e,this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.once("loadeddata",function e(){t.logParams.vt=(new Date).getTime(),t.logParams.pt>t.logParams.vt&&(t.logParams.pt=t.logParams.vt),t.logParams.vd=t.video.duration,t.off("loadeddata",e)})}},{key:"volume",get:function(){return this.video.volume},set:function(e){this.video.volume=e}},{key:"fullscreen",get:function(){return i.default.hasClass(this.root,"xgplayer-is-fullscreen")||i.default.hasClass(this.root,"xgplayer-fullscreen-active")}},{key:"bullet",get:function(){return!!i.default.findDom(this.root,"xg-bullet")&&i.default.hasClass(i.default.findDom(this.root,"xg-bullet"),"xgplayer-has-bullet")}},{key:"textTrack",get:function(){return i.default.hasClass(this.root,"xgplayer-is-textTrack")}},{key:"pip",get:function(){return i.default.hasClass(this.root,"xgplayer-pip-active")}}]),e}();t.default=l,e.exports=t.default},"./src/skin/assets/download.svg":
/*!**************************************!*\
  !*** ./src/skin/assets/download.svg ***!
  \**************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewBox="0 0 24 24">\n  <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n    <g transform="translate(-488.000000, -340.000000)" fill="#FFFFFF">\n      <g id="Group-2">\n        <g id="volme_big-copy" transform="translate(488.000000, 340.000000)">\n          <rect id="Rectangle-18" x="11" y="4" width="2" height="12" rx="1"></rect>\n          <rect id="Rectangle-2" x="3" y="18" width="18" height="2" rx="1"></rect>\n          <rect id="Rectangle-2" transform="translate(4.000000, 17.500000) rotate(90.000000) translate(-4.000000, -17.500000) " x="1.5" y="16.5" width="5" height="2" rx="1"></rect><rect id="Rectangle-2-Copy-3" transform="translate(20.000000, 17.500000) rotate(90.000000) translate(-20.000000, -17.500000) " x="17.5" y="16.5" width="5" height="2" rx="1"></rect>\n          <path d="M9.48791171,8.26502656 L9.48791171,14.2650266 C9.48791171,14.8173113 9.04019646,15.2650266 8.48791171,15.2650266 C7.93562696,15.2650266 7.48791171,14.8173113 7.48791171,14.2650266 L7.48791171,7.26502656 C7.48791171,6.71274181 7.93562696,6.26502656 8.48791171,6.26502656 L15.4879117,6.26502656 C16.0401965,6.26502656 16.4879117,6.71274181 16.4879117,7.26502656 C16.4879117,7.81731131 16.0401965,8.26502656 15.4879117,8.26502656 L9.48791171,8.26502656 Z" id="Combined-Shape" transform="translate(11.987912, 10.765027) scale(1, -1) rotate(45.000000) translate(-11.987912, -10.765027) "></path>\n        </g>\n      </g>\n    </g>\n  </g>\n</svg>\n'},"./src/skin/assets/exitCssFull.svg":
/*!*****************************************!*\
  !*** ./src/skin/assets/exitCssFull.svg ***!
  \*****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.028 0.028)" d="M834.56 81.92H189.44c-59.392 0-107.52 48.128-107.52 107.52v645.12c0 59.392 48.128 107.52 107.52 107.52h645.12c59.392 0 107.52-48.128 107.52-107.52V189.44c0-59.392-48.128-107.52-107.52-107.52zM458.24 727.04c0 14.848-12.288 26.624-26.624 26.624S404.48 741.888 404.48 727.04v-69.632L289.28 773.12c-10.752 10.24-27.648 10.24-37.888 0-10.24-10.752-10.24-27.648 0-37.888L366.592 619.52H296.96c-14.848 0-26.624-12.288-26.624-26.624s12.288-26.624 26.624-26.624h134.144c14.848 0 26.624 12.288 26.624 26.624V727.04z m0-295.936c0 14.848-12.288 26.624-26.624 26.624H296.96c-14.848 0-26.624-12.288-26.624-26.624S282.112 404.48 296.96 404.48h69.632L251.392 289.28c-10.24-10.752-10.24-27.648 0-37.888 5.12-5.12 12.288-7.68 18.944-7.68 6.656 0 13.824 2.56 18.944 7.68L404.48 366.592V296.96c0-14.848 12.288-26.624 26.624-26.624s26.624 12.288 26.624 26.624v134.144zM773.12 773.12c-10.752 10.24-27.648 10.24-37.888 0L619.52 657.408V727.04c0 14.848-12.288 26.624-26.624 26.624s-26.624-11.776-26.624-26.624v-134.144c0-14.848 12.288-26.624 26.624-26.624H727.04c14.848 0 26.624 12.288 26.624 26.624s-12.288 26.624-26.624 26.624h-69.632l115.2 115.2c10.752 10.752 10.752 27.648 0.512 38.4z m0-483.84L657.408 404.48H727.04c14.848 0 26.624 12.288 26.624 26.624 0 14.848-12.288 26.624-26.624 26.624h-134.144c-14.848 0-26.624-12.288-26.624-26.624V296.96c0-14.848 12.288-26.624 26.624-26.624s26.624 12.288 26.624 26.624v69.632L734.72 250.88c5.12-5.12 12.288-7.68 18.944-7.68s13.824 2.56 18.944 7.68c10.752 10.752 10.752 27.648 0.512 38.4z"></path>\n</svg>\n'},"./src/skin/assets/exitFull.svg":
/*!**************************************!*\
  !*** ./src/skin/assets/exitFull.svg ***!
  \**************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0320625 0.0320625)" d="M682 342h128v84h-212v-212h84v128zM598 810v-212h212v84h-128v128h-84zM342 342v-128h84v212h-212v-84h128zM214 682v-84h212v212h-84v-128h-128z"></path>\n</svg>\n'},"./src/skin/assets/loading.svg":
/*!*************************************!*\
  !*** ./src/skin/assets/loading.svg ***!
  \*************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewbox="0 0 100 100">\n  <path d="M100,50A50,50,0,1,1,50,0"></path>\n</svg>\n'},"./src/skin/assets/panel.svg":
/*!***********************************!*\
  !*** ./src/skin/assets/panel.svg ***!
  \***********************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40">\n  <path fill="#f85959" transform="scale(0.8 0.8)" d="M36.5,18.73a1.19,1.19,0,0,0,1-1.14V16.33a1.2,1.2,0,0,0-1-1.13l-.61-.08a1.75,1.75,0,0,1-1.3-.86l-.21-.36-.2-.36A1.72,1.72,0,0,1,34,12l.23-.58a1.18,1.18,0,0,0-.5-1.42l-1.1-.62a1.18,1.18,0,0,0-1.47.3l-.39.51a1.82,1.82,0,0,1-1.41.72c-.44,0-1.88-.27-2.22-.7l-.39-.49a1.18,1.18,0,0,0-1.48-.28l-1.09.64a1.19,1.19,0,0,0-.47,1.43l.25.59a1.87,1.87,0,0,1-.08,1.58c-.26.37-1.17,1.5-1.71,1.58l-.63.09a1.19,1.19,0,0,0-1,1.14l0,1.27a1.17,1.17,0,0,0,1,1.12l.61.08a1.74,1.74,0,0,1,1.3.87l.21.36.2.35A1.69,1.69,0,0,1,24,22.08l-.23.59a1.19,1.19,0,0,0,.5,1.42l1.1.62a1.19,1.19,0,0,0,1.48-.31l.38-.5a1.83,1.83,0,0,1,1.41-.72c.44,0,1.88.25,2.22.69l.39.49a1.18,1.18,0,0,0,1.48.28L33.86,24a1.19,1.19,0,0,0,.47-1.43L34.09,22a1.84,1.84,0,0,1,.07-1.58c.26-.37,1.17-1.5,1.72-1.58ZM31,18.94a2.76,2.76,0,0,1-4.65-1.2A2.71,2.71,0,0,1,27,15.13a2.76,2.76,0,0,1,4.64,1.2A2.7,2.7,0,0,1,31,18.94Z"/>\n  <path fill="#f85959" transform="scale(0.8 0.8)" d="M32,0H3.59A3.59,3.59,0,0,0,0,3.59v17A3.59,3.59,0,0,0,3.59,24.2H19.72a12.59,12.59,0,0,1-.81-1.2A11.73,11.73,0,0,1,35.54,7.28V3.59A3.59,3.59,0,0,0,32,0ZM13,14.18H4.29a1.52,1.52,0,0,1,0-3H13a1.52,1.52,0,0,1,0,3ZM16.45,8H4.29a1.51,1.51,0,0,1,0-3H16.45a1.51,1.51,0,1,1,0,3Z"/>\n</svg>\n'},"./src/skin/assets/pause.svg":
/*!***********************************!*\
  !*** ./src/skin/assets/pause.svg ***!
  \***********************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0320625 0.0320625)" d="M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"></path>\n</svg>\n'},"./src/skin/assets/play.svg":
/*!**********************************!*\
  !*** ./src/skin/assets/play.svg ***!
  \**********************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0320625 0.0320625)" d="M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z"></path>\n</svg>\n'},"./src/skin/assets/playNext.svg":
/*!**************************************!*\
  !*** ./src/skin/assets/playNext.svg ***!
  \**************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.038 0.028)" d="M800 380v768h-128v-352l-320 320v-704l320 320v-352z"></path>\n</svg>\n'},"./src/skin/assets/replay.svg":
/*!************************************!*\
  !*** ./src/skin/assets/replay.svg ***!
  \************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg class="xgplayer-replay-svg" xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewbox="0 0 78 78">\n  <path d="M8.22708362,13.8757234 L11.2677371,12.6472196 C11.7798067,12.4403301 12.3626381,12.6877273 12.5695276,13.1997969 L12.9441342,14.1269807 C13.1510237,14.6390502 12.9036264,15.2218816 12.3915569,15.4287712 L6.8284538,17.6764107 L5.90126995,18.0510173 C5.38920044,18.2579068 4.80636901,18.0105096 4.5994795,17.49844 L1.97723335,11.0081531 C1.77034384,10.4960836 2.0177411,9.91325213 2.52981061,9.70636262 L3.45699446,9.33175602 C3.96906396,9.12486652 4.5518954,9.37226378 4.75878491,9.88433329 L5.67885163,12.1615783 C7.99551726,6.6766934 13.3983951,3 19.5,3 C27.7842712,3 34.5,9.71572875 34.5,18 C34.5,26.2842712 27.7842712,33 19.5,33 C15.4573596,33 11.6658607,31.3912946 8.87004692,28.5831991 C8.28554571,27.9961303 8.28762719,27.0463851 8.87469603,26.4618839 C9.46176488,25.8773827 10.4115101,25.8794641 10.9960113,26.466533 C13.2344327,28.7147875 16.263503,30 19.5,30 C26.127417,30 31.5,24.627417 31.5,18 C31.5,11.372583 26.127417,6 19.5,6 C14.4183772,6 9.94214483,9.18783811 8.22708362,13.8757234 Z"></path>\n</svg>\n'},"./src/skin/assets/requestCssFull.svg":
/*!********************************************!*\
  !*** ./src/skin/assets/requestCssFull.svg ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.028 0.028)" d="M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z"></path>\n</svg>\n'},"./src/skin/assets/requestFull.svg":
/*!*****************************************!*\
  !*** ./src/skin/assets/requestFull.svg ***!
  \*****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0320625 0.0320625)" d="M598 214h212v212h-84v-128h-128v-84zM726 726v-128h84v212h-212v-84h128zM214 426v-212h212v84h-128v128h-84zM298 598v128h128v84h-212v-212h84z"></path>\n</svg>\n'},"./src/skin/assets/rotate.svg":
/*!************************************!*\
  !*** ./src/skin/assets/rotate.svg ***!
  \************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 40 40" fill="none">\n  <g clip-path="url(#clip0)">\n    <path transform="scale(1.5 1.5)" d="M11.6665 9.16663H4.1665C2.78579 9.16663 1.6665 10.2859 1.6665 11.6666V15.8333C1.6665 17.214 2.78579 18.3333 4.1665 18.3333H11.6665C13.0472 18.3333 14.1665 17.214 14.1665 15.8333V11.6666C14.1665 10.2859 13.0472 9.16663 11.6665 9.16663Z" fill="white"/>\n    <path transform="scale(1.5 1.5)" fill-rule="evenodd" clip-rule="evenodd" d="M3.88148 4.06298C3.75371 4.21005 3.67667 4.40231 3.67749 4.61242C3.67847 4.87253 3.79852 5.10435 3.98581 5.25646L6.99111 8.05895C7.32771 8.37283 7.85502 8.35443 8.16891 8.01782C8.48279 7.68122 8.46437 7.15391 8.12778 6.84003L6.62061 5.43457L9.8198 5.4224C9.82848 5.42239 9.8372 5.42221 9.84591 5.4219C10.9714 5.38233 12.0885 5.6285 13.0931 6.13744C14.0976 6.64635 14.957 7.40148 15.5908 8.33234C16.2246 9.2632 16.6122 10.3394 16.7177 11.4606C16.823 12.5819 16.6427 13.7115 16.1934 14.7442C16.0098 15.1661 16.203 15.6571 16.6251 15.8408C17.0471 16.0243 17.5381 15.8311 17.7216 15.4091C18.2833 14.1183 18.5087 12.7063 18.3771 11.3047C18.2453 9.90318 17.7607 8.55792 16.9684 7.39433C16.1761 6.23073 15.1021 5.28683 13.8463 4.65065C12.5946 4.01651 11.203 3.70872 9.80072 3.75583L6.43415 3.76862L7.96326 2.12885C8.27715 1.79225 8.25872 1.26494 7.92213 0.951061C7.58553 0.63718 7.05822 0.655585 6.74433 0.99219L3.90268 4.0395C3.89545 4.04724 3.88841 4.05509 3.88154 4.06303L3.88148 4.06298Z" fill="white"/>\n  </g>\n  <defs>\n    <clipPath id="clip0">\n      <rect width="40" height="40" fill="white"/>\n    </clipPath>\n  </defs>\n</svg>\n'},"./src/skin/assets/startPause.svg":
/*!****************************************!*\
  !*** ./src/skin/assets/startPause.svg ***!
  \****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" viewBox="0 0 70 70">\n  <path transform="scale(0.04 0.04)" d="M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"></path>\n</svg>\n'},"./src/skin/assets/startPlay.svg":
/*!***************************************!*\
  !*** ./src/skin/assets/startPlay.svg ***!
  \***************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" viewBox="0 0 70 70">\n  <path transform="scale(0.04,0.04)" d="M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z"></path>\n</svg>\n'},"./src/skin/assets/volumeLarge.svg":
/*!*****************************************!*\
  !*** ./src/skin/assets/volumeLarge.svg ***!
  \*****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n  <path transform="scale(0.0220625 0.0220625)" d="M940.632 837.632l-72.192-72.192c65.114-64.745 105.412-154.386 105.412-253.44s-40.299-188.695-105.396-253.424l-0.016-0.016 72.192-72.192c83.639 83.197 135.401 198.37 135.401 325.632s-51.762 242.434-135.381 325.612l-0.020 0.020zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z"></path>\n</svg>\n'},"./src/skin/assets/volumeMuted.svg":
/*!*****************************************!*\
  !*** ./src/skin/assets/volumeMuted.svg ***!
  \*****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n  <path transform="scale(0.0220625 0.0220625)" d="M920.4 439.808l-108.544-109.056-72.704 72.704 109.568 108.544-109.056 108.544 72.704 72.704 108.032-109.568 108.544 109.056 72.704-72.704-109.568-108.032 109.056-108.544-72.704-72.704-108.032 109.568z"></path>\n</svg>\n'},"./src/skin/assets/volumeSmall.svg":
/*!*****************************************!*\
  !*** ./src/skin/assets/volumeSmall.svg ***!
  \*****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default='<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n  <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n  <path transform="scale(0.0220625 0.0220625)" d="M795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z"></path>\n</svg>\n'},"./src/skin/controls/cssFullscreen.js":
/*!********************************************!*\
  !*** ./src/skin/controls/cssFullscreen.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! ../../player */"./src/player.js")),a=o(n(/*! ../assets/requestCssFull.svg */"./src/skin/assets/requestCssFull.svg")),i=o(n(/*! ../assets/exitCssFull.svg */"./src/skin/assets/exitCssFull.svg"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_cssFullscreen",function(){var e=this,t=r.default.util;if(e.config.cssFullscreen){var n=t.createDom("xg-cssfullscreen",'<xg-icon class="xgplayer-icon">\n                                             <div class="xgplayer-icon-requestfull">'+a.default+'</div>\n                                             <div class="xgplayer-icon-exitfull">'+i.default+"</div>\n                                           </xg-icon>",{},"xgplayer-cssfullscreen"),o={};o.requestfull=e.lang.CSSFULLSCREEN_TIPS,o.exitfull=e.lang.EXITCSSFULLSCREEN_TIPS;var s=t.createDom("xg-tips",'<span class="xgplayer-tip-requestfull">'+o.requestfull+'</span>\n                                        <span class="xgplayer-tip-exitfull">'+o.exitfull+"</span>",{},"xgplayer-tips");n.appendChild(s),e.once("ready",function(){e.controls.appendChild(n)}),["click","touchend"].forEach(function(t){n.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("cssFullscreenBtnClick")})})}})},"./src/skin/controls/danmu.js":
/*!************************************!*\
  !*** ./src/skin/controls/danmu.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! ../../player */"./src/player.js")),a=o(n(/*! danmu.js */"./node_modules/danmu.js/dist/index.js")),i=o(n(/*! ../assets/panel.svg */"./src/skin/assets/panel.svg"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_danmu",function(){var e=this,t=e.root,n=r.default.util;if(e.config.danmu){var o=n.createDom("xg-danmu","",{},"xgplayer-danmu");e.once("ready",function(){t.appendChild(o)});var s=n.deepCopy({container:o,player:e.video,comments:[],area:{start:0,end:1}},e.config.danmu),l=void 0;e.config.danmu.panel&&(l=r.default.util.createDom("xg-panel",'<xg-panel-icon class="xgplayer-panel-icon">\n                                                '+i.default+'\n                                              </xg-panel-icon>\n                                              <xg-panel-slider class="xgplayer-panel-slider">\n                                                <xg-hidemode class="xgplayer-hidemode">\n                                                  <p class="xgplayer-hidemode-font">屏蔽类型</p>\n                                                  <ul class="xgplayer-hidemode-radio">\n                                                    <li class="xgplayer-hidemode-scroll" id="false">滚动</li><li class="xgplayer-hidemode-top" id="false">顶部</li><li class="xgplayer-hidemode-bottom" id="false">底部</li><li class="xgplayer-hidemode-color" id="false">色彩</li>\n                                                  </ul>\n                                                </xg-hidemode>\n                                                <xg-transparency class="xgplayer-transparency">\n                                                  <span>不透明度</span>\n                                                  <input class="xgplayer-transparency-line xgplayer-transparency-color xgplayer-transparency-bar xgplayer-transparency-gradient" type="range" min="0" max="100" step="0.1" value="50"></input>\n                                                </xg-transparency>\n                                                <xg-showarea class="xgplayer-showarea">\n                                                  <div class="xgplayer-showarea-name">显示区域</div>\n                                                  <div class="xgplayer-showarea-control">\n                                                    <div class="xgplayer-showarea-control-up">\n                                                      <span class="xgplayer-showarea-control-up-item xgplayer-showarea-onequarters">1/4</span>\n                                                      <span class="xgplayer-showarea-control-up-item xgplayer-showarea-twoquarters selected-color">1/2</span>\n                                                      <span class="xgplayer-showarea-control-up-item xgplayer-showarea-threequarters">3/4</span>\n                                                      <span class="xgplayer-showarea-control-up-item xgplayer-showarea-full">1</span>\n                                                    </div>\n                                                    <div class="xgplayer-showarea-control-down">\n                                                      <div class="xgplayer-showarea-control-down-dots">\n                                                        <span class="xgplayer-showarea-onequarters-dot"></span>\n                                                        <span class="xgplayer-showarea-twoquarters-dot"></span>\n                                                        <span class="xgplayer-showarea-threequarters-dot"></span>\n                                                        <span class="xgplayer-showarea-full-dot"></span>\n                                                      </div>\n                                                      <input class="xgplayer-showarea-line xgplayer-showarea-color xgplayer-showarea-bar xgplayer-gradient" type="range" min="1" max="4" step="1" value="1">\n                                                    </div>\n                                                  </div>\n                                                </xg-showarea>\n                                                <xg-danmuspeed class="xgplayer-danmuspeed">\n                                                  <div class="xgplayer-danmuspeed-name">弹幕速度</div>\n                                                  <div class="xgplayer-danmuspeed-control">\n                                                    <div class="xgplayer-danmuspeed-control-up">\n                                                      <span class="xgplayer-danmuspeed-control-up-item xgplayer-danmuspeed-small">慢</span>\n                                                      <span class="xgplayer-danmuspeed-control-up-item xgplayer-danmuspeed-middle selected-color">中</span>\n                                                      <span class="xgplayer-danmuspeed-control-up-item xgplayer-danmuspeed-large">快</span>\n                                                    </div>\n                                                    <div class="xgplayer-danmuspeed-control-down">\n                                                      <div class="xgplayer-danmuspeed-control-down-dots">\n                                                        <span class="xgplayer-danmuspeed-small-dot"></span>\n                                                        <span class="xgplayer-danmuspeed-middle-dot"></span>\n                                                        <span class="xgplayer-danmuspeed-large-dot"></span>\n                                                      </div>\n                                                      <input class="xgplayer-danmuspeed-line xgplayer-danmuspeed-color xgplayer-danmuspeed-bar xgplayer-gradient" type="range" min="50" max="150" step="50" value="100">\n                                                    </div>\n                                                  </div>\n                                                </xg-danmuspeed>\n                                                <xg-danmufont class="xgplayer-danmufont">\n                                                  <div class="xgplayer-danmufont-name">字体大小</div>\n                                                  <div class="xgplayer-danmufont-control">\n                                                    <div class="xgplayer-danmufont-control-up">\n                                                      <span class="xgplayer-danmufont-control-up-item xgplayer-danmufont-small">小</span>\n                                                      <span class="xgplayer-danmufont-control-up-item xgplayer-danmufont-middle">中</span>\n                                                      <span class="xgplayer-danmufont-control-up-item xgplayer-danmufont-large selected-color">大</span>\n                                                    </div>\n                                                    <div class="xgplayer-danmufont-control-down">\n                                                      <div class="xgplayer-danmufont-control-down-dots">\n                                                        <span class="xgplayer-danmufont-small-dot"></span>\n                                                        <span class="xgplayer-danmufont-middle-dot"></span>\n                                                        <span class="xgplayer-danmufont-large-dot"></span>\n                                                      </div>\n                                                      <input class="xgplayer-danmufont-line xgplayer-danmufont-color xgplayer-danmufont-bar xgplayer-gradient" type="range" min="20" max="30" step="5" value="25">\n                                                    </div>\n                                                  </div>\n                                                </xg-danmufont>\n                                              </xg-panel-slider>',{tabindex:7},"xgplayer-panel"),e.once("ready",function(){e.controls.appendChild(l)})),e.once("complete",function(){var t=new a.default(s);if(e.emit("initDefaultDanmu",t),e.danmu=t,e.config.danmu.panel){var n=l.querySelector(".xgplayer-panel-slider"),i=void 0;["mouseenter","touchend","click"].forEach(function(e){l.addEventListener(e,function(e){e.preventDefault(),e.stopPropagation(),r.default.util.addClass(n,"xgplayer-panel-active"),l.focus(),i=!0})}),l.addEventListener("mouseleave",function(e){e.preventDefault(),e.stopPropagation(),r.default.util.removeClass(n,"xgplayer-panel-active"),i=!1}),n.addEventListener("mouseleave",function(e){e.preventDefault(),e.stopPropagation(),!1===i&&r.default.util.removeClass(n,"xgplayer-panel-active")});var o=e.config.danmu,c={scroll:l.querySelector(".xgplayer-hidemode-scroll"),top:l.querySelector(".xgplayer-hidemode-top"),bottom:l.querySelector(".xgplayer-hidemode-bottom"),color:l.querySelector(".xgplayer-hidemode-color")},u=function(t){var n=t;["touchend","click"].forEach(function(t){c[n].addEventListener(t,function(t){"true"!==c[n].getAttribute("id")?(c[n].style.color="#f85959",c[n].setAttribute("id","true"),e.danmu.hide(n)):(c[n].style.color="#aaa",c[n].setAttribute("id","false"),e.danmu.show(n))})})};for(var d in c)u(d);var p=l.querySelector(".xgplayer-transparency-line"),f=l.querySelector(".xgplayer-transparency-gradient"),g=50;if(f.style.background="linear-gradient(to right, #f85959 0%, #f85959 "+g+"%, #aaa "+g+"%, #aaa)",p.addEventListener("input",function(e){e.preventDefault(),e.stopPropagation(),g=e.target.value,f.style.background="linear-gradient(to right, #f85959 0%, #f85959 "+g+"%, #aaa "+g+"%, #aaa)",o.comments.forEach(function(e){e.style.opacity=g/100})}),l.querySelector(".xgplayer-showarea-line").addEventListener("input",function(t){t.preventDefault(),t.stopPropagation();var n=t.target.value;e.danmu.config.area.end=n/100,e.config.danmu.area.end=n/100,e.danmu.bulletBtn.main.channel.resize()}),l.querySelector(".xgplayer-danmuspeed-line").addEventListener("input",function(e){e.preventDefault(),e.stopPropagation();var t=e.target.value;o.comments.forEach(function(e){e.duration=100*(200-t)})}),l.querySelector(".xgplayer-danmufont-line").addEventListener("input",function(e){e.preventDefault(),e.stopPropagation();var t=e.target.value;o.comments.forEach(function(e){e.style.fontSize=t+"px"})}),navigator.userAgent.indexOf("Firefox")>-1)for(var y=0;y<n.querySelectorAll("input").length;y++)n.querySelectorAll("input")[y].style.marginTop="10px"}})}})},"./src/skin/controls/definition.js":
/*!*****************************************!*\
  !*** ./src/skin/controls/definition.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_definition",function(){var e=this,t=e.root,n=r.default.util,a=r.default.sniffer,i=void 0,o=n.createDom("xg-definition","",{tabindex:3},"xgplayer-definition");function s(){var r=e.definitionList,a=["<ul>"],i=e.config.url,s=document.createElement("a");e.switchURL?["mp4","hls","__flv__","dash"].every(function(t){return!e[t]||(e[t].url&&(s.href=e[t].url),"__flv__"===t&&(e[t]._options?s.href=e[t]._options.url:s.href=e[t]._mediaDataSource.url),i=s.href,!1)}):i=e.currentSrc||e.src,e.hls&&(s.href=e.hls.url,i=s.href),r.forEach(function(t){s.href=t.url,e.dash?a.push("<li url='"+t.url+"' cname='"+t.name+"' class='"+(t.selected?"selected":"")+"'>"+t.name+"</li>"):a.push("<li url='"+t.url+"' cname='"+t.name+"' class='"+(s.href===i?"selected":"")+"'>"+t.name+"</li>")});var l=r.filter(function(t){return s.href=t.url,e.dash?!0===t.selected:s.href===i});a.push("</ul><p class='name'>"+(l[0]||{name:""}).name+"</p>");var c=t.querySelector(".xgplayer-definition");if(c){c.innerHTML=a.join("");var u=c.querySelector(".name");e.config.definitionActive&&"hover"!==e.config.definitionActive||u.addEventListener("mouseenter",function(t){t.preventDefault(),t.stopPropagation(),n.addClass(e.root,"xgplayer-definition-active"),c.focus()})}else{o.innerHTML=a.join("");var d=o.querySelector(".name");e.config.definitionActive&&"hover"!==e.config.definitionActive||d.addEventListener("mouseenter",function(t){t.preventDefault(),t.stopPropagation(),n.addClass(e.root,"xgplayer-definition-active"),o.focus()}),e.controls.appendChild(o)}}function l(r){e.definitionList=r,r&&r instanceof Array&&r.length>1&&(n.addClass(t,"xgplayer-is-definition"),e.on("canplay",s))}function c(){e.currentTime=e.curTime,i||e.play()}"mobile"===a.device&&(e.config.definitionActive="click"),e.on("resourceReady",l),["touchend","click"].forEach(function(t){o.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation();var r=e.definitionList,s=t.target||t.srcElement,l=document.createElement("a");if(s&&"li"===s.tagName.toLocaleLowerCase()){e.emit("beforeDefinitionChange",l.href);var u,d=void 0;if(Array.prototype.forEach.call(s.parentNode.childNodes,function(e){n.hasClass(e,"selected")&&(d=e.getAttribute("cname"),n.removeClass(e,"selected"))}),e.dash&&r.forEach(function(e){e.selected=!1,e.name===s.innerHTML&&(e.selected=!0)}),n.addClass(s,"selected"),u=s.getAttribute("cname"),s.parentNode.nextSibling.innerHTML=""+s.getAttribute("cname"),l.href=s.getAttribute("url"),e.switchURL){var p=document.createElement("a");["mp4","hls","__flv__","dash"].every(function(t){return!e[t]||(e[t].url&&(p.href=e[t].url),"__flv__"===t&&(e[t]._options?p.href=e[t]._options.url:p.href=e[t]._mediaDataSource.url),!1)}),p.href===l.href||e.ended||e.switchURL(l.href)}else e.hls&&(document.createElement("a"),e.hls.url),l.href!==e.currentSrc&&(e.curTime=e.currentTime,i=e.paused,e.ended||(e.src=l.href,e.once("canplay",c)));e.emit("definitionChange",{from:d,to:u}),"mobile"===a.device&&n.removeClass(e.root,"xgplayer-definition-active")}else"click"!==e.config.definitionActive||!s||"p"!==s.tagName.toLocaleLowerCase()&&"em"!==s.tagName.toLocaleLowerCase()||(n.addClass(e.root,"xgplayer-definition-active"),o.focus());e.emit("focus")},!1)}),o.addEventListener("mouseleave",function(e){e.preventDefault(),e.stopPropagation(),n.removeClass(t,"xgplayer-definition-active")}),e.once("destroy",function t(){e.off("resourceReady",l),e.off("canplay",s),e.off("canplay",c),e.off("destroy",t)})})},"./src/skin/controls/download.js":
/*!***************************************!*\
  !*** ./src/skin/controls/download.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=i(n(/*! ../../player */"./src/player.js")),a=i(n(/*! ../assets/download.svg */"./src/skin/assets/download.svg"));function i(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_download",function(){var e=this,t=r.default.util;if(e.config.download){var n=t.createDom("xg-download",'<xg-icon class="xgplayer-icon">'+a.default+"</xg-icon>",{},"xgplayer-download"),i=e.lang.DOWNLOAD_TIPS,o=t.createDom("xg-tips",'<span class="xgplayer-tip-download">'+i+"</span>",{},"xgplayer-tips");n.appendChild(o),e.once("ready",function(){e.controls.appendChild(n)}),["click","touchend"].forEach(function(t){n.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("downloadBtnClick")})})}})},"./src/skin/controls/enter.js":
/*!************************************!*\
  !*** ./src/skin/controls/enter.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_enter",function(){for(var e=this.root,t=r.default.util,n="",a=1;a<=12;a++)n+='<div class="xgplayer-enter-bar'+a+'"></div>';var i=t.createDom("xg-enter",'<div class="xgplayer-enter-spinner">\n                                                  '+n+"\n                                                </div>",{},"xgplayer-enter");e.appendChild(i)})},"./src/skin/controls/error.js":
/*!************************************!*\
  !*** ./src/skin/controls/error.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_error",function(){var e=this,t=e.root,n=r.default.util,a=n.createDom("xg-error",'<em class="xgplayer-error-text">请<span class="xgplayer-error-refresh">刷新</span>试试</em>',{},"xgplayer-error");e.once("ready",function(){t.appendChild(a)});var i=a.querySelector(".xgplayer-error-text"),o=null;function s(){e.error?i.innerHTML=e.error:e.config.lang&&"zh-cn"===e.config.lang?i.innerHTML=e.lang.ERROR+'，请<span class="xgplayer-error-refresh">刷新</span>试试':i.innerHTML=e.lang.ERROR+'，please try to <span class="xgplayer-error-refresh">refresh</span>',n.addClass(e.root,"xgplayer-is-error"),(o=a.querySelector(".xgplayer-error-refresh"))&&["touchend","click"].forEach(function(t){o.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation();var n=t.target||t.srcElement;n&&"span"===n.tagName.toLocaleLowerCase()&&(e.controls.style.display="flex",e.reload())})})}e.on("error",s),e.once("destroy",function t(){e.off("error",s),e.off("destroy",t)})})},"./src/skin/controls/flex.js":
/*!***********************************!*\
  !*** ./src/skin/controls/flex.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_flex",function(){this.root;var e=r.default.util.createDom("xg-placeholder","",{},"xgplayer-placeholder");this.controls.appendChild(e)})},"./src/skin/controls/fullscreen.js":
/*!*****************************************!*\
  !*** ./src/skin/controls/fullscreen.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! ../../player */"./src/player.js")),a=o(n(/*! ../assets/requestFull.svg */"./src/skin/assets/requestFull.svg")),i=o(n(/*! ../assets/exitFull.svg */"./src/skin/assets/exitFull.svg"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_fullscreen",function(){var e=this,t=r.default.util,n=e.config.fullscreenBtn?e.config.fullscreenBtn:{},o=void 0;o="img"===n.type?t.createImgBtn("fullscreen",n.url.request,n.width,n.height):t.createDom("xg-fullscreen",'<xg-icon class="xgplayer-icon">\n                                             <div class="xgplayer-icon-requestfull">'+a.default+'</div>\n                                             <div class="xgplayer-icon-exitfull">'+i.default+"</div>\n                                           </xg-icon>",{},"xgplayer-fullscreen");var s={};s.requestfull=e.lang.FULLSCREEN_TIPS,s.exitfull=e.lang.EXITFULLSCREEN_TIPS;var l=t.createDom("xg-tips",'<span class="xgplayer-tip-requestfull">'+s.requestfull+'</span>\n                                        <span class="xgplayer-tip-exitfull">'+s.exitfull+"</span>",{},"xgplayer-tips");o.appendChild(l),e.once("ready",function(){e.controls.appendChild(o)}),["click","touchend"].forEach(function(t){o.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("fullscreenBtnClick")})})})},"./src/skin/controls/loading.js":
/*!**************************************!*\
  !*** ./src/skin/controls/loading.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=i(n(/*! ../../player */"./src/player.js")),a=i(n(/*! ../assets/loading.svg */"./src/skin/assets/loading.svg"));function i(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_loading",function(){var e=this.root,t=r.default.util.createDom("xg-loading",""+a.default,{},"xgplayer-loading");this.once("ready",function(){e.appendChild(t)})})},"./src/skin/controls/localPreview.js":
/*!*******************************************!*\
  !*** ./src/skin/controls/localPreview.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_localPreview",function(){var e=this,t=(e.root,r.default.util);if(e.config.preview&&e.config.preview.uploadEl){var n=t.createDom("xg-preview",'<input type="file">',{},"xgplayer-preview"),a=n.querySelector("input");e.config.preview.uploadEl.appendChild(n),a.onchange=function(){e.emit("upload",a)}}})},"./src/skin/controls/memoryPlay.js":
/*!*****************************************!*\
  !*** ./src/skin/controls/memoryPlay.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_memoryPlay",function(){var e=this,t=r.default.util,n=e.config.lastPlayTime||0,a=e.config.lastPlayTimeHideDelay||0,i=null;if(!(n<=0)){(i=t.createDom("xg-memoryplay",'<div class="xgplayer-memoryplay-spot"><div class="xgplayer-progress-tip">您上次观看到 <span class="xgplayer-lasttime">'+t.format(n)+'</span> ，为您自动续播 <span class="btn-close"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="close" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"></path></svg></span></div></div>',{},"xgplayer-memoryplay")).addEventListener("mouseover",function(e){e.stopPropagation()});var o=function(){i&&i.parentNode.removeChild(i),i=null};i.querySelector(".xgplayer-progress-tip .btn-close").addEventListener("click",o),e.once("play",function(){e.root.appendChild(i),e.emit("memoryPlayStart",n),a>0&&setTimeout(function(){o()},1e3*a)}),e.once("ended",o)}})},"./src/skin/controls/pip.js":
/*!**********************************!*\
  !*** ./src/skin/controls/pip.js ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_pip",function(){var e=this,t=r.default.util;if(e.config.pip){var n=e.lang.PIP,a=t.createDom("xg-pip",'<p class="name"><span>'+n+"</span></p>",{tabindex:9},"xgplayer-pip");e.once("ready",function(){e.controls.appendChild(a)}),["click","touchend"].forEach(function(t){a.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("pipBtnClick")})})}})},"./src/skin/controls/play.js":
/*!***********************************!*\
  !*** ./src/skin/controls/play.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! ../../player */"./src/player.js")),a=o(n(/*! ../assets/play.svg */"./src/skin/assets/play.svg")),i=o(n(/*! ../assets/pause.svg */"./src/skin/assets/pause.svg"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_play",function(){var e=this,t=r.default.util,n=e.config.playBtn?e.config.playBtn:{},o=void 0;o="img"===n.type?t.createImgBtn("play",n.url.play,n.width,n.height):t.createDom("xg-play",'<xg-icon class="xgplayer-icon">\n                                      <div class="xgplayer-icon-play">'+a.default+'</div>\n                                      <div class="xgplayer-icon-pause">'+i.default+"</div>\n                                     </xg-icon>",{},"xgplayer-play");var s={};s.play=e.lang.PLAY_TIPS,s.pause=e.lang.PAUSE_TIPS;var l=t.createDom("xg-tips",'<span class="xgplayer-tip-play">'+s.play+'</span>\n                                        <span class="xgplayer-tip-pause">'+s.pause+"</span>",{},"xgplayer-tips");o.appendChild(l),e.once("ready",function(){e.controls.appendChild(o)}),["click","touchend"].forEach(function(t){o.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("playBtnClick")})})})},"./src/skin/controls/playNext.js":
/*!***************************************!*\
  !*** ./src/skin/controls/playNext.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=i(n(/*! ../../player */"./src/player.js")),a=i(n(/*! ../assets/playNext.svg */"./src/skin/assets/playNext.svg"));function i(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_playNext",function(){var e=this,t=r.default.util,n=e.config.playNext;if(n&&n.urlList){var i=t.createDom("xg-playnext",'<xg-icon class="xgplayer-icon">'+a.default+"</xg-icon>",{},"xgplayer-playnext"),o=e.lang.PLAYNEXT_TIPS,s=t.createDom("xg-tips",'<span class="xgplayer-tip-playnext">'+o+"</span>",{},"xgplayer-tips");i.appendChild(s),e.once("ready",function(){e.controls.appendChild(i)}),["click","touchend"].forEach(function(t){i.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("playNextBtnClick")})})}})},"./src/skin/controls/playbackRate.js":
/*!*******************************************!*\
  !*** ./src/skin/controls/playbackRate.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_playbackRate",function(){var e=this,t=r.default.util;if(!e.config.playbackRate)return!1;e.config.playbackRate.sort(function(e,t){return t-e});var n=t.createDom("xg-playbackrate"," ",{},"xgplayer-playbackrate"),a=[];e.config.playbackRate.forEach(function(e){a.push({name:""+e,rate:e+"x",selected:!1})});var i=1,o=["<ul>"];a.forEach(function(t){e.config.defaultPlaybackRate&&e.config.defaultPlaybackRate.toString()===t.name?(t.selected=!0,i=e.config.defaultPlaybackRate,e.once("playing",function(){e.video.playbackRate=e.config.defaultPlaybackRate})):"1.0"!==t.name&&"1"!==t.name||e.config.defaultPlaybackRate&&1!==e.config.defaultPlaybackRate||(t.selected=!0),o.push("<li cname='"+t.name+"' class='"+(t.selected?"selected":"")+"'>"+t.rate+"</li>")}),o.push("</ul><p class='name'>"+i+"x</p>");var s=e.root.querySelector(".xgplayer-playbackrate");if(s){if(s.innerHTML=o.join(""),!s)return;s.querySelector(".name").addEventListener("mouseenter",function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-playbackrate-active"),s.focus()})}else{if(n.innerHTML=o.join(""),!n)return;n.querySelector(".name").addEventListener("mouseenter",function(r){r.preventDefault(),r.stopPropagation(),t.addClass(e.root,"xgplayer-playbackrate-active"),n.focus()}),e.once("ready",function(){e.controls.appendChild(n)})}["touchend","click"].forEach(function(r){n.addEventListener(r,function(r){r.stopPropagation(),r.preventDefault();var o=r.target;if(o&&"li"===o.tagName.toLocaleLowerCase()){var s,l=void 0;a.forEach(function(n){n.selected=!1,o.textContent.replace(/\s+/g,"")===n.rate&&(Array.prototype.forEach.call(o.parentNode.childNodes,function(e){t.hasClass(e,"selected")&&(l=parseFloat(e.getAttribute("cname")),t.removeClass(e,"selected"))}),n.selected=!0,e.video.playbackRate=1*n.name,i=1*n.name)}),t.addClass(o,"selected"),s=parseFloat(o.getAttribute("cname")),o.parentNode.nextSibling.innerHTML=o.getAttribute("cname")+"x",e.emit("playbackrateChange",{from:l,to:s})}else!o||"p"!==o.tagName.toLocaleLowerCase()&&"span"!==o.tagName.toLocaleLowerCase()||(t.addClass(e.root,"xgplayer-playbackrate-active"),n.focus());e.emit("focus")},!1)}),n.addEventListener("mouseleave",function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-playbackrate-active")}),e.on("play",function(){e.video.playbackRate.toFixed(1)!==i.toFixed(1)&&(e.video.playbackRate=i)})})},"./src/skin/controls/poster.js":
/*!*************************************!*\
  !*** ./src/skin/controls/poster.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_poster",function(){var e=this.root,t=r.default.util;if(this.config.poster){var n=t.createDom("xg-poster","",{},"xgplayer-poster");n.style.backgroundImage="url("+this.config.poster+")",e.appendChild(n)}})},"./src/skin/controls/progress.js":
/*!***************************************!*\
  !*** ./src/skin/controls/progress.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_progress",function(){var e=this,t=r.default.util,n=t.createDom("xg-progress",'<xg-outer class="xgplayer-progress-outer">\n                                                   <xg-cache class="xgplayer-progress-cache"></xg-cache>\n                                                   <xg-played class="xgplayer-progress-played">\n                                                     <xg-progress-btn class="xgplayer-progress-btn"></xg-progress-btn>\n                                                     <xg-point class="xgplayer-progress-point xgplayer-tips"></xg-point>\n                                                     <xg-thumbnail class="xgplayer-progress-thumbnail xgplayer-tips"></xg-thumbnail>\n                                                   </xgplayer-played>\n                                                 </xg-outer>',{tabindex:1},"xgplayer-progress"),a=void 0;e.controls.appendChild(n);var i=n.querySelector(".xgplayer-progress-played"),o=(n.querySelector(".xgplayer-progress-btn"),n.querySelector(".xgplayer-progress-outer")),s=n.querySelector(".xgplayer-progress-cache"),l=n.querySelector(".xgplayer-progress-point"),c=n.querySelector(".xgplayer-progress-thumbnail");function u(r,a){r.addEventListener("mouseenter",function(e){a&&(t.addClass(r,"xgplayer-progress-dot-show"),t.addClass(n,"xgplayer-progress-dot-active"))}),r.addEventListener("mouseleave",function(e){a&&(t.removeClass(r,"xgplayer-progress-dot-show"),t.removeClass(n,"xgplayer-progress-dot-active"))}),r.addEventListener("touchend",function(i){i.stopPropagation(),a&&(t.hasClass(r,"xgplayer-progress-dot-show")||Object.keys(e.dotArr).forEach(function(n){e.dotArr[n]&&t.removeClass(e.dotArr[n],"xgplayer-progress-dot-show")}),t.toggleClass(r,"xgplayer-progress-dot-show"),t.toggleClass(n,"xgplayer-progress-dot-active"))})}function d(){e.config.progressDot&&"Array"===t.typeOf(e.config.progressDot)&&e.config.progressDot.forEach(function(n){if(n.time>=0&&n.time<=e.duration){var r=t.createDom("xg-progress-dot",n.text?'<span class="xgplayer-progress-tip">'+n.text+"</span>":"",{},"xgplayer-progress-dot");r.style.left=n.time/e.duration*100+"%",o.appendChild(r),e.dotArr[n.time]=r,u(r,n.text)}})}e.dotArr={},e.once("canplay",d),e.addProgressDot=function(n,r){if(!e.dotArr[n]&&n>=0&&n<=e.duration){var a=t.createDom("xg-progress-dot","",{},"xgplayer-progress-dot");a.style.left=n/e.duration*100+"%",o.appendChild(a),e.dotArr[n]=a,u(a,r)}},e.removeProgressDot=function(t){if(t>=0&&t<=e.duration&&e.dotArr[t]){var n=e.dotArr[t];n.parentNode.removeChild(n),n=null,e.dotArr[t]=null}},e.removeAllProgressDot=function(){Object.keys(e.dotArr).forEach(function(t){if(e.dotArr[t]){var n=e.dotArr[t];n.parentNode.removeChild(n),n=null,e.dotArr[t]=null}})};var p=0,f=0,g=0,y=0,h=0,x=0,m=[];e.config.thumbnail&&(p=e.config.thumbnail.pic_num,f=e.config.thumbnail.width,g=e.config.thumbnail.height,y=e.config.thumbnail.col,h=e.config.thumbnail.row,m=e.config.thumbnail.urls,c.style.width=f+"px",c.style.height=g+"px"),["touchstart","mousedown"].forEach(function(r){n.addEventListener(r,function(r){if(r.stopPropagation(),t.event(r),r._target===l||!e.config.allowSeekAfterEnded&&e.ended)return!0;n.focus(),a=n.getBoundingClientRect().width;var o=i.getBoundingClientRect().left,s=function(n){n.stopPropagation(),t.event(n),e.isProgressMoving=!0;var r=n.clientX-o;r>a&&(r=a);var s=r/a*e.duration;if(i.style.width=100*r/a+"%","video"!==e.videoConfig.mediaType||e.dash||e.config.closeMoveSeek){var l=t.findDom(e.controls,".xgplayer-time");l&&(l.innerHTML="<span>"+t.format(s||0)+"</span><em>"+t.format(e.duration))}else e.currentTime=Number(s).toFixed(1);e.emit("focus")},c=function r(l){if(l.stopPropagation(),t.event(l),window.removeEventListener("mousemove",s),window.removeEventListener("touchmove",s,{passive:!1}),window.removeEventListener("mouseup",r),window.removeEventListener("touchend",r),n.blur(),!e.isProgressMoving||"audio"===e.videoConfig.mediaType||e.dash||e.config.closeMoveSeek){var c=l.clientX-o;c>a&&(c=a);var u=c/a*e.duration;i.style.width=100*c/a+"%",e.currentTime=Number(u).toFixed(1)}e.emit("focus"),e.isProgressMoving=!1};return window.addEventListener("mousemove",s),window.addEventListener("touchmove",s,{passive:!1}),window.addEventListener("mouseup",c),window.addEventListener("touchend",c),!0})}),n.addEventListener("mouseenter",function(r){if(!e.config.allowSeekAfterEnded&&e.ended)return!0;var a=n.getBoundingClientRect().left,i=n.getBoundingClientRect().width,o=function(r){var o=(r.clientX-a)/i*e.duration;o=o<0?0:o,l.textContent=t.format(o);var s=l.getBoundingClientRect().width;if(e.config.thumbnail){x=e.duration/p;var u=Math.floor(o/x);c.style.backgroundImage="url("+m[Math.ceil((u+1)/(y*h))-1]+")";var d=u+1-y*h*(Math.ceil((u+1)/(y*h))-1),v=Math.ceil(d/h)-1,b=d-v*h-1;c.style["background-position"]="-"+b*f+"px -"+v*g+"px";var k=r.clientX-a-f/2;k=(k=k>0?k:0)<i-f?k:i-f,c.style.left=k+"px",c.style.top=-10-g+"px",c.style.display="block",l.style.left=k+f/2-s/2+"px"}else{var w=r.clientX-a-s/2;w=(w=w>0?w:0)>i-s?i-s:w,l.style.left=w+"px"}t.hasClass(n,"xgplayer-progress-dot-active")?l.style.display="none":l.style.display="block"},s=function(e){o(e)};n.addEventListener("mousemove",s,!1),n.addEventListener("mouseleave",function e(t){n.removeEventListener("mousemove",s,!1),n.removeEventListener("mouseleave",e,!1),o(t),l.style.display="none",c.style.display="none"},!1),o(r)},!1);var v=function(){!a&&n&&(a=n.getBoundingClientRect().width),"audio"===e.videoConfig.mediaType&&e.isProgressMoving&&e.dash||(i.style.width=100*e.currentTime/e.duration+"%")};e.on("timeupdate",v);var b=function(){var t=e.buffered;if(t&&t.length>0){for(var n=t.end(t.length-1),r=0,a=t.length;r<a;r++)if(e.currentTime>=t.start(r)&&e.currentTime<=t.end(r)){n=t.end(r);for(var i=r+1;i<t.length;i++)if(t.start(i)-t.end(i-1)>=2){n=t.end(i-1);break}break}s.style.width=n/e.duration*100+"%"}},k=["bufferedChange","cacheupdate","ended","timeupdate"];k.forEach(function(t){e.on(t,b)}),e.once("destroy",function t(){e.removeAllProgressDot(),e.off("canplay",d),e.off("timeupdate",v),k.forEach(function(t){e.off(t,b)}),e.off("destroy",t)})})},"./src/skin/controls/replay.js":
/*!*************************************!*\
  !*** ./src/skin/controls/replay.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=i(n(/*! ../../player */"./src/player.js")),a=i(n(/*! ../assets/replay.svg */"./src/skin/assets/replay.svg"));function i(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_replay",function(){var e=this,t=r.default.util,n=e.root,i=e.lang.REPLAY,o=t.createDom("xg-replay",a.default+'\n                                         <xg-replay-txt class="xgplayer-replay-txt">'+i+"</xg-replay-txt>\n                                        ",{},"xgplayer-replay");function s(){var e=o.querySelector("path");if(e){var t=window.getComputedStyle(e).getPropertyValue("transform");if("string"==typeof t&&t.indexOf("none")>-1)return;e.setAttribute("transform",t)}}e.once("ready",function(){n.appendChild(o)}),e.on("ended",s);var l=o.querySelector("svg");["click","touchend"].forEach(function(t){l.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("replayBtnClick")})}),e.once("destroy",function t(){e.off("ended",s),e.off("destroy",t)})})},"./src/skin/controls/rotate.js":
/*!*************************************!*\
  !*** ./src/skin/controls/rotate.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=i(n(/*! ../../player */"./src/player.js")),a=i(n(/*! ../assets/rotate.svg */"./src/skin/assets/rotate.svg"));function i(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_rotate",function(){var e=this,t=r.default.util;if(e.config.rotate){var n=t.createDom("xg-rotate",'<xg-icon class="xgplayer-icon">'+a.default+"</xg-icon>",{},"xgplayer-rotate"),i=e.lang.ROTATE_TIPS,o=t.createDom("xg-tips",'<span class="xgplayer-tip-rotate">'+i+"</span>",{},"xgplayer-tips");n.appendChild(o),e.once("ready",function(){e.controls.appendChild(n)}),["click","touchend"].forEach(function(t){n.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("rotateBtnClick")})})}})},"./src/skin/controls/screenShot.js":
/*!*****************************************!*\
  !*** ./src/skin/controls/screenShot.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_screenShot",function(){var e=this,t=r.default.util;if(e.config.screenShot){var n=e.lang.SCREENSHOT,a=t.createDom("xg-screenshot",'<p class="name"><span>'+n+"</span></p>",{tabindex:11},"xgplayer-screenshot");e.once("ready",function(){e.controls.appendChild(a)}),["click","touchend"].forEach(function(t){a.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("screenShotBtnClick")})})}})},"./src/skin/controls/start.js":
/*!************************************!*\
  !*** ./src/skin/controls/start.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! ../../player */"./src/player.js")),a=o(n(/*! ../assets/startPlay.svg */"./src/skin/assets/startPlay.svg")),i=o(n(/*! ../assets/startPause.svg */"./src/skin/assets/startPause.svg"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_start",function(){var e=this,t=e.root,n=r.default.util,o=n.createDom("xg-start",'<div class="xgplayer-icon-play">'+a.default+'</div>\n                                      <div class="xgplayer-icon-pause">'+i.default+"</div>",{},"xgplayer-start");e.once("ready",function(){t.appendChild(o)}),o.onclick=function(t){t.preventDefault(),t.stopPropagation(),e.emit("startBtnClick")},e.once("ready",function(){n.addClass(e.root,"xgplayer-skin-default"),e.config&&(e.config.lang&&"en"===e.config.lang?n.addClass(e.root,"lang-is-en"):"jp"===e.config.lang&&n.addClass(e.root,"lang-is-jp"))})})},"./src/skin/controls/textTrack.js":
/*!****************************************!*\
  !*** ./src/skin/controls/textTrack.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_textTrack",function(){if(!(navigator.userAgent.indexOf("Chrome")<0)){var e=this,t=e.root,n=r.default.util,a=(r.default.sniffer,e.controls,n.createDom("xg-texttrack","",{tabindex:7},"xgplayer-texttrack")),i=e.config.textTrack;i&&Array.isArray(i)&&i.length>1&&(n.addClass(e.root,"xgplayer-is-texttrack"),e.on("canplay",function(){var r=["<ul>"];r.push("<li class=''}'>关闭</li>"),i.forEach(function(e){r.push("<li class='"+(e.default?"selected":"")+"'>"+e.label+"</li>")});var o=e.lang.TEXTTRACK;r.push('</ul><p class="name"><em>'+o+"</em></p>");var s=t.querySelector(".xgplayer-texttrack");if(s){s.innerHTML=r.join("");var l=s.querySelector(".name");e.config.textTrackActive&&"hover"!==e.config.textTrackActive||l.addEventListener("mouseenter",function(e){e.preventDefault(),e.stopPropagation(),n.addClass(t,"xgplayer-texttrack-active"),s.focus()})}else{a.innerHTML=r.join("");var c=a.querySelector(".name");e.config.textTrackActive&&"hover"!==e.config.textTrackActive||c.addEventListener("mouseenter",function(t){t.preventDefault(),t.stopPropagation(),n.addClass(e.root,"xgplayer-texttrack-active"),a.focus()}),e.controls.appendChild(a)}})),["touchend","click"].forEach(function(t){a.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation();var r=t.target||t.srcElement;if(r&&"li"===r.tagName.toLocaleLowerCase()){Array.prototype.forEach.call(r.parentNode.childNodes,function(e){n.removeClass(e,"selected")}),n.addClass(r,"selected");var o=e.root.getElementsByTagName("Track");"关闭"===r.innerHTML?(o[0].track.mode="hidden",n.removeClass(e.root,"xgplayer-texttrack-active")):(n.hasClass(e.root,"xgplayer-texttrack-active")||n.addClass(e.root,"xgplayer-texttrack-active"),o[0].track.mode="showing",i.some(function(e){if(e.label===r.innerHTML)return o[0].src=e.src,e.kind&&(o[0].kind=e.kind),o[0].label=e.label,e.srclang&&(o[0].srclang=e.srclang),!0}),e.emit("textTrackChange",r.innerHTML))}else"click"!==e.config.textTrackActive||!r||"p"!==r.tagName.toLocaleLowerCase()&&"em"!==r.tagName.toLocaleLowerCase()||(n.addClass(e.root,"xgplayer-texttrack-active"),a.focus())},!1)}),a.addEventListener("mouseleave",function(t){t.preventDefault(),t.stopPropagation(),n.removeClass(e.root,"xgplayer-texttrack-active")})}})},"./src/skin/controls/time.js":
/*!***********************************!*\
  !*** ./src/skin/controls/time.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(/*! ../../player */"./src/player.js"));r.default.install("s_time",function(){var e=this,t=(e.root,r.default.util),n=t.createDom("xg-time","<span>"+(e.currentTime||t.format(0))+"</span>\n                                           <em>"+(e.duration||t.format(0))+"</em>",{},"xgplayer-time");e.once("ready",function(){e.controls.appendChild(n)});var a=function(){"audio"===e.videoConfig.mediaType&&e.isProgressMoving&&e.dash||(n.innerHTML="<span>"+t.format(e.currentTime||0)+"</span><em>"+t.format(e.duration)+"</em>")};e.on("durationchange",a),e.on("timeupdate",a),e.once("destroy",function t(){e.off("durationchange",a),e.off("timeupdate",a),e.off("destroy",t)})})},"./src/skin/controls/volume.js":
/*!*************************************!*\
  !*** ./src/skin/controls/volume.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=s(n(/*! ../../player */"./src/player.js")),a=s(n(/*! ../assets/volumeMuted.svg */"./src/skin/assets/volumeMuted.svg")),i=s(n(/*! ../assets/volumeSmall.svg */"./src/skin/assets/volumeSmall.svg")),o=s(n(/*! ../assets/volumeLarge.svg */"./src/skin/assets/volumeLarge.svg"));function s(e){return e&&e.__esModule?e:{default:e}}r.default.install("s_volume",function(){var e=this,t=r.default.util.createDom("xg-volume",'<xg-icon class="xgplayer-icon">\n                                         <div class="xgplayer-icon-large">'+o.default+'</div>\n                                         <div class="xgplayer-icon-small">'+i.default+'</div>\n                                         <div class="xgplayer-icon-muted">'+a.default+'</div>\n                                       </xg-icon>\n                                       <xg-slider class="xgplayer-slider" tabindex="2">\n                                         <xg-bar class="xgplayer-bar">\n                                           <xg-drag class="xgplayer-drag"></xg-drag>\n                                         </xg-bar>\n                                       </xg-slider>',{},"xgplayer-volume");e.once("ready",function(){e.controls.appendChild(t)});var n=t.querySelector(".xgplayer-slider"),s=t.querySelector(".xgplayer-bar"),l=t.querySelector(".xgplayer-drag"),c=t.querySelector(".xgplayer-icon");l.style.height=100*e.config.volume+"%",n.volume=e.config.volume,s.addEventListener("mousedown",function(t){t.preventDefault(),t.stopPropagation(),e.emit("volumeBarClick",t)}),["click","touchend"].forEach(function(t){c.addEventListener(t,function(t){t.preventDefault(),t.stopPropagation(),e.emit("volumeIconClick")})}),c.addEventListener("mouseenter",function(t){t.preventDefault(),t.stopPropagation(),e.emit("volumeIconEnter")}),["blur","mouseleave"].forEach(function(n){t.addEventListener(n,function(t){t.preventDefault(),t.stopPropagation(),e.emit("volumeIconLeave")})})})},"./src/skin/index.js":
/*!***************************!*\
  !*** ./src/skin/index.js ***!
  \***************************/
/*! no static exports found */function(e,t,n){"use strict";n(/*! ./style/index.scss */"./src/skin/style/index.scss"),n(/*! ./controls/enter.js */"./src/skin/controls/enter.js"),n(/*! ./controls/play.js */"./src/skin/controls/play.js"),n(/*! ./controls/start.js */"./src/skin/controls/start.js"),n(/*! ./controls/poster.js */"./src/skin/controls/poster.js"),n(/*! ./controls/flex.js */"./src/skin/controls/flex.js"),n(/*! ./controls/fullscreen.js */"./src/skin/controls/fullscreen.js"),n(/*! ./controls/cssFullscreen.js */"./src/skin/controls/cssFullscreen.js"),n(/*! ./controls/volume.js */"./src/skin/controls/volume.js"),n(/*! ./controls/definition.js */"./src/skin/controls/definition.js"),n(/*! ./controls/loading.js */"./src/skin/controls/loading.js"),n(/*! ./controls/progress.js */"./src/skin/controls/progress.js"),n(/*! ./controls/time.js */"./src/skin/controls/time.js"),n(/*! ./controls/replay.js */"./src/skin/controls/replay.js"),n(/*! ./controls/playbackRate.js */"./src/skin/controls/playbackRate.js"),n(/*! ./controls/localPreview.js */"./src/skin/controls/localPreview.js"),n(/*! ./controls/download.js */"./src/skin/controls/download.js"),n(/*! ./controls/danmu.js */"./src/skin/controls/danmu.js"),n(/*! ./controls/pip.js */"./src/skin/controls/pip.js"),n(/*! ./controls/playNext.js */"./src/skin/controls/playNext.js"),n(/*! ./controls/rotate.js */"./src/skin/controls/rotate.js"),n(/*! ./controls/screenShot.js */"./src/skin/controls/screenShot.js"),n(/*! ./controls/textTrack.js */"./src/skin/controls/textTrack.js"),n(/*! ./controls/error.js */"./src/skin/controls/error.js"),n(/*! ./controls/memoryPlay.js */"./src/skin/controls/memoryPlay.js")},"./src/skin/style/index.scss":
/*!***********************************!*\
  !*** ./src/skin/style/index.scss ***!
  \***********************************/
/*! no static exports found */function(e,t,n){var r=n(/*! !../../../node_modules/css-loader??ref--5-1!../../../node_modules/postcss-loader/lib!../../../node_modules/sass-loader/lib/loader.js!./index.scss */"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/skin/style/index.scss");"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(r,a);r.locals&&(e.exports=r.locals)},"./src/utils/database.js":
/*!*******************************!*\
  !*** ./src/utils/database.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{name:"xgplayer",version:1,db:null,ojstore:{name:"xg-m4a",keypath:"vid"}};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.indexedDB=window.indexedDB||window.webkitindexedDB,this.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange,this.myDB=t}return r(e,[{key:"openDB",value:function(e){var t=this,n=this,r=this.myDB.version||1,a=n.indexedDB.open(n.myDB.name,r);a.onerror=function(e){},a.onsuccess=function(r){t.myDB.db=r.target.result,e.call(n)},a.onupgradeneeded=function(e){var t=e.target.result;e.target.transaction;t.objectStoreNames.contains(n.myDB.ojstore.name)||t.createObjectStore(n.myDB.ojstore.name,{keyPath:n.myDB.ojstore.keypath})}}},{key:"deletedb",value:function(){this.indexedDB.deleteDatabase(this.myDB.name)}},{key:"closeDB",value:function(){this.myDB.db.close()}},{key:"addData",value:function(e,t){for(var n=this.myDB.db.transaction(e,"readwrite").objectStore(e),r=void 0,a=0;a<t.length;a++)(r=n.add(t[a])).onerror=function(){},r.onsuccess=function(){}}},{key:"putData",value:function(e,t){for(var n=this.myDB.db.transaction(e,"readwrite").objectStore(e),r=void 0,a=0;a<t.length;a++)(r=n.put(t[a])).onerror=function(){},r.onsuccess=function(){}}},{key:"getDataByKey",value:function(e,t,n){var r=this,a=this.myDB.db.transaction(e,"readwrite").objectStore(e).get(t);a.onerror=function(){n.call(r,null)},a.onsuccess=function(e){var t=e.target.result;n.call(r,t)}}},{key:"deleteData",value:function(e,t){this.myDB.db.transaction(e,"readwrite").objectStore(e).delete(t)}},{key:"clearData",value:function(e){this.myDB.db.transaction(e,"readwrite").objectStore(e).clear()}}]),e}();t.default=a,e.exports=t.default},"./src/utils/sniffer.js":
/*!******************************!*\
  !*** ./src/utils/sniffer.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={get device(){return r.os.isPc?"pc":"mobile"},get browser(){var e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(function(n){return t[n].test(e)}))[0]},get os(){var e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),n=/(?:SymbianOS)/.test(e)||t,r=/(?:Android)/.test(e),a=/(?:Firefox)/.test(e),i=/(?:iPad|PlayBook)/.test(e)||r&&!/(?:Mobile)/.test(e)||a&&/(?:Tablet)/.test(e),o=/(?:iPhone)/.test(e)&&!i;return{isTablet:i,isPhone:o,isAndroid:r,isPc:!(o||r||n||i),isSymbian:n,isWindowsPhone:t,isFireFox:a}}};t.default=r,e.exports=t.default},"./src/utils/url.js":
/*!**************************!*\
  !*** ./src/utils/url.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getAbsoluteURL=function(e){if(!e.match(/^https?:\/\//)){var t=document.createElement("div");t.innerHTML='<a href="'+e+'">x</a>',e=t.firstChild.href}return e}},"./src/utils/util.js":
/*!***************************!*\
  !*** ./src/utils/util.js ***!
  \***************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var util={createDom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",a=document.createElement(e);return a.className=r,a.innerHTML=t,Object.keys(n).forEach(function(t){var r=t,i=n[t];"video"===e||"audio"===e?i&&a.setAttribute(r,i):a.setAttribute(r,i)}),a},hasClass:function(e,t){return!!e&&(e.classList?Array.prototype.some.call(e.classList,function(e){return e===t}):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)")))},addClass:function(e,t){e&&(e.classList?t.replace(/(^\s+|\s+$)/g,"").split(/\s+/g).forEach(function(t){t&&e.classList.add(t)}):util.hasClass(e,t)||(e.className+=" "+t))},removeClass:function(e,t){e&&(e.classList?t.split(/\s+/g).forEach(function(t){e.classList.remove(t)}):util.hasClass(e,t)&&t.split(/\s+/g).forEach(function(t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}))},toggleClass:function(e,t){e&&t.split(/\s+/g).forEach(function(t){util.hasClass(e,t)?util.removeClass(e,t):util.addClass(e,t)})},findDom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments[1],n=void 0;try{n=e.querySelector(t)}catch(r){0===t.indexOf("#")&&(n=e.getElementById(t.slice(1)))}return n},padStart:function(e,t,n){for(var r=String(n),a=t>>0,i=Math.ceil(a/r.length),o=[],s=String(e);i--;)o.push(r);return o.join("").substring(0,a-s.length)+s},format:function(e){if(window.isNaN(e))return"";var t=util.padStart(Math.floor(e/3600),2,0),n=util.padStart(Math.floor((e-3600*t)/60),2,0),r=util.padStart(Math.floor(e-3600*t-60*n),2,0);return("00"===t?[n,r]:[t,n,r]).join(":")},event:function(e){if(e.touches){var t=e.touches[0]||e.changedTouches[0];e.clientX=t.clientX||0,e.clientY=t.clientY||0,e.offsetX=t.pageX-t.target.offsetLeft,e.offsetY=t.pageY-t.target.offsetTop}e._target=e.target||e.srcElement},typeOf:function(e){return Object.prototype.toString.call(e).match(/([^\s.*]+)(?=]$)/g)[0]},deepCopy:function(e,t){if("Object"===util.typeOf(t)&&"Object"===util.typeOf(e))return Object.keys(t).forEach(function(n){"Object"!==util.typeOf(t[n])||t[n]instanceof Node?"Array"===util.typeOf(t[n])?e[n]="Array"===util.typeOf(e[n])?e[n].concat(t[n]):t[n]:e[n]=t[n]:e[n]?util.deepCopy(e[n],t[n]):e[n]=t[n]}),e},getBgImage:function(e){var t=(e.currentStyle||window.getComputedStyle(e,null)).backgroundImage;if(!t||"none"===t)return"";var n=document.createElement("a");return n.href=t.replace(/url\("|"\)/g,""),n.href},copyDom:function(e){if(e&&1===e.nodeType){var t=document.createElement(e.tagName);return Array.prototype.forEach.call(e.attributes,function(e){t.setAttribute(e.name,e.value)}),e.innerHTML&&(t.innerHTML=e.innerHTML),t}return""},setInterval:function(e,t,n,r){e._interval[t]||(e._interval[t]=setInterval(n.bind(e),r))},clearInterval:function(e,t){clearInterval(e._interval[t]),e._interval[t]=null},createImgBtn:function(e,t,n,r){var a=util.createDom("xg-"+e,"",{},"xgplayer-"+e+"-img");if(a.style.backgroundImage='url("'+t+'")',n&&r){var i=void 0,o=void 0,s=void 0;["px","rem","em","pt","dp","vw","vh","vm","%"].every(function(e){return!(n.indexOf(e)>-1&&r.indexOf(e)>-1)||(i=parseFloat(n.slice(0,n.indexOf(e)).trim()),o=parseFloat(r.slice(0,r.indexOf(e)).trim()),s=e,!1)}),a.style.width=""+i+s,a.style.height=""+o+s,a.style.backgroundSize=""+i+s+" "+o+s,a.style.margin="start"===e?"-"+o/2+s+" auto auto -"+i/2+s:"auto 5px auto 5px"}return a},Hex2RGBA:function(hex,alpha){var rgb=[];if(/^\#[0-9A-F]{3}$/i.test(hex)){var sixHex="#";hex.replace(/[0-9A-F]/gi,function(e){sixHex+=e+e}),hex=sixHex}return/^#[0-9A-F]{6}$/i.test(hex)?(hex.replace(/[0-9A-F]{2}/gi,function(kw){rgb.push(eval("0x"+kw))}),"rgba("+rgb.join(",")+", "+alpha+")"):"rgba(255, 255, 255, 0.1)"}};exports.default=util,module.exports=exports.default},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./src/index.js */"./src/index.js")}})});
//# sourceMappingURL=index.js.map

/***/ }),

=======
>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
/***/ "./src/flv-live.js":
/*!*************************!*\
  !*** ./src/flv-live.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FlvController; });
/* harmony import */ var xgplayer_remux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-remux */ "../xgplayer-remux/index.js");
/* harmony import */ var xgplayer_remux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_remux__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-loader */ "../xgplayer-loader/index.js");
/* harmony import */ var xgplayer_loader__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-demux */ "../xgplayer-demux/index.js");
/* harmony import */ var xgplayer_demux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! xgplayer */ "xgplayer");
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(xgplayer__WEBPACK_IMPORTED_MODULE_6__);








const REMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].REMUX_EVENTS;
const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].DEMUX_EVENTS;
const LOADER_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].LOADER_EVENTS
const MSE_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].MSE_EVENTS

const Tag = 'FLVController'

class Logger {
  warn () {}
}

const FLV_ERROR = 'FLV_ERROR'

class FlvController {
  constructor (player) {
    this.TAG = Tag
    this._player = player

    this.state = {
      initSegmentArrived: false
    }

    this.bufferClearTimer = null;
  }

  init () {
    this._context.registry('FETCH_LOADER', xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__["FetchLoader"])
    this._context.registry('LOADER_BUFFER', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["XgBuffer"])

    this._context.registry('FLV_DEMUXER', xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__["FlvDemuxer"])
    this._context.registry('TRACKS', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["Tracks"])

    this._context.registry('MP4_REMUXER', xgplayer_remux__WEBPACK_IMPORTED_MODULE_0___default.a.Mp4Remuxer)
    this._context.registry('PRE_SOURCE_BUFFER', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["PreSource"])

    if (this._player.config.compatibility !== false) {
      this._context.registry('COMPATIBILITY', xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__["Compatibility"])
    }

    this._context.registry('LOGGER', Logger)
    this.mse = this._context.registry('MSE', xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["Mse"])({ container: this._player.video })

    this._handleTimeUpdate = this._handleTimeUpdate.bind(this)

    this.initListeners()
  }

  initListeners () {
    this.on(LOADER_EVENTS.LOADER_DATALOADED, this._handleLoaderDataLoaded.bind(this))
    this.on(LOADER_EVENTS.LOADER_ERROR, this._handleNetworkError.bind(this))

    this.on(DEMUX_EVENTS.MEDIA_INFO, this._handleMediaInfo.bind(this))
    this.on(DEMUX_EVENTS.METADATA_PARSED, this._handleMetadataParsed.bind(this))
    this.on(DEMUX_EVENTS.DEMUX_COMPLETE, this._handleDemuxComplete.bind(this))
    this.on(DEMUX_EVENTS.DEMUX_ERROR, this._handleDemuxError.bind(this))

    this.on(REMUX_EVENTS.INIT_SEGMENT, this._handleAppendInitSegment.bind(this))
    this.on(REMUX_EVENTS.MEDIA_SEGMENT, this._handleMediaSegment.bind(this))

    this.on(MSE_EVENTS.SOURCE_UPDATE_END, this._handleSourceUpdateEnd.bind(this))

    this._player.on('timeupdate', this._handleTimeUpdate)
  }

  _handleMediaInfo () {
    if (!this._context.mediaInfo) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('failed to get mediainfo'))
    }
  }

  _handleLoaderDataLoaded () {
    this.emitTo('FLV_DEMUXER', DEMUX_EVENTS.DEMUX_START)
  }

  _handleMetadataParsed (type) {
    this.emit(REMUX_EVENTS.REMUX_METADATA, type)
  }
  _handleDemuxComplete () {
    this.emit(REMUX_EVENTS.REMUX_MEDIA)
  }

  _handleAppendInitSegment () {
    this.state.initSegmentArrived = true
    this.mse.addSourceBuffers()
  }

  _handleMediaSegment () {
    this.mse.addSourceBuffers()
    this.mse.doAppend();
  }

  _handleSourceUpdateEnd () {
    const time = this._player.currentTime;
    const video = this._player.video;
    const preloadTime = this._player.config.preloadTime || 5

    const { length } = video.buffered;

    if (length === 0) {
      return;
    }

    const bufferEnd = video.buffered.end(length - 1);
    if (bufferEnd - time > preloadTime * 2) {
      this._player.currentTime = bufferEnd - preloadTime
    }
    this.mse.doAppend();
  }

  _handleTimeUpdate () {
    const time = this._player.currentTime

    const video = this._player.video;
    let buffered = video.buffered

    if (!buffered || !buffered.length) {
      return;
    }

    const bufferStart = buffered.start(buffered.length - 1)
    // const bufferStart = this._player.getBufferedRange()[0]
    if (time - bufferStart > 10) {
      // 在直播时及时清空buffer，降低直播内存占用
      if (this.bufferClearTimer) {
        return;
      }

      this.mse.remove(time - 1, bufferStart)
      this.bufferClearTimer = setTimeout(() => {
        this.bufferClearTimer = null
      }, 5000)
    }
  }

  _handleNetworkError (tag, err) {
    this._player.emit('error', new xgplayer__WEBPACK_IMPORTED_MODULE_6___default.a.Errors('network', this._player.config.url))
    this._onError(LOADER_EVENTS.LOADER_ERROR, tag, err, true)
  }

  _handleDemuxError(tag, err, fatal) {
    if (fatal === undefined) {
      fatal = false;
    }
    this._player.emit('error', new xgplayer__WEBPACK_IMPORTED_MODULE_6___default.a.Errors('parse', this._player.config.url))
    this._onError(LOADER_EVENTS.LOADER_ERROR, tag, err, fatal)
  }

  _onError(type, mod, err, fatal) {
    let error = {
      errorType: type,
      errorDetails: `[${mod}]: ${err.message}`,
      errorFatal: fatal || false
    }
    this._player.emit(FLV_ERROR, error);
  }

  seek () {
    if (!this.state.initSegmentArrived) {
      this.loadData()
    }
  }

  loadData () {
    this.emit(LOADER_EVENTS.LADER_START, this._player.config.url)
  }

  pause () {
    const loader = this._context.getInstance('FETCH_LOADER')

    if (loader) {
      loader.cancel()
    }
  }

  destroy () {
    this._player.off('timeupdate', this._handleTimeUpdate)
    this._player = null
    this.mse = null
  }
}


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer */ "xgplayer");
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _flv_live__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flv-live */ "./src/flv-live.js");



const flvAllowedEvents = xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].FlvAllowedEvents;

class FlvPlayer extends xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a {
  constructor (config) {
    super(config)
    this.context = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["Context"](flvAllowedEvents)
    this.initEvents()
    this.loaderCompleteTimer = null
    // const preloadTime = player.config.preloadTime || 15
  }

  start () {
    this.initFlv()
    this.context.init()
    super.start(this.flv.mse.url)
  }

  initFlvEvents (flv) {
    const player = this;
    flv.once(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].REMUX_EVENTS.INIT_SEGMENT, () => {
      xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.addClass(player.root, 'xgplayer-is-live')
      if (!xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.findDom(this.root, 'xg-live')) {
        const live = xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.createDom('xg-live', '正在直播', {}, 'xgplayer-live')
        player.controls.appendChild(live)
      }
    })

    flv.once(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].LOADER_EVENTS.LOADER_COMPLETE, () => {
      // 直播完成，待播放器播完缓存后发送关闭事件
      if (!player.paused) {
        this.loaderCompleteTimer = setInterval(() => {
          const end = player.getBufferedRange()[1]
          if (Math.abs(player.currentTime - end) < 0.5) {
            player.emit('ended')
            window.clearInterval(this.loaderCompleteTimer)
          }
        }, 200)
      }
    })
  }

  initEvents () {
    this.on('timeupdate', () => {
      this.loadData()
    })

    this.on('seeking', () => {
      const time = this.currentTime
      const range = this.getBufferedRange()
      if (time > range[1] || time < range[0]) {
        this.flv.seek(this.currentTime)
      }
    })
  }

  initFlv () {
    const flv = this.context.registry('FLV_CONTROLLER', _flv_live__WEBPACK_IMPORTED_MODULE_2__["default"])(this)
    this.initFlvEvents(flv)
    this.flv = flv
  }

  play () {
    if (this._hasStart) {
      this._destroy().then(() => {
        this.context = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["Context"](flvAllowedEvents)
        const flv = this.context.registry('FLV_CONTROLLER', _flv_live__WEBPACK_IMPORTED_MODULE_2__["default"])(this)
        this.initFlvEvents(flv)
        this.flv = flv
        this.context.init()
        super.start(flv.mse.url)
        super.play()
      })

    } else {
      super.play()
    }
  }

  pause () {
    super.pause()
    if (this.flv) {
      this.flv.pause()
    }
  }

  loadData (time = this.currentTime) {
    if (this.flv) {
      this.flv.seek(time)
    }
  }

  destroy () {
    this._destroy().then(() => {
      super.destroy();
    })
  }

  _destroy () {
    return this.flv.mse.destroy().then(() => {
      this.context.destroy()
      this.flv = null
      this.context = null
      if (this.loaderCompleteTimer) {
        window.clearInterval(this.loaderCompleteTimer)
      }
    })
  }

  get src () {
    return this.currentSrc
  }

  set src (url) {
    this.player.config.url = url
    if (!this.paused) {
      this.pause()
      this.once('pause', () => {
        this.start(url)
      })
      this.once('canplay', () => {
        this.play()
      })
    } else {
      this.start(url)
    }
    this.once('canplay', () => {
      this.currentTime = 0
    })
  }
}

module.exports = FlvPlayer

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "../../node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "xgplayer":
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = xgplayer;

/***/ })

/******/ });
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 6568d0dd7c2d795ab5b1bd65773d4c1f5f98fc06
